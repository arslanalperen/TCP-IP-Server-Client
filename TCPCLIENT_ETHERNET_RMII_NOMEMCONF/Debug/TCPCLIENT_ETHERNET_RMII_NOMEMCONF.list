
TCPCLIENT_ETHERNET_RMII_NOMEMCONF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010674  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c98  08010824  08010824  00020824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134bc  080134bc  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  080134bc  080134bc  000234bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134c4  080134c4  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134c4  080134c4  000234c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134c8  080134c8  000234c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080134cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          0000a544  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a5d4  2000a5d4  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f6b9  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052ca  00000000  00000000  0004f779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  00054a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  000561b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003026f  00000000  00000000  00057858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a0f  00000000  00000000  00087ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0d01  00000000  00000000  000ad4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019e1d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a50  00000000  00000000  0019e228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801080c 	.word	0x0801080c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0801080c 	.word	0x0801080c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fea4 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f816 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8d6 	bl	8000750 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005a4:	f003 fd38 	bl	8004018 <MX_LWIP_Init>
  MX_TIM1_Init();
 80005a8:	f000 f880 	bl	80006ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <main+0x30>)
 80005ae:	f003 f901 	bl	80037b4 <HAL_TIM_Base_Start_IT>
  tcp_client_init();
 80005b2:	f000 fb5f 	bl	8000c74 <tcp_client_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <main+0x34>)
 80005b8:	f003 ff9e 	bl	80044f8 <ethernetif_input>
//	  MX_LWIP_Process();
	  sys_check_timeouts();
 80005bc:	f00c f96c 	bl	800c898 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005c0:	e7f9      	b.n	80005b6 <main+0x22>
 80005c2:	bf00      	nop
 80005c4:	200000ac 	.word	0x200000ac
 80005c8:	20000108 	.word	0x20000108

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f00e ff0a 	bl	800f3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <SystemClock_Config+0xd8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a2a      	ldr	r2, [pc, #168]	; (80006a4 <SystemClock_Config+0xd8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xd8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xdc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <SystemClock_Config+0xdc>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xdc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000640:	23b4      	movs	r3, #180	; 0xb4
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fbef 	bl	8002e34 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f958 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000660:	f002 fb98 	bl	8002d94 <HAL_PWREx_EnableOverDrive>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800066a:	f000 f951 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fe49 	bl	8003324 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000698:	f000 f93a 	bl	8000910 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <MX_TIM1_Init+0xa0>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006d0:	f244 624f 	movw	r2, #17999	; 0x464f
 80006d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006de:	f242 720f 	movw	r2, #9999	; 0x270f
 80006e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f6:	4814      	ldr	r0, [pc, #80]	; (8000748 <MX_TIM1_Init+0x9c>)
 80006f8:	f003 f80c 	bl	8003714 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000702:	f000 f905 	bl	8000910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_TIM1_Init+0x9c>)
 8000714:	f003 f9c6 	bl	8003aa4 <HAL_TIM_ConfigClockSource>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800071e:	f000 f8f7 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_TIM1_Init+0x9c>)
 8000730:	f003 fbe2 	bl	8003ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800073a:	f000 f8e9 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000ac 	.word	0x200000ac
 800074c:	40010000 	.word	0x40010000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b63      	ldr	r3, [pc, #396]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a62      	ldr	r2, [pc, #392]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b60      	ldr	r3, [pc, #384]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b5c      	ldr	r3, [pc, #368]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a5b      	ldr	r2, [pc, #364]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a54      	ldr	r2, [pc, #336]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a4d      	ldr	r2, [pc, #308]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b4b      	ldr	r3, [pc, #300]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b47      	ldr	r3, [pc, #284]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a46      	ldr	r2, [pc, #280]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <MX_GPIO_Init+0x1a8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f244 0181 	movw	r1, #16513	; 0x4081
 8000814:	4839      	ldr	r0, [pc, #228]	; (80008fc <MX_GPIO_Init+0x1ac>)
 8000816:	f002 faa3 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4838      	ldr	r0, [pc, #224]	; (8000900 <MX_GPIO_Init+0x1b0>)
 8000820:	f002 fa9e 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4832      	ldr	r0, [pc, #200]	; (8000904 <MX_GPIO_Init+0x1b4>)
 800083c:	f002 f8e4 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000840:	f244 0381 	movw	r3, #16513	; 0x4081
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4828      	ldr	r0, [pc, #160]	; (80008fc <MX_GPIO_Init+0x1ac>)
 800085a:	f002 f8d5 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800085e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000870:	2307      	movs	r3, #7
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4823      	ldr	r0, [pc, #140]	; (8000908 <MX_GPIO_Init+0x1b8>)
 800087c:	f002 f8c4 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	481a      	ldr	r0, [pc, #104]	; (8000900 <MX_GPIO_Init+0x1b0>)
 8000898:	f002 f8b6 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <MX_GPIO_Init+0x1b0>)
 80008b0:	f002 f8aa 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c6:	230a      	movs	r3, #10
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480e      	ldr	r0, [pc, #56]	; (800090c <MX_GPIO_Init+0x1bc>)
 80008d2:	f002 f899 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <MX_GPIO_Init+0x1bc>)
 80008ec:	f002 f88c 	bl	8002a08 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400
 8000900:	40021800 	.word	0x40021800
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	40020000 	.word	0x40020000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_TIM_Base_MspInit+0x48>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d115      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_TIM_Base_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <HAL_TIM_Base_MspInit+0x4c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_TIM_Base_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2019      	movs	r0, #25
 80009a0:	f000 fe11 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009a4:	2019      	movs	r0, #25
 80009a6:	f000 fe2a 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010000 	.word	0x40010000
 80009b8:	40023800 	.word	0x40023800

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 fcbe 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a16:	f002 ff3d 	bl	8003894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000ac 	.word	0x200000ac

08000a24 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <ETH_IRQHandler+0x10>)
 8000a2a:	f001 f905 	bl	8001c38 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20004c20 	.word	0x20004c20

08000a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_kill>:

int _kill(int pid, int sig)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <_kill+0x20>)
 8000a54:	2216      	movs	r2, #22
 8000a56:	601a      	str	r2, [r3, #0]
	return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	2000a5c4 	.word	0x2000a5c4

08000a6c <_exit>:

void _exit (int status)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffe5 	bl	8000a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a7e:	e7fe      	b.n	8000a7e <_exit+0x12>

08000a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00a      	b.n	8000aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a92:	f3af 8000 	nop.w
 8000a96:	4601      	mov	r1, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2ca      	uxtb	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf0      	blt.n	8000a92 <_read+0x12>
	}

return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e009      	b.n	8000ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf1      	blt.n	8000acc <_write+0x12>
	}
	return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d205      	bcs.n	8000b98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <_sbrk+0x6c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20030000 	.word	0x20030000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	200000f4 	.word	0x200000f4
 8000bc4:	2000a5d8 	.word	0x2000a5d8
 8000bc8:	2000a5c4 	.word	0x2000a5c4

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b09d      	sub	sp, #116	; 0x74
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	char buf[100];

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00e fc54 	bl	800f4b0 <siprintf>
 8000c08:	66f8      	str	r0, [r7, #108]	; 0x6c

	if (counter !=0)
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d023      	beq.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		/* allocate pbuf */
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000c1e:	4619      	mov	r1, r3
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f004 ff6b 	bl	8005afc <pbuf_alloc>
 8000c26:	4603      	mov	r3, r0
 8000c28:	60a3      	str	r3, [r4, #8]


		/* copy data to pbuf */
		pbuf_take(esTx->p, (char*)buf, len);
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c32:	b292      	uxth	r2, r2
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fc9f 	bl	800657c <pbuf_take>

		tcp_client_send(pcbTx, esTx);
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f926 	bl	8000e9a <tcp_client_send>

		pbuf_free(esTx->p);
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 fa35 	bl	80060c4 <pbuf_free>
	}

}
 8000c5a:	bf00      	nop
 8000c5c:	3774      	adds	r7, #116	; 0x74
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000f8 	.word	0x200000f8
 8000c68:	08010824 	.word	0x08010824
 8000c6c:	200000fc 	.word	0x200000fc
 8000c70:	20000100 	.word	0x20000100

08000c74 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000c7a:	f007 f873 	bl	8007d64 <tcp_new>
 8000c7e:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 0, 100);
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <tcp_client_init+0x24>)
 8000c82:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 10, tcp_client_connected);
 8000c84:	4639      	mov	r1, r7
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <tcp_client_init+0x28>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f006 f930 	bl	8006ef0 <tcp_connect>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	6400a8c0 	.word	0x6400a8c0
 8000c9c:	08000ca1 	.word	0x08000ca1

08000ca0 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4613      	mov	r3, r2
 8000cac:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000cae:	200c      	movs	r0, #12
 8000cb0:	f004 f992 	bl	8004fd8 <mem_malloc>
 8000cb4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d023      	beq.n	8000d04 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000cd4:	6939      	ldr	r1, [r7, #16]
 8000cd6:	68b8      	ldr	r0, [r7, #8]
 8000cd8:	f007 f84c 	bl	8007d74 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000cdc:	490f      	ldr	r1, [pc, #60]	; (8000d1c <tcp_client_connected+0x7c>)
 8000cde:	68b8      	ldr	r0, [r7, #8]
 8000ce0:	f007 f85a 	bl	8007d98 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <tcp_client_connected+0x80>)
 8000ce8:	68b8      	ldr	r0, [r7, #8]
 8000cea:	f007 f8bb 	bl	8007e64 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <tcp_client_connected+0x84>)
 8000cf0:	68b8      	ldr	r0, [r7, #8]
 8000cf2:	f007 f873 	bl	8007ddc <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000cf6:	6939      	ldr	r1, [r7, #16]
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f000 f943 	bl	8000f84 <tcp_client_handle>

    ret_err = ERR_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	75fb      	strb	r3, [r7, #23]
 8000d02:	e005      	b.n	8000d10 <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000d04:	6939      	ldr	r1, [r7, #16]
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f000 f915 	bl	8000f36 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000d0c:	23ff      	movs	r3, #255	; 0xff
 8000d0e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	08000d29 	.word	0x08000d29
 8000d20:	08000e19 	.word	0x08000e19
 8000d24:	08000e61 	.word	0x08000e61

08000d28 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d105      	bne.n	8000d48 <tcp_client_recv+0x20>
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <tcp_client_recv+0xe4>)
 8000d3e:	22db      	movs	r2, #219	; 0xdb
 8000d40:	4933      	ldr	r1, [pc, #204]	; (8000e10 <tcp_client_recv+0xe8>)
 8000d42:	4834      	ldr	r0, [pc, #208]	; (8000e14 <tcp_client_recv+0xec>)
 8000d44:	f00e fb5e 	bl	800f404 <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10d      	bne.n	8000d6e <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2203      	movs	r2, #3
 8000d56:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000d60:	6939      	ldr	r1, [r7, #16]
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f000 f8e7 	bl	8000f36 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	75fb      	strb	r3, [r7, #23]
 8000d6c:	e047      	b.n	8000dfe <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f005 f99e 	bl	80060c4 <pbuf_free>
    }
    ret_err = err;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	75fb      	strb	r3, [r7, #23]
 8000d8c:	e037      	b.n	8000dfe <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d112      	bne.n	8000dbc <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	891b      	ldrh	r3, [r3, #8]
 8000da0:	4619      	mov	r1, r3
 8000da2:	68b8      	ldr	r0, [r7, #8]
 8000da4:	f006 f80e 	bl	8006dc4 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000da8:	6939      	ldr	r1, [r7, #16]
 8000daa:	68b8      	ldr	r0, [r7, #8]
 8000dac:	f000 f8ea 	bl	8000f84 <tcp_client_handle>

    pbuf_free(p);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f005 f987 	bl	80060c4 <pbuf_free>

    ret_err = ERR_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	e020      	b.n	8000dfe <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d10e      	bne.n	8000de2 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	891b      	ldrh	r3, [r3, #8]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	68b8      	ldr	r0, [r7, #8]
 8000dcc:	f005 fffa 	bl	8006dc4 <tcp_recved>
    es->p = NULL;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f005 f974 	bl	80060c4 <pbuf_free>
    ret_err = ERR_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	75fb      	strb	r3, [r7, #23]
 8000de0:	e00d      	b.n	8000dfe <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	891b      	ldrh	r3, [r3, #8]
 8000de6:	4619      	mov	r1, r3
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f005 ffeb 	bl	8006dc4 <tcp_recved>
    es->p = NULL;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f005 f965 	bl	80060c4 <pbuf_free>
    ret_err = ERR_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08010844 	.word	0x08010844
 8000e10:	08010860 	.word	0x08010860
 8000e14:	0801086c 	.word	0x0801086c

08000e18 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00e      	beq.n	8000e4a <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d103      	bne.n	8000e44 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6838      	ldr	r0, [r7, #0]
 8000e40:	f000 f879 	bl	8000f36 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e004      	b.n	8000e54 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f005 ff54 	bl	8006cf8 <tcp_abort>
    ret_err = ERR_ABRT;
 8000e50:	23f3      	movs	r3, #243	; 0xf3
 8000e52:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2200      	movs	r2, #0
 8000e76:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d107      	bne.n	8000e90 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d103      	bne.n	8000e90 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8000e88:	6979      	ldr	r1, [r7, #20]
 8000e8a:	68b8      	ldr	r0, [r7, #8]
 8000e8c:	f000 f853 	bl	8000f36 <tcp_client_connection_close>
  }
  return ERR_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000ea8:	e031      	b.n	8000f0e <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	6859      	ldr	r1, [r3, #4]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	895a      	ldrh	r2, [r3, #10]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f009 fe84 	bl	800abc8 <tcp_write>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d118      	bne.n	8000efe <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	895b      	ldrh	r3, [r3, #10]
 8000ed0:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 f98c 	bl	8006204 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000eec:	6938      	ldr	r0, [r7, #16]
 8000eee:	f005 f8e9 	bl	80060c4 <pbuf_free>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000ef6:	7b7b      	ldrb	r3, [r7, #13]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f7      	beq.n	8000eec <tcp_client_send+0x52>
 8000efc:	e007      	b.n	8000f0e <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 8000efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f06:	d102      	bne.n	8000f0e <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10b      	bne.n	8000f2e <tcp_client_send+0x94>
         (es->p != NULL) &&
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	895a      	ldrh	r2, [r3, #10]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d9bd      	bls.n	8000eaa <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000f40:	2100      	movs	r1, #0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f006 ff16 	bl	8007d74 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f006 ff46 	bl	8007ddc <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f006 ff20 	bl	8007d98 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f006 ff60 	bl	8007e20 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f006 ff7d 	bl	8007e64 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f003 fecb 	bl	8004d0c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f005 fdd4 	bl	8006b24 <tcp_close>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	8b1b      	ldrh	r3, [r3, #24]
 8000f98:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00d fa28 	bl	800e3f4 <ip4addr_ntoa>
 8000fa4:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <tcp_client_handle+0x40>)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <tcp_client_handle+0x44>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]

	counter++;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <tcp_client_handle+0x48>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <tcp_client_handle+0x48>)
 8000fba:	6013      	str	r3, [r2, #0]

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200000fc 	.word	0x200000fc
 8000fc8:	20000100 	.word	0x20000100
 8000fcc:	200000f8 	.word	0x200000f8

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff fde7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f00e f99d 	bl	800f33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fac7 	bl	8000594 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001008:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001014:	080134cc 	.word	0x080134cc
  ldr r2, =_sbss
 8001018:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800101c:	2000a5d4 	.word	0x2000a5d4

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>

08001022 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <LAN8742_RegisterBusIO+0x28>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <LAN8742_RegisterBusIO+0x28>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <LAN8742_RegisterBusIO+0x28>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e014      	b.n	800107a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d17c      	bne.n	80011a0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2220      	movs	r2, #32
 80010b8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e01c      	b.n	80010fa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f107 0208 	add.w	r2, r7, #8
 80010c8:	2112      	movs	r1, #18
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	4798      	blx	r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da03      	bge.n	80010dc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80010d4:	f06f 0304 	mvn.w	r3, #4
 80010d8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80010da:	e00b      	b.n	80010f4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d105      	bne.n	80010f4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
         break;
 80010f2:	e005      	b.n	8001100 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	d9df      	bls.n	80010c0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b1f      	cmp	r3, #31
 8001106:	d902      	bls.n	800110e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001108:	f06f 0302 	mvn.w	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d145      	bne.n	80011a0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6810      	ldr	r0, [r2, #0]
 800111c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001120:	2100      	movs	r1, #0
 8001122:	4798      	blx	r3
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	db37      	blt.n	800119a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6810      	ldr	r0, [r2, #0]
 8001132:	f107 0208 	add.w	r2, r7, #8
 8001136:	2100      	movs	r1, #0
 8001138:	4798      	blx	r3
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	db28      	blt.n	8001192 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4798      	blx	r3
 8001146:	4603      	mov	r3, r0
 8001148:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800114a:	e01c      	b.n	8001186 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4798      	blx	r3
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800115e:	d80e      	bhi.n	800117e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6810      	ldr	r0, [r2, #0]
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2100      	movs	r1, #0
 800116e:	4798      	blx	r3
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	da07      	bge.n	8001186 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001176:	f06f 0304 	mvn.w	r3, #4
 800117a:	613b      	str	r3, [r7, #16]
                 break;
 800117c:	e010      	b.n	80011a0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800117e:	f06f 0301 	mvn.w	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
               break;
 8001184:	e00c      	b.n	80011a0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1dd      	bne.n	800114c <LAN8742_Init+0xc6>
 8001190:	e006      	b.n	80011a0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001192:	f06f 0304 	mvn.w	r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e002      	b.n	80011a0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800119a:	f06f 0303 	mvn.w	r3, #3
 800119e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d112      	bne.n	80011cc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4798      	blx	r3
 80011ac:	4603      	mov	r3, r0
 80011ae:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80011b0:	bf00      	nop
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4798      	blx	r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011c4:	d9f5      	bls.n	80011b2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80011cc:	693b      	ldr	r3, [r7, #16]
 }
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6810      	ldr	r0, [r2, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	2101      	movs	r1, #1
 80011f0:	4798      	blx	r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da02      	bge.n	80011fe <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011f8:	f06f 0304 	mvn.w	r3, #4
 80011fc:	e06e      	b.n	80012dc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6810      	ldr	r0, [r2, #0]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	2101      	movs	r1, #1
 800120c:	4798      	blx	r3
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	da02      	bge.n	800121a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001214:	f06f 0304 	mvn.w	r3, #4
 8001218:	e060      	b.n	80012dc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001224:	2301      	movs	r3, #1
 8001226:	e059      	b.n	80012dc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6810      	ldr	r0, [r2, #0]
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	2100      	movs	r1, #0
 8001236:	4798      	blx	r3
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	da02      	bge.n	8001244 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800123e:	f06f 0304 	mvn.w	r3, #4
 8001242:	e04b      	b.n	80012dc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d11b      	bne.n	8001286 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <LAN8742_GetLinkState+0x90>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001262:	2302      	movs	r3, #2
 8001264:	e03a      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001270:	2303      	movs	r3, #3
 8001272:	e033      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800127e:	2304      	movs	r3, #4
 8001280:	e02c      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001282:	2305      	movs	r3, #5
 8001284:	e02a      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6810      	ldr	r0, [r2, #0]
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	211f      	movs	r1, #31
 8001294:	4798      	blx	r3
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	da02      	bge.n	80012a2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800129c:	f06f 0304 	mvn.w	r3, #4
 80012a0:	e01c      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012ac:	2306      	movs	r3, #6
 80012ae:	e015      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 031c 	and.w	r3, r3, #28
 80012b6:	2b18      	cmp	r3, #24
 80012b8:	d101      	bne.n	80012be <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ba:	2302      	movs	r3, #2
 80012bc:	e00e      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f003 031c 	and.w	r3, r3, #28
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d101      	bne.n	80012cc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e007      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 031c 	and.w	r3, r3, #28
 80012d2:	2b14      	cmp	r3, #20
 80012d4:	d101      	bne.n	80012da <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012d6:	2304      	movs	r3, #4
 80012d8:	e000      	b.n	80012dc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012da:	2305      	movs	r3, #5
    }				
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_Init+0x40>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_Init+0x40>)
 80012fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x40>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f94f 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fb00 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f967 	bl	800161a <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f92f 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000104 	.word	0x20000104

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000104 	.word	0x20000104

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000008 	.word	0x20000008

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <__NVIC_EnableIRQ+0x38>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff29 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff3e 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff31 	bl	8001474 <__NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffa2 	bl	800156c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06c      	b.n	8001720 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2223      	movs	r2, #35	; 0x23
 8001654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f002 ffbd 	bl	80045d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_ETH_Init+0xf4>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <HAL_ETH_Init+0xf4>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_ETH_Init+0xf4>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_ETH_Init+0xf8>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a2b      	ldr	r2, [pc, #172]	; (800172c <HAL_ETH_Init+0xf8>)
 8001680:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001684:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_ETH_Init+0xf8>)
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4927      	ldr	r1, [pc, #156]	; (800172c <HAL_ETH_Init+0xf8>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_ETH_Init+0xf8>)
 8001696:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff fe7e 	bl	80013b0 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016b6:	e011      	b.n	80016dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016b8:	f7ff fe7a 	bl	80013b0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016c6:	d909      	bls.n	80016dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	22e0      	movs	r2, #224	; 0xe0
 80016d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e021      	b.n	8001720 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1e4      	bne.n	80016b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fee4 	bl	80024bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 ff8b 	bl	8002610 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 ffe1 	bl	80026c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	461a      	mov	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 ff49 	bl	80025a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2210      	movs	r2, #16
 800171a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800

08001730 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800173e:	2b10      	cmp	r3, #16
 8001740:	d150      	bne.n	80017e4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2223      	movs	r2, #35	; 0x23
 8001746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f9fd 	bl	8001b50 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0208 	orr.w	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800176e:	2001      	movs	r0, #1
 8001770:	f7ff fe2a 	bl	80013c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0204 	orr.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fe17 	bl	80013c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fd2a 	bl	80021fc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017be:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017d6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2223      	movs	r2, #35	; 0x23
 80017dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e000      	b.n	80017e6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
  }
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017fc:	2b23      	cmp	r3, #35	; 0x23
 80017fe:	d14a      	bne.n	8001896 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2223      	movs	r2, #35	; 0x23
 8001804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800181a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f023 0302 	bic.w	r3, r3, #2
 8001832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001836:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fdb9 	bl	80013c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fccc 	bl	80021fc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0208 	bic.w	r2, r2, #8
 8001872:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff fda3 	bl	80013c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2210      	movs	r2, #16
 800188e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e07c      	b.n	80019c0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018cc:	2b23      	cmp	r3, #35	; 0x23
 80018ce:	d176      	bne.n	80019be <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80018d0:	2200      	movs	r2, #0
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 ff61 	bl	800279c <ETH_Prepare_Tx_Descriptors>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	f043 0202 	orr.w	r2, r3, #2
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e065      	b.n	80019c0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018f4:	f3bf 8f4f 	dsb	sy
}
 80018f8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3206      	adds	r2, #6
 8001902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001906:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	2b03      	cmp	r3, #3
 8001918:	d904      	bls.n	8001924 <HAL_ETH_Transmit+0x84>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	1f1a      	subs	r2, r3, #4
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3106      	adds	r1, #6
 8001930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001934:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001938:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800193a:	f7ff fd39 	bl	80013b0 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001940:	e037      	b.n	80019b2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d011      	beq.n	8001978 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	f043 0208 	orr.w	r2, r3, #8
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e023      	b.n	80019c0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d018      	beq.n	80019b2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001980:	f7ff fd16 	bl	80013b0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d302      	bcc.n	8001996 <HAL_ETH_Transmit+0xf6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80019ac:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e006      	b.n	80019c0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dbc3      	blt.n	8001942 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
  }
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	f043 0201 	orr.w	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0a8      	b.n	8001b46 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019fa:	2b23      	cmp	r3, #35	; 0x23
 80019fc:	d001      	beq.n	8001a02 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0a1      	b.n	8001b46 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	3212      	adds	r2, #18
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a18:	f1c3 0304 	rsb	r3, r3, #4
 8001a1c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a1e:	e06a      	b.n	8001af6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	69da      	ldr	r2, [r3, #28]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_ETH_ReadData+0x88>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d040      	beq.n	8001ad2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00c      	beq.n	8001a94 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a84:	3b04      	subs	r3, #4
 8001a86:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001aac:	461a      	mov	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f002 ff69 	bl	8004988 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d902      	bls.n	8001ae4 <HAL_ETH_ReadData+0x11c>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b04      	subs	r3, #4
 8001ae2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	3212      	adds	r2, #18
 8001aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db06      	blt.n	8001b0c <HAL_ETH_ReadData+0x144>
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d202      	bcs.n	8001b0c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d089      	beq.n	8001a20 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	441a      	add	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f815 	bl	8001b50 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b64:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	3212      	adds	r2, #18
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b76:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b78:	e040      	b.n	8001bfc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fece 	bl	8004928 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	74fb      	strb	r3, [r7, #19]
 8001b96:	e007      	b.n	8001ba8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ba8:	7cfb      	ldrb	r3, [r7, #19]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d026      	beq.n	8001bfc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <ETH_UpdateDescriptor+0xe4>)
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	e003      	b.n	8001bc6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001bc4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bc6:	f3bf 8f5f 	dmb	sy
}
 8001bca:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d902      	bls.n	8001bea <ETH_UpdateDescriptor+0x9a>
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	3b04      	subs	r3, #4
 8001be8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	3212      	adds	r2, #18
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <ETH_UpdateDescriptor+0xb8>
 8001c02:	7cfb      	ldrb	r3, [r7, #19]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1b8      	bne.n	8001b7a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d00c      	beq.n	8001c2c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	800045f8 	.word	0x800045f8

08001c38 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d112      	bne.n	8001c78 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d109      	bne.n	8001c78 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_ETH_IRQHandler+0x178>)
 8001c70:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8ac 	bl	8001dd0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d113      	bne.n	8001cb2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001caa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f885 	bl	8001dbc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc4:	d14c      	bne.n	8001d60 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd8:	d142      	bne.n	8001d60 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce0:	f043 0208 	orr.w	r2, r3, #8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfc:	d11a      	bne.n	8001d34 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_ETH_IRQHandler+0x17c>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001d24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d28:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	22e0      	movs	r2, #224	; 0xe0
 8001d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d32:	e012      	b.n	8001d5a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d52:	461a      	mov	r2, r3
 8001d54:	f248 6380 	movw	r3, #34432	; 0x8680
 8001d58:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f842 	bl	8001de4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d10e      	bne.n	8001d8c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f83a 	bl	8001df8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_ETH_IRQHandler+0x180>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_ETH_IRQHandler+0x180>)
 8001d9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d9e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f833 	bl	8001e0c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00010040 	.word	0x00010040
 8001db4:	007e2000 	.word	0x007e2000
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 031c 	and.w	r3, r3, #28
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	02db      	lsls	r3, r3, #11
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	019b      	lsls	r3, r3, #6
 8001e4e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f023 0302 	bic.w	r3, r3, #2
 8001e5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e70:	f7ff fa9e 	bl	80013b0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e76:	e00d      	b.n	8001e94 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e78:	f7ff fa9a 	bl	80013b0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d301      	bcc.n	8001e8c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e010      	b.n	8001eae <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ec      	bne.n	8001e78 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 031c 	and.w	r3, r3, #28
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	02db      	lsls	r3, r3, #11
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	019b      	lsls	r3, r3, #6
 8001ee4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f10:	f7ff fa4e 	bl	80013b0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f16:	e00d      	b.n	8001f34 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f18:	f7ff fa4a 	bl	80013b0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f26:	d301      	bcc.n	8001f2c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e009      	b.n	8001f40 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ec      	bne.n	8001f18 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d9      	b.n	8002110 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf0c      	ite	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	2300      	movne	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e00b      	b.n	8002148 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002136:	2b10      	cmp	r3, #16
 8002138:	d105      	bne.n	8002146 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f883 	bl	8002248 <ETH_SetMACConfig>

    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 031c 	bic.w	r3, r3, #28
 8002166:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002168:	f001 fac8 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800216c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d908      	bls.n	8002188 <HAL_ETH_SetMDIOClockRange+0x38>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d804      	bhi.n	8002188 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e027      	b.n	80021d8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d908      	bls.n	80021a2 <HAL_ETH_SetMDIOClockRange+0x52>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d204      	bcs.n	80021a2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f043 030c 	orr.w	r3, r3, #12
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e01a      	b.n	80021d8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d303      	bcc.n	80021b2 <HAL_ETH_SetMDIOClockRange+0x62>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d911      	bls.n	80021d6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d908      	bls.n	80021cc <HAL_ETH_SetMDIOClockRange+0x7c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d804      	bhi.n	80021cc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e005      	b.n	80021d8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e000      	b.n	80021d8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021d6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	611a      	str	r2, [r3, #16]
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	01312cff 	.word	0x01312cff
 80021ec:	02160ebf 	.word	0x02160ebf
 80021f0:	03938700 	.word	0x03938700
 80021f4:	05f5e0ff 	.word	0x05f5e0ff
 80021f8:	08f0d17f 	.word	0x08f0d17f

080021fc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800221e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff f8cb 	bl	80013c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223c:	6193      	str	r3, [r2, #24]
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <ETH_SetMACConfig+0x15c>)
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7c1b      	ldrb	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <ETH_SetMACConfig+0x28>
 800226a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800226e:	e000      	b.n	8002272 <ETH_SetMACConfig+0x2a>
 8002270:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7c5b      	ldrb	r3, [r3, #17]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <ETH_SetMACConfig+0x38>
 800227a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800227e:	e000      	b.n	8002282 <ETH_SetMACConfig+0x3a>
 8002280:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002282:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002288:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7fdb      	ldrb	r3, [r3, #31]
 800228e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002290:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002296:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	7f92      	ldrb	r2, [r2, #30]
 800229c:	2a00      	cmp	r2, #0
 800229e:	d102      	bne.n	80022a6 <ETH_SetMACConfig+0x5e>
 80022a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a4:	e000      	b.n	80022a8 <ETH_SetMACConfig+0x60>
 80022a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80022a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	7f1b      	ldrb	r3, [r3, #28]
 80022ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d102      	bne.n	80022d0 <ETH_SetMACConfig+0x88>
 80022ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ce:	e000      	b.n	80022d2 <ETH_SetMACConfig+0x8a>
 80022d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	7bdb      	ldrb	r3, [r3, #15]
 80022d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022ea:	4313      	orrs	r3, r2
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff f860 	bl	80013c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800232e:	2a00      	cmp	r2, #0
 8002330:	d101      	bne.n	8002336 <ETH_SetMACConfig+0xee>
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	e000      	b.n	8002338 <ETH_SetMACConfig+0xf0>
 8002336:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002338:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800233e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002346:	2a01      	cmp	r2, #1
 8002348:	d101      	bne.n	800234e <ETH_SetMACConfig+0x106>
 800234a:	2208      	movs	r2, #8
 800234c:	e000      	b.n	8002350 <ETH_SetMACConfig+0x108>
 800234e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002350:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002358:	2a01      	cmp	r2, #1
 800235a:	d101      	bne.n	8002360 <ETH_SetMACConfig+0x118>
 800235c:	2204      	movs	r2, #4
 800235e:	e000      	b.n	8002362 <ETH_SetMACConfig+0x11a>
 8002360:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002362:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800236a:	2a01      	cmp	r2, #1
 800236c:	d101      	bne.n	8002372 <ETH_SetMACConfig+0x12a>
 800236e:	2202      	movs	r2, #2
 8002370:	e000      	b.n	8002374 <ETH_SetMACConfig+0x12c>
 8002372:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002374:	4313      	orrs	r3, r2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800238c:	2001      	movs	r0, #1
 800238e:	f7ff f81b 	bl	80013c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	ff20810f 	.word	0xff20810f

080023a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <ETH_SetDMAConfig+0x110>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7b1b      	ldrb	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <ETH_SetDMAConfig+0x2c>
 80023ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023d2:	e000      	b.n	80023d6 <ETH_SetDMAConfig+0x2e>
 80023d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7b5b      	ldrb	r3, [r3, #13]
 80023da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	7f52      	ldrb	r2, [r2, #29]
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d102      	bne.n	80023ec <ETH_SetDMAConfig+0x44>
 80023e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023ea:	e000      	b.n	80023ee <ETH_SetDMAConfig+0x46>
 80023ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	7b9b      	ldrb	r3, [r3, #14]
 80023f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7f1b      	ldrb	r3, [r3, #28]
 8002402:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002404:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	7f9b      	ldrb	r3, [r3, #30]
 800240a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800240c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002412:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800241c:	4313      	orrs	r3, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242c:	461a      	mov	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800243e:	2001      	movs	r0, #1
 8002440:	f7fe ffc2 	bl	80013c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244c:	461a      	mov	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800245c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002462:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002468:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002470:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002472:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800247a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002480:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800248a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800248e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800249c:	2001      	movs	r0, #1
 800249e:	f7fe ff93 	bl	80013c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	f8de3f23 	.word	0xf8de3f23

080024bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0a6      	sub	sp, #152	; 0x98
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024f8:	2300      	movs	r3, #0
 80024fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002502:	2300      	movs	r3, #0
 8002504:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800251e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002522:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002528:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002530:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fe86 	bl	8002248 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800253c:	2301      	movs	r3, #1
 800253e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002540:	2301      	movs	r3, #1
 8002542:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800254a:	2301      	movs	r3, #1
 800254c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800256c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002570:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002576:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff08 	bl	80023a8 <ETH_SetDMAConfig>
}
 8002598:	bf00      	nop
 800259a:	3798      	adds	r7, #152	; 0x98
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3305      	adds	r3, #5
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	3204      	adds	r2, #4
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <ETH_MACAddressConfig+0x68>)
 80025c2:	4413      	add	r3, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3303      	adds	r3, #3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	061a      	lsls	r2, r3, #24
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3302      	adds	r3, #2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3301      	adds	r3, #1
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <ETH_MACAddressConfig+0x6c>)
 80025f2:	4413      	add	r3, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40028040 	.word	0x40028040
 800260c:	40028044 	.word	0x40028044

08002610 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e03e      	b.n	800269c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	3206      	adds	r2, #6
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d80c      	bhi.n	8002680 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	e004      	b.n	800268a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3301      	adds	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d9bd      	bls.n	800261e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b4:	611a      	str	r2, [r3, #16]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e046      	b.n	800275e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6919      	ldr	r1, [r3, #16]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2200      	movs	r2, #0
 80026ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800270c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002714:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	3212      	adds	r2, #18
 800272a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d80c      	bhi.n	800274e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6919      	ldr	r1, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	e004      	b.n	8002758 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d9b5      	bls.n	80026d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278e:	60da      	str	r2, [r3, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800279c:	b480      	push	{r7}
 800279e:	b08d      	sub	sp, #52	; 0x34
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3318      	adds	r3, #24
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027de:	d007      	beq.n	80027f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	3304      	adds	r3, #4
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027f0:	2302      	movs	r3, #2
 80027f2:	e103      	b.n	80029fc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	3301      	adds	r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800280c:	f023 031f 	bic.w	r3, r3, #31
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	6852      	ldr	r2, [r2, #4]
 8002814:	431a      	orrs	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	431a      	orrs	r2, r3
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800287a:	f3bf 8f5f 	dmb	sy
}
 800287e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800288c:	e084      	b.n	8002998 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e005      	b.n	80028ba <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	3301      	adds	r3, #1
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d902      	bls.n	80028cc <ETH_Prepare_Tx_Descriptors+0x130>
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	3b04      	subs	r3, #4
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ee:	d007      	beq.n	8002900 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	3304      	adds	r3, #4
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d029      	beq.n	8002954 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	e019      	b.n	8002948 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002914:	f3bf 8f5f 	dmb	sy
}
 8002918:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	3301      	adds	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	2b03      	cmp	r3, #3
 8002930:	d902      	bls.n	8002938 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	3b04      	subs	r3, #4
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	3301      	adds	r3, #1
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	429a      	cmp	r2, r3
 800294e:	d3e1      	bcc.n	8002914 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	e053      	b.n	80029fc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002972:	f023 031f 	bic.w	r3, r3, #31
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	6852      	ldr	r2, [r2, #4]
 800297a:	431a      	orrs	r2, r3
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	3301      	adds	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002986:	f3bf 8f5f 	dmb	sy
}
 800298a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f af76 	bne.w	800288e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e005      	b.n	80029c2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d2:	6979      	ldr	r1, [r7, #20]
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	3304      	adds	r3, #4
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	4413      	add	r3, r2
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80029f6:	b662      	cpsie	i
}
 80029f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3734      	adds	r7, #52	; 0x34
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e177      	b.n	8002d14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 8166 	bne.w	8002d0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d005      	beq.n	8002a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80c0 	beq.w	8002d0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002baa:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <HAL_GPIO_Init+0x328>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	220f      	movs	r2, #15
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_GPIO_Init+0x32c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d037      	beq.n	8002c46 <HAL_GPIO_Init+0x23e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_GPIO_Init+0x330>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d031      	beq.n	8002c42 <HAL_GPIO_Init+0x23a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_GPIO_Init+0x334>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x236>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_GPIO_Init+0x338>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x232>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_GPIO_Init+0x33c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x22e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a53      	ldr	r2, [pc, #332]	; (8002d48 <HAL_GPIO_Init+0x340>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x22a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_GPIO_Init+0x344>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x226>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a51      	ldr	r2, [pc, #324]	; (8002d50 <HAL_GPIO_Init+0x348>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x222>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a50      	ldr	r2, [pc, #320]	; (8002d54 <HAL_GPIO_Init+0x34c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x21e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x21a>
 8002c1e:	2309      	movs	r3, #9
 8002c20:	e012      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c22:	230a      	movs	r3, #10
 8002c24:	e010      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c26:	2308      	movs	r3, #8
 8002c28:	e00e      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x328>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae84 	bls.w	8002a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40022400 	.word	0x40022400
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_PWREx_EnableOverDrive+0x94>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc0:	f7fe faf6 	bl	80013b0 <HAL_GetTick>
 8002dc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dc6:	e009      	b.n	8002ddc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dc8:	f7fe faf2 	bl	80013b0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd6:	d901      	bls.n	8002ddc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e01f      	b.n	8002e1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df0:	f7fe fade 	bl	80013b0 <HAL_GetTick>
 8002df4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002df6:	e009      	b.n	8002e0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df8:	f7fe fada 	bl	80013b0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e06:	d901      	bls.n	8002e0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e007      	b.n	8002e1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e0c:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e18:	d1ee      	bne.n	8002df8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	420e0040 	.word	0x420e0040
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	420e0044 	.word	0x420e0044

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e267      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b82      	ldr	r3, [pc, #520]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e242      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6c      	ldr	r2, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b69      	ldr	r3, [pc, #420]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fa60 	bl	80013b0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fa5c 	bl	80013b0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e207      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fa4c 	bl	80013b0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fa48 	bl	80013b0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1f3      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b51      	ldr	r3, [pc, #324]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c7      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b34      	ldr	r3, [pc, #208]	; (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fa01 	bl	80013b0 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe f9fd 	bl	80013b0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a8      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4925      	ldr	r1, [pc, #148]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f9e0 	bl	80013b0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe f9dc 	bl	80013b0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e187      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d036      	beq.n	800308c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x248>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe f9c0 	bl	80013b0 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe f9bc 	bl	80013b0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e167      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
 8003052:	e01b      	b.n	800308c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x248>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe f9a9 	bl	80013b0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe f9a5 	bl	80013b0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d907      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e150      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	42470000 	.word	0x42470000
 800307c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ea      	bne.n	8003062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	4b7d      	ldr	r3, [pc, #500]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a7c      	ldr	r2, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b7a      	ldr	r3, [pc, #488]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b77      	ldr	r3, [pc, #476]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b74      	ldr	r3, [pc, #464]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a73      	ldr	r2, [pc, #460]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fe f965 	bl	80013b0 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe f961 	bl	80013b0 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e10c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x2ea>
 8003110:	4b64      	ldr	r3, [pc, #400]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a63      	ldr	r2, [pc, #396]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x30c>
 8003126:	4b5f      	ldr	r3, [pc, #380]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a5e      	ldr	r2, [pc, #376]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a5b      	ldr	r2, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 8003140:	4b58      	ldr	r3, [pc, #352]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a57      	ldr	r2, [pc, #348]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe f926 	bl	80013b0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fe f922 	bl	80013b0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0cb      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ee      	beq.n	8003168 <HAL_RCC_OscConfig+0x334>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7fe f910 	bl	80013b0 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe f90c 	bl	80013b0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0b5      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	4a38      	ldr	r2, [pc, #224]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a1 	beq.w	8003314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d05c      	beq.n	8003298 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d141      	bne.n	800326a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe f8e0 	bl	80013b0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe f8dc 	bl	80013b0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e087      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x478>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe f8b5 	bl	80013b0 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe f8b1 	bl	80013b0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e05c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x416>
 8003268:	e054      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe f89e 	bl	80013b0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe f89a 	bl	80013b0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e045      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e038      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x4ec>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d028      	beq.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d111      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fd ffcc 	bl	80013b0 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fd ffc8 	bl	80013b0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd ff2c 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08013274 	.word	0x08013274
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b094      	sub	sp, #80	; 0x50
 80034f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	647b      	str	r3, [r7, #68]	; 0x44
 80034fc:	2300      	movs	r3, #0
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	2300      	movs	r3, #0
 8003502:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x40>
 8003514:	2b08      	cmp	r3, #8
 8003516:	f200 80e1 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x34>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x3a>
 8003522:	e0db      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b73      	ldr	r3, [pc, #460]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003528:	e0db      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800352e:	e0d8      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b6f      	ldr	r3, [pc, #444]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353a:	4b6d      	ldr	r3, [pc, #436]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4621      	mov	r1, r4
 800357c:	1a51      	subs	r1, r2, r1
 800357e:	6139      	str	r1, [r7, #16]
 8003580:	4629      	mov	r1, r5
 8003582:	eb63 0301 	sbc.w	r3, r3, r1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003594:	4659      	mov	r1, fp
 8003596:	018b      	lsls	r3, r1, #6
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800359e:	4651      	mov	r1, sl
 80035a0:	018a      	lsls	r2, r1, #6
 80035a2:	4651      	mov	r1, sl
 80035a4:	ebb2 0801 	subs.w	r8, r2, r1
 80035a8:	4659      	mov	r1, fp
 80035aa:	eb63 0901 	sbc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	462b      	mov	r3, r5
 80035d0:	eb49 0303 	adc.w	r3, r9, r3
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035e2:	4629      	mov	r1, r5
 80035e4:	024b      	lsls	r3, r1, #9
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ec:	4621      	mov	r1, r4
 80035ee:	024a      	lsls	r2, r1, #9
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	2200      	movs	r2, #0
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003600:	f7fc fe46 	bl	8000290 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800360c:	e058      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	2200      	movs	r2, #0
 8003616:	4618      	mov	r0, r3
 8003618:	4611      	mov	r1, r2
 800361a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	f04f 0000 	mov.w	r0, #0
 8003630:	f04f 0100 	mov.w	r1, #0
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363a:	0150      	lsls	r0, r2, #5
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4641      	mov	r1, r8
 8003642:	ebb2 0a01 	subs.w	sl, r2, r1
 8003646:	4649      	mov	r1, r9
 8003648:	eb63 0b01 	sbc.w	fp, r3, r1
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800365c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003660:	ebb2 040a 	subs.w	r4, r2, sl
 8003664:	eb63 050b 	sbc.w	r5, r3, fp
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	464b      	mov	r3, r9
 8003684:	eb45 0303 	adc.w	r3, r5, r3
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036aa:	2200      	movs	r2, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	61fa      	str	r2, [r7, #28]
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	f7fc fdec 	bl	8000290 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3750      	adds	r7, #80	; 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e041      	b.n	80037aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd f916 	bl	800096c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f000 fa96 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04e      	b.n	800386a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_TIM_Base_Start_IT+0xc4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d01d      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <HAL_TIM_Base_Start_IT+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_TIM_Base_Start_IT+0xcc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_TIM_Base_Start_IT+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_TIM_Base_Start_IT+0xd4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_TIM_Base_Start_IT+0xd8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_TIM_Base_Start_IT+0xdc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d111      	bne.n	8003858 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b06      	cmp	r3, #6
 8003844:	d010      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003856:	e007      	b.n	8003868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40001800 	.word	0x40001800

08003894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0202 	mvn.w	r2, #2
 80038c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9b5 	bl	8003c46 <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9a7 	bl	8003c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9b8 	bl	8003c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0204 	mvn.w	r2, #4
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f98b 	bl	8003c46 <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f97d 	bl	8003c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f98e 	bl	8003c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d122      	bne.n	8003998 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0208 	mvn.w	r2, #8
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2204      	movs	r2, #4
 800396e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f961 	bl	8003c46 <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f953 	bl	8003c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f964 	bl	8003c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0210 	mvn.w	r2, #16
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2208      	movs	r2, #8
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f937 	bl	8003c46 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f929 	bl	8003c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f93a 	bl	8003c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0201 	mvn.w	r2, #1
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f8ec 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d10e      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fae0 	bl	8004004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8ff 	bl	8003c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0220 	mvn.w	r2, #32
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 faaa 	bl	8003ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0b4      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x186>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af8:	d03e      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0xd4>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	f200 8087 	bhi.w	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	f000 8086 	beq.w	8003c16 <HAL_TIM_ConfigClockSource+0x172>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d87f      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d01a      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0xa6>
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d87b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b60      	cmp	r3, #96	; 0x60
 8003b1a:	d050      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x11a>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d877      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b50      	cmp	r3, #80	; 0x50
 8003b22:	d03c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xfa>
 8003b24:	2b50      	cmp	r3, #80	; 0x50
 8003b26:	d873      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d058      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x13a>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d86f      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d064      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d86b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d060      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d867      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d05c      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d05a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15a>
 8003b48:	e062      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 f9ad 	bl	8003eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	609a      	str	r2, [r3, #8]
      break;
 8003b76:	e04f      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 f996 	bl	8003eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e03c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 f90a 	bl	8003dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2150      	movs	r1, #80	; 0x50
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f963 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e02c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f000 f929 	bl	8003e22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2160      	movs	r1, #96	; 0x60
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f953 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e01c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 f8ea 	bl	8003dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f943 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e00c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f000 f93a 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e003      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e000      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a40      	ldr	r2, [pc, #256]	; (8003d98 <TIM_Base_SetConfig+0x114>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d00f      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3d      	ldr	r2, [pc, #244]	; (8003d9c <TIM_Base_SetConfig+0x118>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <TIM_Base_SetConfig+0x11c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3b      	ldr	r2, [pc, #236]	; (8003da4 <TIM_Base_SetConfig+0x120>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3a      	ldr	r2, [pc, #232]	; (8003da8 <TIM_Base_SetConfig+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d108      	bne.n	8003cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <TIM_Base_SetConfig+0x114>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d02b      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d027      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <TIM_Base_SetConfig+0x118>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d023      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <TIM_Base_SetConfig+0x11c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01f      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <TIM_Base_SetConfig+0x120>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01b      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <TIM_Base_SetConfig+0x124>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d017      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a28      	ldr	r2, [pc, #160]	; (8003dac <TIM_Base_SetConfig+0x128>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a27      	ldr	r2, [pc, #156]	; (8003db0 <TIM_Base_SetConfig+0x12c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00f      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <TIM_Base_SetConfig+0x130>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a25      	ldr	r2, [pc, #148]	; (8003db8 <TIM_Base_SetConfig+0x134>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a24      	ldr	r2, [pc, #144]	; (8003dbc <TIM_Base_SetConfig+0x138>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <TIM_Base_SetConfig+0x13c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d108      	bne.n	8003d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <TIM_Base_SetConfig+0x114>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_Base_SetConfig+0xf8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <TIM_Base_SetConfig+0x124>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d103      	bne.n	8003d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	615a      	str	r2, [r3, #20]
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800
 8003da4:	40000c00 	.word	0x40000c00
 8003da8:	40010400 	.word	0x40010400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800
 8003db8:	40001800 	.word	0x40001800
 8003dbc:	40001c00 	.word	0x40001c00
 8003dc0:	40002000 	.word	0x40002000

08003dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f023 0201 	bic.w	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 030a 	bic.w	r3, r3, #10
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0210 	bic.w	r2, r3, #16
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	031b      	lsls	r3, r3, #12
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f043 0307 	orr.w	r3, r3, #7
 8003ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e05a      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800401e:	4b8d      	ldr	r3, [pc, #564]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004020:	22c0      	movs	r2, #192	; 0xc0
 8004022:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004024:	4b8b      	ldr	r3, [pc, #556]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004026:	22a8      	movs	r2, #168	; 0xa8
 8004028:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800402a:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <MX_LWIP_Init+0x23c>)
 800402c:	2200      	movs	r2, #0
 800402e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004030:	4b88      	ldr	r3, [pc, #544]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004032:	226f      	movs	r2, #111	; 0x6f
 8004034:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004036:	4b88      	ldr	r3, [pc, #544]	; (8004258 <MX_LWIP_Init+0x240>)
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800403c:	4b86      	ldr	r3, [pc, #536]	; (8004258 <MX_LWIP_Init+0x240>)
 800403e:	22ff      	movs	r2, #255	; 0xff
 8004040:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004042:	4b85      	ldr	r3, [pc, #532]	; (8004258 <MX_LWIP_Init+0x240>)
 8004044:	22ff      	movs	r2, #255	; 0xff
 8004046:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004048:	4b83      	ldr	r3, [pc, #524]	; (8004258 <MX_LWIP_Init+0x240>)
 800404a:	2200      	movs	r2, #0
 800404c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800404e:	4b83      	ldr	r3, [pc, #524]	; (800425c <MX_LWIP_Init+0x244>)
 8004050:	22c0      	movs	r2, #192	; 0xc0
 8004052:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004054:	4b81      	ldr	r3, [pc, #516]	; (800425c <MX_LWIP_Init+0x244>)
 8004056:	22a8      	movs	r2, #168	; 0xa8
 8004058:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800405a:	4b80      	ldr	r3, [pc, #512]	; (800425c <MX_LWIP_Init+0x244>)
 800405c:	2200      	movs	r2, #0
 800405e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004060:	4b7e      	ldr	r3, [pc, #504]	; (800425c <MX_LWIP_Init+0x244>)
 8004062:	2201      	movs	r2, #1
 8004064:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004066:	f000 fcfd 	bl	8004a64 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800406a:	4b7a      	ldr	r3, [pc, #488]	; (8004254 <MX_LWIP_Init+0x23c>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	061a      	lsls	r2, r3, #24
 8004070:	4b78      	ldr	r3, [pc, #480]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	4b76      	ldr	r3, [pc, #472]	; (8004254 <MX_LWIP_Init+0x23c>)
 800407a:	789b      	ldrb	r3, [r3, #2]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	4313      	orrs	r3, r2
 8004080:	4a74      	ldr	r2, [pc, #464]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004082:	78d2      	ldrb	r2, [r2, #3]
 8004084:	4313      	orrs	r3, r2
 8004086:	061a      	lsls	r2, r3, #24
 8004088:	4b72      	ldr	r3, [pc, #456]	; (8004254 <MX_LWIP_Init+0x23c>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	0619      	lsls	r1, r3, #24
 800408e:	4b71      	ldr	r3, [pc, #452]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	4319      	orrs	r1, r3
 8004096:	4b6f      	ldr	r3, [pc, #444]	; (8004254 <MX_LWIP_Init+0x23c>)
 8004098:	789b      	ldrb	r3, [r3, #2]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	430b      	orrs	r3, r1
 800409e:	496d      	ldr	r1, [pc, #436]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040a0:	78c9      	ldrb	r1, [r1, #3]
 80040a2:	430b      	orrs	r3, r1
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040aa:	431a      	orrs	r2, r3
 80040ac:	4b69      	ldr	r3, [pc, #420]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	0619      	lsls	r1, r3, #24
 80040b2:	4b68      	ldr	r3, [pc, #416]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	4319      	orrs	r1, r3
 80040ba:	4b66      	ldr	r3, [pc, #408]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	430b      	orrs	r3, r1
 80040c2:	4964      	ldr	r1, [pc, #400]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040c4:	78c9      	ldrb	r1, [r1, #3]
 80040c6:	430b      	orrs	r3, r1
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040ce:	431a      	orrs	r2, r3
 80040d0:	4b60      	ldr	r3, [pc, #384]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	0619      	lsls	r1, r3, #24
 80040d6:	4b5f      	ldr	r3, [pc, #380]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	4319      	orrs	r1, r3
 80040de:	4b5d      	ldr	r3, [pc, #372]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040e0:	789b      	ldrb	r3, [r3, #2]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	430b      	orrs	r3, r1
 80040e6:	495b      	ldr	r1, [pc, #364]	; (8004254 <MX_LWIP_Init+0x23c>)
 80040e8:	78c9      	ldrb	r1, [r1, #3]
 80040ea:	430b      	orrs	r3, r1
 80040ec:	0e1b      	lsrs	r3, r3, #24
 80040ee:	4313      	orrs	r3, r2
 80040f0:	4a5b      	ldr	r2, [pc, #364]	; (8004260 <MX_LWIP_Init+0x248>)
 80040f2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <MX_LWIP_Init+0x240>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	061a      	lsls	r2, r3, #24
 80040fa:	4b57      	ldr	r3, [pc, #348]	; (8004258 <MX_LWIP_Init+0x240>)
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	4b55      	ldr	r3, [pc, #340]	; (8004258 <MX_LWIP_Init+0x240>)
 8004104:	789b      	ldrb	r3, [r3, #2]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	4313      	orrs	r3, r2
 800410a:	4a53      	ldr	r2, [pc, #332]	; (8004258 <MX_LWIP_Init+0x240>)
 800410c:	78d2      	ldrb	r2, [r2, #3]
 800410e:	4313      	orrs	r3, r2
 8004110:	061a      	lsls	r2, r3, #24
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <MX_LWIP_Init+0x240>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	0619      	lsls	r1, r3, #24
 8004118:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <MX_LWIP_Init+0x240>)
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	4319      	orrs	r1, r3
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <MX_LWIP_Init+0x240>)
 8004122:	789b      	ldrb	r3, [r3, #2]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	430b      	orrs	r3, r1
 8004128:	494b      	ldr	r1, [pc, #300]	; (8004258 <MX_LWIP_Init+0x240>)
 800412a:	78c9      	ldrb	r1, [r1, #3]
 800412c:	430b      	orrs	r3, r1
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004134:	431a      	orrs	r2, r3
 8004136:	4b48      	ldr	r3, [pc, #288]	; (8004258 <MX_LWIP_Init+0x240>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	0619      	lsls	r1, r3, #24
 800413c:	4b46      	ldr	r3, [pc, #280]	; (8004258 <MX_LWIP_Init+0x240>)
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	4319      	orrs	r1, r3
 8004144:	4b44      	ldr	r3, [pc, #272]	; (8004258 <MX_LWIP_Init+0x240>)
 8004146:	789b      	ldrb	r3, [r3, #2]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	430b      	orrs	r3, r1
 800414c:	4942      	ldr	r1, [pc, #264]	; (8004258 <MX_LWIP_Init+0x240>)
 800414e:	78c9      	ldrb	r1, [r1, #3]
 8004150:	430b      	orrs	r3, r1
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004158:	431a      	orrs	r2, r3
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <MX_LWIP_Init+0x240>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	0619      	lsls	r1, r3, #24
 8004160:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <MX_LWIP_Init+0x240>)
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	4319      	orrs	r1, r3
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <MX_LWIP_Init+0x240>)
 800416a:	789b      	ldrb	r3, [r3, #2]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	430b      	orrs	r3, r1
 8004170:	4939      	ldr	r1, [pc, #228]	; (8004258 <MX_LWIP_Init+0x240>)
 8004172:	78c9      	ldrb	r1, [r1, #3]
 8004174:	430b      	orrs	r3, r1
 8004176:	0e1b      	lsrs	r3, r3, #24
 8004178:	4313      	orrs	r3, r2
 800417a:	4a3a      	ldr	r2, [pc, #232]	; (8004264 <MX_LWIP_Init+0x24c>)
 800417c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <MX_LWIP_Init+0x244>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	061a      	lsls	r2, r3, #24
 8004184:	4b35      	ldr	r3, [pc, #212]	; (800425c <MX_LWIP_Init+0x244>)
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	431a      	orrs	r2, r3
 800418c:	4b33      	ldr	r3, [pc, #204]	; (800425c <MX_LWIP_Init+0x244>)
 800418e:	789b      	ldrb	r3, [r3, #2]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4313      	orrs	r3, r2
 8004194:	4a31      	ldr	r2, [pc, #196]	; (800425c <MX_LWIP_Init+0x244>)
 8004196:	78d2      	ldrb	r2, [r2, #3]
 8004198:	4313      	orrs	r3, r2
 800419a:	061a      	lsls	r2, r3, #24
 800419c:	4b2f      	ldr	r3, [pc, #188]	; (800425c <MX_LWIP_Init+0x244>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	0619      	lsls	r1, r3, #24
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <MX_LWIP_Init+0x244>)
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	4319      	orrs	r1, r3
 80041aa:	4b2c      	ldr	r3, [pc, #176]	; (800425c <MX_LWIP_Init+0x244>)
 80041ac:	789b      	ldrb	r3, [r3, #2]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	430b      	orrs	r3, r1
 80041b2:	492a      	ldr	r1, [pc, #168]	; (800425c <MX_LWIP_Init+0x244>)
 80041b4:	78c9      	ldrb	r1, [r1, #3]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041be:	431a      	orrs	r2, r3
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <MX_LWIP_Init+0x244>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	0619      	lsls	r1, r3, #24
 80041c6:	4b25      	ldr	r3, [pc, #148]	; (800425c <MX_LWIP_Init+0x244>)
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	4319      	orrs	r1, r3
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <MX_LWIP_Init+0x244>)
 80041d0:	789b      	ldrb	r3, [r3, #2]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	430b      	orrs	r3, r1
 80041d6:	4921      	ldr	r1, [pc, #132]	; (800425c <MX_LWIP_Init+0x244>)
 80041d8:	78c9      	ldrb	r1, [r1, #3]
 80041da:	430b      	orrs	r3, r1
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041e2:	431a      	orrs	r2, r3
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <MX_LWIP_Init+0x244>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	0619      	lsls	r1, r3, #24
 80041ea:	4b1c      	ldr	r3, [pc, #112]	; (800425c <MX_LWIP_Init+0x244>)
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	4319      	orrs	r1, r3
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <MX_LWIP_Init+0x244>)
 80041f4:	789b      	ldrb	r3, [r3, #2]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	430b      	orrs	r3, r1
 80041fa:	4918      	ldr	r1, [pc, #96]	; (800425c <MX_LWIP_Init+0x244>)
 80041fc:	78c9      	ldrb	r1, [r1, #3]
 80041fe:	430b      	orrs	r3, r1
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	4313      	orrs	r3, r2
 8004204:	4a18      	ldr	r2, [pc, #96]	; (8004268 <MX_LWIP_Init+0x250>)
 8004206:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <MX_LWIP_Init+0x254>)
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <MX_LWIP_Init+0x258>)
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <MX_LWIP_Init+0x250>)
 8004216:	4a13      	ldr	r2, [pc, #76]	; (8004264 <MX_LWIP_Init+0x24c>)
 8004218:	4911      	ldr	r1, [pc, #68]	; (8004260 <MX_LWIP_Init+0x248>)
 800421a:	4816      	ldr	r0, [pc, #88]	; (8004274 <MX_LWIP_Init+0x25c>)
 800421c:	f001 f90e 	bl	800543c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004220:	4814      	ldr	r0, [pc, #80]	; (8004274 <MX_LWIP_Init+0x25c>)
 8004222:	f001 fabd 	bl	80057a0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <MX_LWIP_Init+0x25c>)
 8004228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004238:	480e      	ldr	r0, [pc, #56]	; (8004274 <MX_LWIP_Init+0x25c>)
 800423a:	f001 fac1 	bl	80057c0 <netif_set_up>
 800423e:	e002      	b.n	8004246 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004240:	480c      	ldr	r0, [pc, #48]	; (8004274 <MX_LWIP_Init+0x25c>)
 8004242:	f001 fb29 	bl	8005898 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004246:	490c      	ldr	r1, [pc, #48]	; (8004278 <MX_LWIP_Init+0x260>)
 8004248:	480a      	ldr	r0, [pc, #40]	; (8004274 <MX_LWIP_Init+0x25c>)
 800424a:	f001 fbbb 	bl	80059c4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000148 	.word	0x20000148
 8004258:	2000014c 	.word	0x2000014c
 800425c:	20000150 	.word	0x20000150
 8004260:	2000013c 	.word	0x2000013c
 8004264:	20000140 	.word	0x20000140
 8004268:	20000144 	.word	0x20000144
 800426c:	0800f191 	.word	0x0800f191
 8004270:	08004539 	.word	0x08004539
 8004274:	20000108 	.word	0x20000108
 8004278:	0800427d 	.word	0x0800427d

0800427c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800429c:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <low_level_init+0x110>)
 800429e:	4a41      	ldr	r2, [pc, #260]	; (80043a4 <low_level_init+0x114>)
 80042a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80042a2:	2300      	movs	r3, #0
 80042a4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80042aa:	23e1      	movs	r3, #225	; 0xe1
 80042ac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80042ae:	2300      	movs	r3, #0
 80042b0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80042b2:	2300      	movs	r3, #0
 80042b4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80042b6:	2300      	movs	r3, #0
 80042b8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80042ba:	4a39      	ldr	r2, [pc, #228]	; (80043a0 <low_level_init+0x110>)
 80042bc:	f107 0308 	add.w	r3, r7, #8
 80042c0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <low_level_init+0x110>)
 80042c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80042c8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80042ca:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <low_level_init+0x110>)
 80042cc:	4a36      	ldr	r2, [pc, #216]	; (80043a8 <low_level_init+0x118>)
 80042ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <low_level_init+0x110>)
 80042d2:	4a36      	ldr	r2, [pc, #216]	; (80043ac <low_level_init+0x11c>)
 80042d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80042d6:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <low_level_init+0x110>)
 80042d8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80042dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80042de:	4830      	ldr	r0, [pc, #192]	; (80043a0 <low_level_init+0x110>)
 80042e0:	f7fd f9a8 	bl	8001634 <HAL_ETH_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80042e8:	2238      	movs	r2, #56	; 0x38
 80042ea:	2100      	movs	r1, #0
 80042ec:	4830      	ldr	r0, [pc, #192]	; (80043b0 <low_level_init+0x120>)
 80042ee:	f00b f881 	bl	800f3f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <low_level_init+0x120>)
 80042f4:	2221      	movs	r2, #33	; 0x21
 80042f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <low_level_init+0x120>)
 80042fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80042fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004300:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <low_level_init+0x120>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004306:	482b      	ldr	r0, [pc, #172]	; (80043b4 <low_level_init+0x124>)
 8004308:	f000 ff60 	bl	80051cc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2206      	movs	r2, #6
 8004310:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <low_level_init+0x110>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004320:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <low_level_init+0x110>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	785a      	ldrb	r2, [r3, #1]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <low_level_init+0x110>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	789a      	ldrb	r2, [r3, #2]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <low_level_init+0x110>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	78da      	ldrb	r2, [r3, #3]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <low_level_init+0x110>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	791a      	ldrb	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <low_level_init+0x110>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	795a      	ldrb	r2, [r3, #5]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004362:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800436a:	f043 030a 	orr.w	r3, r3, #10
 800436e:	b2da      	uxtb	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004376:	4910      	ldr	r1, [pc, #64]	; (80043b8 <low_level_init+0x128>)
 8004378:	4810      	ldr	r0, [pc, #64]	; (80043bc <low_level_init+0x12c>)
 800437a:	f7fc fe52 	bl	8001022 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800437e:	480f      	ldr	r0, [pc, #60]	; (80043bc <low_level_init+0x12c>)
 8004380:	f7fc fe81 	bl	8001086 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa40 	bl	8004810 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004390:	e001      	b.n	8004396 <low_level_init+0x106>
    Error_Handler();
 8004392:	f7fc fabd 	bl	8000910 <Error_Handler>
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20004c20 	.word	0x20004c20
 80043a4:	40028000 	.word	0x40028000
 80043a8:	20004b80 	.word	0x20004b80
 80043ac:	20004ae0 	.word	0x20004ae0
 80043b0:	20004cd0 	.word	0x20004cd0
 80043b4:	08013284 	.word	0x08013284
 80043b8:	2000000c 	.word	0x2000000c
 80043bc:	20004d08 	.word	0x20004d08

080043c0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b092      	sub	sp, #72	; 0x48
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80043d8:	f107 030c 	add.w	r3, r7, #12
 80043dc:	2230      	movs	r2, #48	; 0x30
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f00b f807 	bl	800f3f4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	2230      	movs	r2, #48	; 0x30
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f00b f800 	bl	800f3f4 <memset>

  for(q = p; q != NULL; q = q->next)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
 80043f8:	e045      	b.n	8004486 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80043fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d902      	bls.n	8004406 <low_level_output+0x46>
      return ERR_IF;
 8004400:	f06f 030b 	mvn.w	r3, #11
 8004404:	e055      	b.n	80044b2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	3348      	adds	r3, #72	; 0x48
 8004416:	443b      	add	r3, r7
 8004418:	3b3c      	subs	r3, #60	; 0x3c
 800441a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	895b      	ldrh	r3, [r3, #10]
 8004420:	4619      	mov	r1, r3
 8004422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3348      	adds	r3, #72	; 0x48
 800442e:	443b      	add	r3, r7
 8004430:	3b38      	subs	r3, #56	; 0x38
 8004432:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800443a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443c:	1e5a      	subs	r2, r3, #1
 800443e:	f107 000c 	add.w	r0, r7, #12
 8004442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004444:	460b      	mov	r3, r1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	440b      	add	r3, r1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	18c1      	adds	r1, r0, r3
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3348      	adds	r3, #72	; 0x48
 8004458:	443b      	add	r3, r7
 800445a:	3b34      	subs	r3, #52	; 0x34
 800445c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3348      	adds	r3, #72	; 0x48
 8004472:	443b      	add	r3, r7
 8004474:	3b34      	subs	r3, #52	; 0x34
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
    }

    i++;
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	3301      	adds	r3, #1
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
 8004486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1b6      	bne.n	80043fa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	891b      	ldrh	r3, [r3, #8]
 8004490:	461a      	mov	r2, r3
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <low_level_output+0xfc>)
 8004494:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <low_level_output+0xfc>)
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <low_level_output+0xfc>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80044a4:	2214      	movs	r2, #20
 80044a6:	4905      	ldr	r1, [pc, #20]	; (80044bc <low_level_output+0xfc>)
 80044a8:	4805      	ldr	r0, [pc, #20]	; (80044c0 <low_level_output+0x100>)
 80044aa:	f7fd f9f9 	bl	80018a0 <HAL_ETH_Transmit>

  return errval;
 80044ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3748      	adds	r7, #72	; 0x48
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20004cd0 	.word	0x20004cd0
 80044c0:	20004c20 	.word	0x20004c20

080044c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <low_level_input+0x2c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4619      	mov	r1, r3
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <low_level_input+0x30>)
 80044e0:	f7fd fa72 	bl	80019c8 <HAL_ETH_ReadData>
  }

  return p;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20004adc 	.word	0x20004adc
 80044f4:	20004c20 	.word	0x20004c20

080044f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ffdd 	bl	80044c4 <low_level_input>
 800450a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	4798      	blx	r3
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f001 fdce 	bl	80060c4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ea      	bne.n	8004504 <ethernetif_input+0xc>
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <ethernetif_init+0x1c>
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <ethernetif_init+0x48>)
 8004548:	f240 126b 	movw	r2, #363	; 0x16b
 800454c:	490d      	ldr	r1, [pc, #52]	; (8004584 <ethernetif_init+0x4c>)
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <ethernetif_init+0x50>)
 8004550:	f00a ff58 	bl	800f404 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2273      	movs	r2, #115	; 0x73
 8004558:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2274      	movs	r2, #116	; 0x74
 8004560:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <ethernetif_init+0x54>)
 8004568:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a08      	ldr	r2, [pc, #32]	; (8004590 <ethernetif_init+0x58>)
 800456e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fe8d 	bl	8004290 <low_level_init>

  return ERR_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08010894 	.word	0x08010894
 8004584:	080108b0 	.word	0x080108b0
 8004588:	080108c0 	.word	0x080108c0
 800458c:	0800d529 	.word	0x0800d529
 8004590:	080043c1 	.word	0x080043c1

08004594 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80045a0:	68f9      	ldr	r1, [r7, #12]
 80045a2:	4807      	ldr	r0, [pc, #28]	; (80045c0 <pbuf_free_custom+0x2c>)
 80045a4:	f000 fef4 	bl	8005390 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <pbuf_free_custom+0x30>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <pbuf_free_custom+0x30>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
  }
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	08013284 	.word	0x08013284
 80045c4:	20004adc 	.word	0x20004adc

080045c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045cc:	f7fc fef0 	bl	80013b0 <HAL_GetTick>
 80045d0:	4603      	mov	r3, r0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a59      	ldr	r2, [pc, #356]	; (800475c <HAL_ETH_MspInit+0x184>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f040 80ac 	bne.w	8004754 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	4b57      	ldr	r3, [pc, #348]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	4a56      	ldr	r2, [pc, #344]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800460a:	6313      	str	r3, [r2, #48]	; 0x30
 800460c:	4b54      	ldr	r3, [pc, #336]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	4b50      	ldr	r3, [pc, #320]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4a4f      	ldr	r2, [pc, #316]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004626:	6313      	str	r3, [r2, #48]	; 0x30
 8004628:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	4b49      	ldr	r3, [pc, #292]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	4a48      	ldr	r2, [pc, #288]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800463e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004642:	6313      	str	r3, [r2, #48]	; 0x30
 8004644:	4b46      	ldr	r3, [pc, #280]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	4a41      	ldr	r2, [pc, #260]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800465a:	f043 0304 	orr.w	r3, r3, #4
 800465e:	6313      	str	r3, [r2, #48]	; 0x30
 8004660:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	4a3a      	ldr	r2, [pc, #232]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6313      	str	r3, [r2, #48]	; 0x30
 800467c:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a33      	ldr	r2, [pc, #204]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6313      	str	r3, [r2, #48]	; 0x30
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_ETH_MspInit+0x188>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <HAL_ETH_MspInit+0x188>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a2c      	ldr	r2, [pc, #176]	; (8004760 <HAL_ETH_MspInit+0x188>)
 80046ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b2:	6313      	str	r3, [r2, #48]	; 0x30
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_ETH_MspInit+0x188>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80046c0:	2332      	movs	r3, #50	; 0x32
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c4:	2302      	movs	r3, #2
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046cc:	2303      	movs	r3, #3
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046d0:	230b      	movs	r3, #11
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d8:	4619      	mov	r1, r3
 80046da:	4822      	ldr	r0, [pc, #136]	; (8004764 <HAL_ETH_MspInit+0x18c>)
 80046dc:	f7fe f994 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80046e0:	2386      	movs	r3, #134	; 0x86
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e4:	2302      	movs	r3, #2
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046f0:	230b      	movs	r3, #11
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f8:	4619      	mov	r1, r3
 80046fa:	481b      	ldr	r0, [pc, #108]	; (8004768 <HAL_ETH_MspInit+0x190>)
 80046fc:	f7fe f984 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470e:	2303      	movs	r3, #3
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004712:	230b      	movs	r3, #11
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800471a:	4619      	mov	r1, r3
 800471c:	4813      	ldr	r0, [pc, #76]	; (800476c <HAL_ETH_MspInit+0x194>)
 800471e:	f7fe f973 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004722:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004730:	2303      	movs	r3, #3
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004734:	230b      	movs	r3, #11
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473c:	4619      	mov	r1, r3
 800473e:	480c      	ldr	r0, [pc, #48]	; (8004770 <HAL_ETH_MspInit+0x198>)
 8004740:	f7fe f962 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	2100      	movs	r1, #0
 8004748:	203d      	movs	r0, #61	; 0x3d
 800474a:	f7fc ff3c 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800474e:	203d      	movs	r0, #61	; 0x3d
 8004750:	f7fc ff55 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004754:	bf00      	nop
 8004756:	3738      	adds	r7, #56	; 0x38
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40028000 	.word	0x40028000
 8004760:	40023800 	.word	0x40023800
 8004764:	40020800 	.word	0x40020800
 8004768:	40020000 	.word	0x40020000
 800476c:	40020400 	.word	0x40020400
 8004770:	40021800 	.word	0x40021800

08004774 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004778:	4802      	ldr	r0, [pc, #8]	; (8004784 <ETH_PHY_IO_Init+0x10>)
 800477a:	f7fd fce9 	bl	8002150 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20004c20 	.word	0x20004c20

08004788 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return 0;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	68f9      	ldr	r1, [r7, #12]
 80047aa:	4807      	ldr	r0, [pc, #28]	; (80047c8 <ETH_PHY_IO_ReadReg+0x30>)
 80047ac:	f7fd fb38 	bl	8001e20 <HAL_ETH_ReadPHYRegister>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e000      	b.n	80047be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20004c20 	.word	0x20004c20

080047cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	4807      	ldr	r0, [pc, #28]	; (80047fc <ETH_PHY_IO_WriteReg+0x30>)
 80047e0:	f7fd fb69 	bl	8001eb6 <HAL_ETH_WritePHYRegister>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	e000      	b.n	80047f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20004c20 	.word	0x20004c20

08004800 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004804:	f7fc fdd4 	bl	80013b0 <HAL_GetTick>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b0a0      	sub	sp, #128	; 0x80
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	2264      	movs	r2, #100	; 0x64
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f00a fde7 	bl	800f3f4 <memset>
  int32_t PHYLinkState = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800482e:	2300      	movs	r3, #0
 8004830:	67bb      	str	r3, [r7, #120]	; 0x78
 8004832:	2300      	movs	r3, #0
 8004834:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004836:	483a      	ldr	r0, [pc, #232]	; (8004920 <ethernet_link_check_state+0x110>)
 8004838:	f7fc fccd 	bl	80011d6 <LAN8742_GetLinkState>
 800483c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <ethernet_link_check_state+0x5a>
 8004850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004852:	2b01      	cmp	r3, #1
 8004854:	dc09      	bgt.n	800486a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004856:	4833      	ldr	r0, [pc, #204]	; (8004924 <ethernet_link_check_state+0x114>)
 8004858:	f7fc ffc9 	bl	80017ee <HAL_ETH_Stop>
    netif_set_down(netif);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 f81b 	bl	8005898 <netif_set_down>
    netif_set_link_down(netif);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 f87e 	bl	8005964 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004868:	e055      	b.n	8004916 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d14e      	bne.n	8004916 <ethernet_link_check_state+0x106>
 8004878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800487a:	2b01      	cmp	r3, #1
 800487c:	dd4b      	ble.n	8004916 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800487e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004880:	3b02      	subs	r3, #2
 8004882:	2b03      	cmp	r3, #3
 8004884:	d82a      	bhi.n	80048dc <ethernet_link_check_state+0xcc>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <ethernet_link_check_state+0x7c>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048af 	.word	0x080048af
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048cf 	.word	0x080048cf
      duplex = ETH_FULLDUPLEX_MODE;
 800489c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048a8:	2301      	movs	r3, #1
 80048aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048ac:	e017      	b.n	80048de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048bc:	e00f      	b.n	80048de <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80048be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048c2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80048c4:	2300      	movs	r3, #0
 80048c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048c8:	2301      	movs	r3, #1
 80048ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048cc:	e007      	b.n	80048de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80048d2:	2300      	movs	r3, #0
 80048d4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048da:	e000      	b.n	80048de <ethernet_link_check_state+0xce>
      break;
 80048dc:	bf00      	nop
    if(linkchanged)
 80048de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d018      	beq.n	8004916 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	4619      	mov	r1, r3
 80048ea:	480e      	ldr	r0, [pc, #56]	; (8004924 <ethernet_link_check_state+0x114>)
 80048ec:	f7fd fb2c 	bl	8001f48 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80048f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80048f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4619      	mov	r1, r3
 80048fe:	4809      	ldr	r0, [pc, #36]	; (8004924 <ethernet_link_check_state+0x114>)
 8004900:	f7fd fc0c 	bl	800211c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004904:	4807      	ldr	r0, [pc, #28]	; (8004924 <ethernet_link_check_state+0x114>)
 8004906:	f7fc ff13 	bl	8001730 <HAL_ETH_Start>
      netif_set_up(netif);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 ff58 	bl	80057c0 <netif_set_up>
      netif_set_link_up(netif);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fff3 	bl	80058fc <netif_set_link_up>
}
 8004916:	bf00      	nop
 8004918:	3780      	adds	r7, #128	; 0x80
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20004d08 	.word	0x20004d08
 8004924:	20004c20 	.word	0x20004c20

08004928 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af02      	add	r7, sp, #8
 800492e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004930:	4812      	ldr	r0, [pc, #72]	; (800497c <HAL_ETH_RxAllocateCallback+0x54>)
 8004932:	f000 fcbf 	bl	80052b4 <memp_malloc_pool>
 8004936:	60f8      	str	r0, [r7, #12]
  if (p)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f103 0220 	add.w	r2, r3, #32
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a0d      	ldr	r2, [pc, #52]	; (8004980 <HAL_ETH_RxAllocateCallback+0x58>)
 800494c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004956:	9201      	str	r2, [sp, #4]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2241      	movs	r2, #65	; 0x41
 800495e:	2100      	movs	r1, #0
 8004960:	2000      	movs	r0, #0
 8004962:	f001 f9f5 	bl	8005d50 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004966:	e005      	b.n	8004974 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_ETH_RxAllocateCallback+0x5c>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08013284 	.word	0x08013284
 8004980:	08004595 	.word	0x08004595
 8004984:	20004adc 	.word	0x20004adc

08004988 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3b20      	subs	r3, #32
 80049a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2200      	movs	r2, #0
 80049b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e003      	b.n	80049d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	e009      	b.n	80049f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	891a      	ldrh	r2, [r3, #8]
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	4413      	add	r3, r2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f2      	bne.n	80049e0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	3724      	adds	r7, #36	; 0x24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	b21a      	sxth	r2, r3
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b21b      	sxth	r3, r3
 8004a24:	b29b      	uxth	r3, r3
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	061a      	lsls	r2, r3, #24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	4313      	orrs	r3, r2
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004a6e:	f000 f8d5 	bl	8004c1c <mem_init>
  memp_init();
 8004a72:	f000 fbdb 	bl	800522c <memp_init>
  pbuf_init();
  netif_init();
 8004a76:	f000 fcd9 	bl	800542c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004a7a:	f007 ff4f 	bl	800c91c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004a7e:	f001 fe41 	bl	8006704 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004a82:	f007 fec1 	bl	800c808 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <ptr_to_mem+0x20>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	4413      	add	r3, r2
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20007554 	.word	0x20007554

08004ab4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <mem_to_ptr+0x20>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	b29b      	uxth	r3, r3
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20007554 	.word	0x20007554

08004ad8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004ae0:	4b45      	ldr	r3, [pc, #276]	; (8004bf8 <plug_holes+0x120>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d206      	bcs.n	8004af8 <plug_holes+0x20>
 8004aea:	4b44      	ldr	r3, [pc, #272]	; (8004bfc <plug_holes+0x124>)
 8004aec:	f240 12df 	movw	r2, #479	; 0x1df
 8004af0:	4943      	ldr	r1, [pc, #268]	; (8004c00 <plug_holes+0x128>)
 8004af2:	4844      	ldr	r0, [pc, #272]	; (8004c04 <plug_holes+0x12c>)
 8004af4:	f00a fc86 	bl	800f404 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004af8:	4b43      	ldr	r3, [pc, #268]	; (8004c08 <plug_holes+0x130>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d306      	bcc.n	8004b10 <plug_holes+0x38>
 8004b02:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <plug_holes+0x124>)
 8004b04:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b08:	4940      	ldr	r1, [pc, #256]	; (8004c0c <plug_holes+0x134>)
 8004b0a:	483e      	ldr	r0, [pc, #248]	; (8004c04 <plug_holes+0x12c>)
 8004b0c:	f00a fc7a 	bl	800f404 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <plug_holes+0x4e>
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <plug_holes+0x124>)
 8004b1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004b1e:	493c      	ldr	r1, [pc, #240]	; (8004c10 <plug_holes+0x138>)
 8004b20:	4838      	ldr	r0, [pc, #224]	; (8004c04 <plug_holes+0x12c>)
 8004b22:	f00a fc6f 	bl	800f404 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b2e:	d906      	bls.n	8004b3e <plug_holes+0x66>
 8004b30:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <plug_holes+0x124>)
 8004b32:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004b36:	4937      	ldr	r1, [pc, #220]	; (8004c14 <plug_holes+0x13c>)
 8004b38:	4832      	ldr	r0, [pc, #200]	; (8004c04 <plug_holes+0x12c>)
 8004b3a:	f00a fc63 	bl	800f404 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ffa4 	bl	8004a90 <ptr_to_mem>
 8004b48:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d024      	beq.n	8004b9c <plug_holes+0xc4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	791b      	ldrb	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d120      	bne.n	8004b9c <plug_holes+0xc4>
 8004b5a:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <plug_holes+0x130>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d01b      	beq.n	8004b9c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b64:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <plug_holes+0x140>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d102      	bne.n	8004b74 <plug_holes+0x9c>
      lfree = mem;
 8004b6e:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <plug_holes+0x140>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b84:	d00a      	beq.n	8004b9c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff80 	bl	8004a90 <ptr_to_mem>
 8004b90:	4604      	mov	r4, r0
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff8e 	bl	8004ab4 <mem_to_ptr>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	885b      	ldrh	r3, [r3, #2]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff75 	bl	8004a90 <ptr_to_mem>
 8004ba6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d01f      	beq.n	8004bf0 <plug_holes+0x118>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11b      	bne.n	8004bf0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004bb8:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <plug_holes+0x140>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d102      	bne.n	8004bc8 <plug_holes+0xf0>
      lfree = pmem;
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <plug_holes+0x140>)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bd8:	d00a      	beq.n	8004bf0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff56 	bl	8004a90 <ptr_to_mem>
 8004be4:	4604      	mov	r4, r0
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7ff ff64 	bl	8004ab4 <mem_to_ptr>
 8004bec:	4603      	mov	r3, r0
 8004bee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}
 8004bf8:	20007554 	.word	0x20007554
 8004bfc:	080108e8 	.word	0x080108e8
 8004c00:	08010918 	.word	0x08010918
 8004c04:	08010930 	.word	0x08010930
 8004c08:	20007558 	.word	0x20007558
 8004c0c:	08010958 	.word	0x08010958
 8004c10:	08010974 	.word	0x08010974
 8004c14:	08010990 	.word	0x08010990
 8004c18:	2000755c 	.word	0x2000755c

08004c1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <mem_init+0x68>)
 8004c24:	3303      	adds	r3, #3
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <mem_init+0x6c>)
 8004c2e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <mem_init+0x6c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c3c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004c4a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004c4e:	f7ff ff1f 	bl	8004a90 <ptr_to_mem>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <mem_init+0x70>)
 8004c56:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <mem_init+0x70>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <mem_init+0x70>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c68:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <mem_init+0x70>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c72:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <mem_init+0x6c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a05      	ldr	r2, [pc, #20]	; (8004c90 <mem_init+0x74>)
 8004c7a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20004d40 	.word	0x20004d40
 8004c88:	20007554 	.word	0x20007554
 8004c8c:	20007558 	.word	0x20007558
 8004c90:	2000755c 	.word	0x2000755c

08004c94 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ff09 	bl	8004ab4 <mem_to_ptr>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fef0 	bl	8004a90 <ptr_to_mem>
 8004cb0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	885b      	ldrh	r3, [r3, #2]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff feea 	bl	8004a90 <ptr_to_mem>
 8004cbc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004cc6:	d818      	bhi.n	8004cfa <mem_link_valid+0x66>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	885b      	ldrh	r3, [r3, #2]
 8004ccc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004cd0:	d813      	bhi.n	8004cfa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004cd6:	8afa      	ldrh	r2, [r7, #22]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d004      	beq.n	8004ce6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	8afa      	ldrh	r2, [r7, #22]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d109      	bne.n	8004cfa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <mem_link_valid+0x74>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d006      	beq.n	8004cfe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	885b      	ldrh	r3, [r3, #2]
 8004cf4:	8afa      	ldrh	r2, [r7, #22]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <mem_link_valid+0x6a>
    return 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <mem_link_valid+0x6c>
  }
  return 1;
 8004cfe:	2301      	movs	r3, #1
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20007558 	.word	0x20007558

08004d0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d04c      	beq.n	8004db4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <mem_free+0xb0>)
 8004d26:	f240 2273 	movw	r2, #627	; 0x273
 8004d2a:	4925      	ldr	r1, [pc, #148]	; (8004dc0 <mem_free+0xb4>)
 8004d2c:	4825      	ldr	r0, [pc, #148]	; (8004dc4 <mem_free+0xb8>)
 8004d2e:	f00a fb69 	bl	800f404 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d32:	e040      	b.n	8004db6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b08      	subs	r3, #8
 8004d38:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <mem_free+0xbc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d306      	bcc.n	8004d52 <mem_free+0x46>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f103 020c 	add.w	r2, r3, #12
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <mem_free+0xc0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d907      	bls.n	8004d62 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004d52:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <mem_free+0xb0>)
 8004d54:	f240 227f 	movw	r2, #639	; 0x27f
 8004d58:	491d      	ldr	r1, [pc, #116]	; (8004dd0 <mem_free+0xc4>)
 8004d5a:	481a      	ldr	r0, [pc, #104]	; (8004dc4 <mem_free+0xb8>)
 8004d5c:	f00a fb52 	bl	800f404 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d60:	e029      	b.n	8004db6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	791b      	ldrb	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d107      	bne.n	8004d7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <mem_free+0xb0>)
 8004d6c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004d70:	4918      	ldr	r1, [pc, #96]	; (8004dd4 <mem_free+0xc8>)
 8004d72:	4814      	ldr	r0, [pc, #80]	; (8004dc4 <mem_free+0xb8>)
 8004d74:	f00a fb46 	bl	800f404 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d78:	e01d      	b.n	8004db6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff ff8a 	bl	8004c94 <mem_link_valid>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <mem_free+0xb0>)
 8004d88:	f240 2295 	movw	r2, #661	; 0x295
 8004d8c:	4912      	ldr	r1, [pc, #72]	; (8004dd8 <mem_free+0xcc>)
 8004d8e:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <mem_free+0xb8>)
 8004d90:	f00a fb38 	bl	800f404 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d94:	e00f      	b.n	8004db6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <mem_free+0xd0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d202      	bcs.n	8004dac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004da6:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <mem_free+0xd0>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fe93 	bl	8004ad8 <plug_holes>
 8004db2:	e000      	b.n	8004db6 <mem_free+0xaa>
    return;
 8004db4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	080108e8 	.word	0x080108e8
 8004dc0:	080109bc 	.word	0x080109bc
 8004dc4:	08010930 	.word	0x08010930
 8004dc8:	20007554 	.word	0x20007554
 8004dcc:	20007558 	.word	0x20007558
 8004dd0:	080109e0 	.word	0x080109e0
 8004dd4:	080109fc 	.word	0x080109fc
 8004dd8:	08010a24 	.word	0x08010a24
 8004ddc:	2000755c 	.word	0x2000755c

08004de0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	3303      	adds	r3, #3
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004df8:	8bfb      	ldrh	r3, [r7, #30]
 8004dfa:	2b0b      	cmp	r3, #11
 8004dfc:	d801      	bhi.n	8004e02 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004dfe:	230c      	movs	r3, #12
 8004e00:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004e02:	8bfb      	ldrh	r3, [r7, #30]
 8004e04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004e08:	d803      	bhi.n	8004e12 <mem_trim+0x32>
 8004e0a:	8bfa      	ldrh	r2, [r7, #30]
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d201      	bcs.n	8004e16 <mem_trim+0x36>
    return NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e0cc      	b.n	8004fb0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e16:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <mem_trim+0x1d8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d304      	bcc.n	8004e2a <mem_trim+0x4a>
 8004e20:	4b66      	ldr	r3, [pc, #408]	; (8004fbc <mem_trim+0x1dc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d306      	bcc.n	8004e38 <mem_trim+0x58>
 8004e2a:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <mem_trim+0x1e0>)
 8004e2c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004e30:	4964      	ldr	r1, [pc, #400]	; (8004fc4 <mem_trim+0x1e4>)
 8004e32:	4865      	ldr	r0, [pc, #404]	; (8004fc8 <mem_trim+0x1e8>)
 8004e34:	f00a fae6 	bl	800f404 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e38:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <mem_trim+0x1d8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d304      	bcc.n	8004e4c <mem_trim+0x6c>
 8004e42:	4b5e      	ldr	r3, [pc, #376]	; (8004fbc <mem_trim+0x1dc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d301      	bcc.n	8004e50 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	e0af      	b.n	8004fb0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b08      	subs	r3, #8
 8004e54:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004e56:	69b8      	ldr	r0, [r7, #24]
 8004e58:	f7ff fe2c 	bl	8004ab4 <mem_to_ptr>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	881a      	ldrh	r2, [r3, #0]
 8004e64:	8afb      	ldrh	r3, [r7, #22]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b08      	subs	r3, #8
 8004e6c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004e6e:	8bfa      	ldrh	r2, [r7, #30]
 8004e70:	8abb      	ldrh	r3, [r7, #20]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d906      	bls.n	8004e84 <mem_trim+0xa4>
 8004e76:	4b52      	ldr	r3, [pc, #328]	; (8004fc0 <mem_trim+0x1e0>)
 8004e78:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004e7c:	4953      	ldr	r1, [pc, #332]	; (8004fcc <mem_trim+0x1ec>)
 8004e7e:	4852      	ldr	r0, [pc, #328]	; (8004fc8 <mem_trim+0x1e8>)
 8004e80:	f00a fac0 	bl	800f404 <iprintf>
  if (newsize > size) {
 8004e84:	8bfa      	ldrh	r2, [r7, #30]
 8004e86:	8abb      	ldrh	r3, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d901      	bls.n	8004e90 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e08f      	b.n	8004fb0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004e90:	8bfa      	ldrh	r2, [r7, #30]
 8004e92:	8abb      	ldrh	r3, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d101      	bne.n	8004e9c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	e089      	b.n	8004fb0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fdf5 	bl	8004a90 <ptr_to_mem>
 8004ea6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	791b      	ldrb	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d13f      	bne.n	8004f30 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004eb8:	d106      	bne.n	8004ec8 <mem_trim+0xe8>
 8004eba:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <mem_trim+0x1e0>)
 8004ebc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004ec0:	4943      	ldr	r1, [pc, #268]	; (8004fd0 <mem_trim+0x1f0>)
 8004ec2:	4841      	ldr	r0, [pc, #260]	; (8004fc8 <mem_trim+0x1e8>)
 8004ec4:	f00a fa9e 	bl	800f404 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ece:	8afa      	ldrh	r2, [r7, #22]
 8004ed0:	8bfb      	ldrh	r3, [r7, #30]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <mem_trim+0x1f4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d106      	bne.n	8004ef2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004ee4:	89fb      	ldrh	r3, [r7, #14]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fdd2 	bl	8004a90 <ptr_to_mem>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a39      	ldr	r2, [pc, #228]	; (8004fd4 <mem_trim+0x1f4>)
 8004ef0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004ef2:	89fb      	ldrh	r3, [r7, #14]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fdcb 	bl	8004a90 <ptr_to_mem>
 8004efa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2200      	movs	r2, #0
 8004f00:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	89ba      	ldrh	r2, [r7, #12]
 8004f06:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	8afa      	ldrh	r2, [r7, #22]
 8004f0c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	89fa      	ldrh	r2, [r7, #14]
 8004f12:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f1c:	d047      	beq.n	8004fae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fdb4 	bl	8004a90 <ptr_to_mem>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	8053      	strh	r3, [r2, #2]
 8004f2e:	e03e      	b.n	8004fae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004f30:	8bfb      	ldrh	r3, [r7, #30]
 8004f32:	f103 0214 	add.w	r2, r3, #20
 8004f36:	8abb      	ldrh	r3, [r7, #20]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d838      	bhi.n	8004fae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f3c:	8afa      	ldrh	r2, [r7, #22]
 8004f3e:	8bfb      	ldrh	r3, [r7, #30]
 8004f40:	4413      	add	r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3308      	adds	r3, #8
 8004f46:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f50:	d106      	bne.n	8004f60 <mem_trim+0x180>
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <mem_trim+0x1e0>)
 8004f54:	f240 3216 	movw	r2, #790	; 0x316
 8004f58:	491d      	ldr	r1, [pc, #116]	; (8004fd0 <mem_trim+0x1f0>)
 8004f5a:	481b      	ldr	r0, [pc, #108]	; (8004fc8 <mem_trim+0x1e8>)
 8004f5c:	f00a fa52 	bl	800f404 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004f60:	89fb      	ldrh	r3, [r7, #14]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fd94 	bl	8004a90 <ptr_to_mem>
 8004f68:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <mem_trim+0x1f4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d202      	bcs.n	8004f7a <mem_trim+0x19a>
      lfree = mem2;
 8004f74:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <mem_trim+0x1f4>)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	881a      	ldrh	r2, [r3, #0]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	8afa      	ldrh	r2, [r7, #22]
 8004f8c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	89fa      	ldrh	r2, [r7, #14]
 8004f92:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f9c:	d007      	beq.n	8004fae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fd74 	bl	8004a90 <ptr_to_mem>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	89fb      	ldrh	r3, [r7, #14]
 8004fac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004fae:	687b      	ldr	r3, [r7, #4]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20007554 	.word	0x20007554
 8004fbc:	20007558 	.word	0x20007558
 8004fc0:	080108e8 	.word	0x080108e8
 8004fc4:	08010a58 	.word	0x08010a58
 8004fc8:	08010930 	.word	0x08010930
 8004fcc:	08010a70 	.word	0x08010a70
 8004fd0:	08010a90 	.word	0x08010a90
 8004fd4:	2000755c 	.word	0x2000755c

08004fd8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <mem_malloc+0x14>
    return NULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e0d9      	b.n	80051a0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	3303      	adds	r3, #3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004ff8:	8bbb      	ldrh	r3, [r7, #28]
 8004ffa:	2b0b      	cmp	r3, #11
 8004ffc:	d801      	bhi.n	8005002 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004ffe:	230c      	movs	r3, #12
 8005000:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005002:	8bbb      	ldrh	r3, [r7, #28]
 8005004:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005008:	d803      	bhi.n	8005012 <mem_malloc+0x3a>
 800500a:	8bba      	ldrh	r2, [r7, #28]
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	429a      	cmp	r2, r3
 8005010:	d201      	bcs.n	8005016 <mem_malloc+0x3e>
    return NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	e0c4      	b.n	80051a0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005016:	4b64      	ldr	r3, [pc, #400]	; (80051a8 <mem_malloc+0x1d0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fd4a 	bl	8004ab4 <mem_to_ptr>
 8005020:	4603      	mov	r3, r0
 8005022:	83fb      	strh	r3, [r7, #30]
 8005024:	e0b4      	b.n	8005190 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005026:	8bfb      	ldrh	r3, [r7, #30]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fd31 	bl	8004a90 <ptr_to_mem>
 800502e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	791b      	ldrb	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 80a4 	bne.w	8005182 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	8bfb      	ldrh	r3, [r7, #30]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f1a3 0208 	sub.w	r2, r3, #8
 8005048:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800504a:	429a      	cmp	r2, r3
 800504c:	f0c0 8099 	bcc.w	8005182 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	8bfb      	ldrh	r3, [r7, #30]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f1a3 0208 	sub.w	r2, r3, #8
 800505e:	8bbb      	ldrh	r3, [r7, #28]
 8005060:	3314      	adds	r3, #20
 8005062:	429a      	cmp	r2, r3
 8005064:	d333      	bcc.n	80050ce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005066:	8bfa      	ldrh	r2, [r7, #30]
 8005068:	8bbb      	ldrh	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	b29b      	uxth	r3, r3
 800506e:	3308      	adds	r3, #8
 8005070:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005072:	8a7b      	ldrh	r3, [r7, #18]
 8005074:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005078:	d106      	bne.n	8005088 <mem_malloc+0xb0>
 800507a:	4b4c      	ldr	r3, [pc, #304]	; (80051ac <mem_malloc+0x1d4>)
 800507c:	f240 3287 	movw	r2, #903	; 0x387
 8005080:	494b      	ldr	r1, [pc, #300]	; (80051b0 <mem_malloc+0x1d8>)
 8005082:	484c      	ldr	r0, [pc, #304]	; (80051b4 <mem_malloc+0x1dc>)
 8005084:	f00a f9be 	bl	800f404 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005088:	8a7b      	ldrh	r3, [r7, #18]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fd00 	bl	8004a90 <ptr_to_mem>
 8005090:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8bfa      	ldrh	r2, [r7, #30]
 80050a4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	8a7a      	ldrh	r2, [r7, #18]
 80050aa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2201      	movs	r2, #1
 80050b0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050ba:	d00b      	beq.n	80050d4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fce5 	bl	8004a90 <ptr_to_mem>
 80050c6:	4602      	mov	r2, r0
 80050c8:	8a7b      	ldrh	r3, [r7, #18]
 80050ca:	8053      	strh	r3, [r2, #2]
 80050cc:	e002      	b.n	80050d4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2201      	movs	r2, #1
 80050d2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80050d4:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <mem_malloc+0x1d0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d127      	bne.n	800512e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80050de:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <mem_malloc+0x1d0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80050e4:	e005      	b.n	80050f2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fcd0 	bl	8004a90 <ptr_to_mem>
 80050f0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	791b      	ldrb	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <mem_malloc+0x12c>
 80050fa:	4b2f      	ldr	r3, [pc, #188]	; (80051b8 <mem_malloc+0x1e0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	429a      	cmp	r2, r3
 8005102:	d1f0      	bne.n	80050e6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005104:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <mem_malloc+0x1d0>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <mem_malloc+0x1d0>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <mem_malloc+0x1e0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d00b      	beq.n	800512e <mem_malloc+0x156>
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <mem_malloc+0x1d0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d006      	beq.n	800512e <mem_malloc+0x156>
 8005120:	4b22      	ldr	r3, [pc, #136]	; (80051ac <mem_malloc+0x1d4>)
 8005122:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005126:	4925      	ldr	r1, [pc, #148]	; (80051bc <mem_malloc+0x1e4>)
 8005128:	4822      	ldr	r0, [pc, #136]	; (80051b4 <mem_malloc+0x1dc>)
 800512a:	f00a f96b 	bl	800f404 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800512e:	8bba      	ldrh	r2, [r7, #28]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	3308      	adds	r3, #8
 8005136:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <mem_malloc+0x1e0>)
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4293      	cmp	r3, r2
 800513c:	d906      	bls.n	800514c <mem_malloc+0x174>
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <mem_malloc+0x1d4>)
 8005140:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005144:	491e      	ldr	r1, [pc, #120]	; (80051c0 <mem_malloc+0x1e8>)
 8005146:	481b      	ldr	r0, [pc, #108]	; (80051b4 <mem_malloc+0x1dc>)
 8005148:	f00a f95c 	bl	800f404 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <mem_malloc+0x18c>
 8005156:	4b15      	ldr	r3, [pc, #84]	; (80051ac <mem_malloc+0x1d4>)
 8005158:	f240 32bb 	movw	r2, #955	; 0x3bb
 800515c:	4919      	ldr	r1, [pc, #100]	; (80051c4 <mem_malloc+0x1ec>)
 800515e:	4815      	ldr	r0, [pc, #84]	; (80051b4 <mem_malloc+0x1dc>)
 8005160:	f00a f950 	bl	800f404 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <mem_malloc+0x1a4>
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <mem_malloc+0x1d4>)
 8005170:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005174:	4914      	ldr	r1, [pc, #80]	; (80051c8 <mem_malloc+0x1f0>)
 8005176:	480f      	ldr	r0, [pc, #60]	; (80051b4 <mem_malloc+0x1dc>)
 8005178:	f00a f944 	bl	800f404 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3308      	adds	r3, #8
 8005180:	e00e      	b.n	80051a0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005182:	8bfb      	ldrh	r3, [r7, #30]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fc83 	bl	8004a90 <ptr_to_mem>
 800518a:	4603      	mov	r3, r0
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005190:	8bfa      	ldrh	r2, [r7, #30]
 8005192:	8bbb      	ldrh	r3, [r7, #28]
 8005194:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005198:	429a      	cmp	r2, r3
 800519a:	f4ff af44 	bcc.w	8005026 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	2000755c 	.word	0x2000755c
 80051ac:	080108e8 	.word	0x080108e8
 80051b0:	08010a90 	.word	0x08010a90
 80051b4:	08010930 	.word	0x08010930
 80051b8:	20007558 	.word	0x20007558
 80051bc:	08010aa4 	.word	0x08010aa4
 80051c0:	08010ac0 	.word	0x08010ac0
 80051c4:	08010af0 	.word	0x08010af0
 80051c8:	08010b20 	.word	0x08010b20

080051cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	3303      	adds	r3, #3
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e011      	b.n	8005212 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	885b      	ldrh	r3, [r3, #2]
 8005216:	461a      	mov	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4293      	cmp	r3, r2
 800521c:	dbe7      	blt.n	80051ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005232:	2300      	movs	r3, #0
 8005234:	80fb      	strh	r3, [r7, #6]
 8005236:	e009      	b.n	800524c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	4a08      	ldr	r2, [pc, #32]	; (800525c <memp_init+0x30>)
 800523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ffc3 	bl	80051cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	3301      	adds	r3, #1
 800524a:	80fb      	strh	r3, [r7, #6]
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	2b08      	cmp	r3, #8
 8005250:	d9f2      	bls.n	8005238 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	080132fc 	.word	0x080132fc

08005260 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d012      	beq.n	800529c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d006      	beq.n	8005298 <do_memp_malloc_pool+0x38>
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <do_memp_malloc_pool+0x48>)
 800528c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005290:	4906      	ldr	r1, [pc, #24]	; (80052ac <do_memp_malloc_pool+0x4c>)
 8005292:	4807      	ldr	r0, [pc, #28]	; (80052b0 <do_memp_malloc_pool+0x50>)
 8005294:	f00a f8b6 	bl	800f404 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e000      	b.n	800529e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	08010b44 	.word	0x08010b44
 80052ac:	08010b74 	.word	0x08010b74
 80052b0:	08010b98 	.word	0x08010b98

080052b4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <memp_malloc_pool+0x1c>
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <memp_malloc_pool+0x38>)
 80052c4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80052c8:	4909      	ldr	r1, [pc, #36]	; (80052f0 <memp_malloc_pool+0x3c>)
 80052ca:	480a      	ldr	r0, [pc, #40]	; (80052f4 <memp_malloc_pool+0x40>)
 80052cc:	f00a f89a 	bl	800f404 <iprintf>
  if (desc == NULL) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <memp_malloc_pool+0x26>
    return NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e003      	b.n	80052e2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ffc0 	bl	8005260 <do_memp_malloc_pool>
 80052e0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08010b44 	.word	0x08010b44
 80052f0:	08010bc0 	.word	0x08010bc0
 80052f4:	08010b98 	.word	0x08010b98

080052f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d908      	bls.n	800531a <memp_malloc+0x22>
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <memp_malloc+0x3c>)
 800530a:	f240 1257 	movw	r2, #343	; 0x157
 800530e:	490a      	ldr	r1, [pc, #40]	; (8005338 <memp_malloc+0x40>)
 8005310:	480a      	ldr	r0, [pc, #40]	; (800533c <memp_malloc+0x44>)
 8005312:	f00a f877 	bl	800f404 <iprintf>
 8005316:	2300      	movs	r3, #0
 8005318:	e008      	b.n	800532c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	4a08      	ldr	r2, [pc, #32]	; (8005340 <memp_malloc+0x48>)
 800531e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff9c 	bl	8005260 <do_memp_malloc_pool>
 8005328:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08010b44 	.word	0x08010b44
 8005338:	08010bd4 	.word	0x08010bd4
 800533c:	08010b98 	.word	0x08010b98
 8005340:	080132fc 	.word	0x080132fc

08005344 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <do_memp_free_pool+0x22>
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <do_memp_free_pool+0x40>)
 800535a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800535e:	490a      	ldr	r1, [pc, #40]	; (8005388 <do_memp_free_pool+0x44>)
 8005360:	480a      	ldr	r0, [pc, #40]	; (800538c <do_memp_free_pool+0x48>)
 8005362:	f00a f84f 	bl	800f404 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08010b44 	.word	0x08010b44
 8005388:	08010bf4 	.word	0x08010bf4
 800538c:	08010b98 	.word	0x08010b98

08005390 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <memp_free_pool+0x1e>
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <memp_free_pool+0x3c>)
 80053a2:	f240 1295 	movw	r2, #405	; 0x195
 80053a6:	490a      	ldr	r1, [pc, #40]	; (80053d0 <memp_free_pool+0x40>)
 80053a8:	480a      	ldr	r0, [pc, #40]	; (80053d4 <memp_free_pool+0x44>)
 80053aa:	f00a f82b 	bl	800f404 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <memp_free_pool+0x34>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ffc1 	bl	8005344 <do_memp_free_pool>
 80053c2:	e000      	b.n	80053c6 <memp_free_pool+0x36>
    return;
 80053c4:	bf00      	nop
}
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08010b44 	.word	0x08010b44
 80053d0:	08010bc0 	.word	0x08010bc0
 80053d4:	08010b98 	.word	0x08010b98

080053d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d907      	bls.n	80053fa <memp_free+0x22>
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <memp_free+0x44>)
 80053ec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80053f0:	490b      	ldr	r1, [pc, #44]	; (8005420 <memp_free+0x48>)
 80053f2:	480c      	ldr	r0, [pc, #48]	; (8005424 <memp_free+0x4c>)
 80053f4:	f00a f806 	bl	800f404 <iprintf>
 80053f8:	e00c      	b.n	8005414 <memp_free+0x3c>

  if (mem == NULL) {
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	4a09      	ldr	r2, [pc, #36]	; (8005428 <memp_free+0x50>)
 8005404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff9a 	bl	8005344 <do_memp_free_pool>
 8005410:	e000      	b.n	8005414 <memp_free+0x3c>
    return;
 8005412:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	08010b44 	.word	0x08010b44
 8005420:	08010c14 	.word	0x08010c14
 8005424:	08010b98 	.word	0x08010b98
 8005428:	080132fc 	.word	0x080132fc

0800542c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d108      	bne.n	8005462 <netif_add+0x26>
 8005450:	4b57      	ldr	r3, [pc, #348]	; (80055b0 <netif_add+0x174>)
 8005452:	f240 1227 	movw	r2, #295	; 0x127
 8005456:	4957      	ldr	r1, [pc, #348]	; (80055b4 <netif_add+0x178>)
 8005458:	4857      	ldr	r0, [pc, #348]	; (80055b8 <netif_add+0x17c>)
 800545a:	f009 ffd3 	bl	800f404 <iprintf>
 800545e:	2300      	movs	r3, #0
 8005460:	e0a2      	b.n	80055a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d108      	bne.n	800547a <netif_add+0x3e>
 8005468:	4b51      	ldr	r3, [pc, #324]	; (80055b0 <netif_add+0x174>)
 800546a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800546e:	4953      	ldr	r1, [pc, #332]	; (80055bc <netif_add+0x180>)
 8005470:	4851      	ldr	r0, [pc, #324]	; (80055b8 <netif_add+0x17c>)
 8005472:	f009 ffc7 	bl	800f404 <iprintf>
 8005476:	2300      	movs	r3, #0
 8005478:	e096      	b.n	80055a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005480:	4b4f      	ldr	r3, [pc, #316]	; (80055c0 <netif_add+0x184>)
 8005482:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800548a:	4b4d      	ldr	r3, [pc, #308]	; (80055c0 <netif_add+0x184>)
 800548c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005494:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <netif_add+0x184>)
 8005496:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a45      	ldr	r2, [pc, #276]	; (80055c4 <netif_add+0x188>)
 80054ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a3a      	ldr	r2, [r7, #32]
 80054c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80054ca:	4b3f      	ldr	r3, [pc, #252]	; (80055c8 <netif_add+0x18c>)
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f913 	bl	800570c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	4798      	blx	r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <netif_add+0xba>
    return NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e058      	b.n	80055a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054fc:	2bff      	cmp	r3, #255	; 0xff
 80054fe:	d103      	bne.n	8005508 <netif_add+0xcc>
        netif->num = 0;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800550c:	4b2f      	ldr	r3, [pc, #188]	; (80055cc <netif_add+0x190>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e02b      	b.n	800556c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d106      	bne.n	800552a <netif_add+0xee>
 800551c:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <netif_add+0x174>)
 800551e:	f240 128b 	movw	r2, #395	; 0x18b
 8005522:	492b      	ldr	r1, [pc, #172]	; (80055d0 <netif_add+0x194>)
 8005524:	4824      	ldr	r0, [pc, #144]	; (80055b8 <netif_add+0x17c>)
 8005526:	f009 ff6d 	bl	800f404 <iprintf>
        num_netifs++;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2bff      	cmp	r3, #255	; 0xff
 8005534:	dd06      	ble.n	8005544 <netif_add+0x108>
 8005536:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <netif_add+0x174>)
 8005538:	f240 128d 	movw	r2, #397	; 0x18d
 800553c:	4925      	ldr	r1, [pc, #148]	; (80055d4 <netif_add+0x198>)
 800553e:	481e      	ldr	r0, [pc, #120]	; (80055b8 <netif_add+0x17c>)
 8005540:	f009 ff60 	bl	800f404 <iprintf>
        if (netif2->num == netif->num) {
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005550:	429a      	cmp	r2, r3
 8005552:	d108      	bne.n	8005566 <netif_add+0x12a>
          netif->num++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800555a:	3301      	adds	r3, #1
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005564:	e005      	b.n	8005572 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d0      	bne.n	8005514 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1be      	bne.n	80054f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800557e:	2bfe      	cmp	r3, #254	; 0xfe
 8005580:	d103      	bne.n	800558a <netif_add+0x14e>
    netif_num = 0;
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <netif_add+0x18c>)
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e006      	b.n	8005598 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005590:	3301      	adds	r3, #1
 8005592:	b2da      	uxtb	r2, r3
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <netif_add+0x18c>)
 8005596:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <netif_add+0x190>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <netif_add+0x190>)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	08010c30 	.word	0x08010c30
 80055b4:	08010cc4 	.word	0x08010cc4
 80055b8:	08010c80 	.word	0x08010c80
 80055bc:	08010ce0 	.word	0x08010ce0
 80055c0:	08013360 	.word	0x08013360
 80055c4:	080059e7 	.word	0x080059e7
 80055c8:	2000a454 	.word	0x2000a454
 80055cc:	2000a44c 	.word	0x2000a44c
 80055d0:	08010d04 	.word	0x08010d04
 80055d4:	08010d18 	.word	0x08010d18

080055d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f002 fde3 	bl	80081b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f007 fb1f 	bl	800cc30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <netif_do_set_ipaddr+0x20>
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <netif_do_set_ipaddr+0x88>)
 8005610:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005614:	491c      	ldr	r1, [pc, #112]	; (8005688 <netif_do_set_ipaddr+0x8c>)
 8005616:	481d      	ldr	r0, [pc, #116]	; (800568c <netif_do_set_ipaddr+0x90>)
 8005618:	f009 fef4 	bl	800f404 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <netif_do_set_ipaddr+0x34>
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <netif_do_set_ipaddr+0x88>)
 8005624:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005628:	4917      	ldr	r1, [pc, #92]	; (8005688 <netif_do_set_ipaddr+0x8c>)
 800562a:	4818      	ldr	r0, [pc, #96]	; (800568c <netif_do_set_ipaddr+0x90>)
 800562c:	f009 feea 	bl	800f404 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3304      	adds	r3, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d01c      	beq.n	8005678 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ffbf 	bl	80055d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <netif_do_set_ipaddr+0x6a>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	e000      	b.n	8005668 <netif_do_set_ipaddr+0x6c>
 8005666:	2300      	movs	r3, #0
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800566c:	2101      	movs	r1, #1
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8d2 	bl	8005818 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	08010c30 	.word	0x08010c30
 8005688:	08010d48 	.word	0x08010d48
 800568c:	08010c80 	.word	0x08010c80

08005690 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3308      	adds	r3, #8
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d00a      	beq.n	80056c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <netif_do_set_netmask+0x26>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	e000      	b.n	80056b8 <netif_do_set_netmask+0x28>
 80056b6:	2300      	movs	r3, #0
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	330c      	adds	r3, #12
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d00a      	beq.n	80056fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <netif_do_set_gw+0x26>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	e000      	b.n	80056f6 <netif_do_set_gw+0x28>
 80056f4:	2300      	movs	r3, #0
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005728:	4b1c      	ldr	r3, [pc, #112]	; (800579c <netif_set_addr+0x90>)
 800572a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <netif_set_addr+0x90>)
 8005734:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800573c:	4b17      	ldr	r3, [pc, #92]	; (800579c <netif_set_addr+0x90>)
 800573e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <netif_set_addr+0x42>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <netif_set_addr+0x46>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <netif_set_addr+0x48>
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d006      	beq.n	800576a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800575c:	f107 0310 	add.w	r3, r7, #16
 8005760:	461a      	mov	r2, r3
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff ff49 	bl	80055fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff8e 	bl	8005690 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff ffa8 	bl	80056ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	461a      	mov	r2, r3
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff ff35 	bl	80055fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005792:	bf00      	nop
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	08013360 	.word	0x08013360

080057a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80057a8:	4a04      	ldr	r2, [pc, #16]	; (80057bc <netif_set_default+0x1c>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2000a450 	.word	0x2000a450

080057c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <netif_set_up+0x1e>
 80057ce:	4b0f      	ldr	r3, [pc, #60]	; (800580c <netif_set_up+0x4c>)
 80057d0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80057d4:	490e      	ldr	r1, [pc, #56]	; (8005810 <netif_set_up+0x50>)
 80057d6:	480f      	ldr	r0, [pc, #60]	; (8005814 <netif_set_up+0x54>)
 80057d8:	f009 fe14 	bl	800f404 <iprintf>
 80057dc:	e013      	b.n	8005806 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10c      	bne.n	8005806 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80057fe:	2103      	movs	r1, #3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f809 	bl	8005818 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	08010c30 	.word	0x08010c30
 8005810:	08010db8 	.word	0x08010db8
 8005814:	08010c80 	.word	0x08010c80

08005818 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <netif_issue_reports+0x20>
 800582a:	4b18      	ldr	r3, [pc, #96]	; (800588c <netif_issue_reports+0x74>)
 800582c:	f240 326d 	movw	r2, #877	; 0x36d
 8005830:	4917      	ldr	r1, [pc, #92]	; (8005890 <netif_issue_reports+0x78>)
 8005832:	4818      	ldr	r0, [pc, #96]	; (8005894 <netif_issue_reports+0x7c>)
 8005834:	f009 fde6 	bl	800f404 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01e      	beq.n	8005884 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800584c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005850:	2b00      	cmp	r3, #0
 8005852:	d017      	beq.n	8005884 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f008 f941 	bl	800db04 <etharp_request>
 8005882:	e000      	b.n	8005886 <netif_issue_reports+0x6e>
    return;
 8005884:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	08010c30 	.word	0x08010c30
 8005890:	08010dd4 	.word	0x08010dd4
 8005894:	08010c80 	.word	0x08010c80

08005898 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <netif_set_down+0x1e>
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <netif_set_down+0x58>)
 80058a8:	f240 329b 	movw	r2, #923	; 0x39b
 80058ac:	4911      	ldr	r1, [pc, #68]	; (80058f4 <netif_set_down+0x5c>)
 80058ae:	4812      	ldr	r0, [pc, #72]	; (80058f8 <netif_set_down+0x60>)
 80058b0:	f009 fda8 	bl	800f404 <iprintf>
 80058b4:	e019      	b.n	80058ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f007 fccb 	bl	800d280 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	08010c30 	.word	0x08010c30
 80058f4:	08010df8 	.word	0x08010df8
 80058f8:	08010c80 	.word	0x08010c80

080058fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d107      	bne.n	800591a <netif_set_link_up+0x1e>
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <netif_set_link_up+0x5c>)
 800590c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005910:	4912      	ldr	r1, [pc, #72]	; (800595c <netif_set_link_up+0x60>)
 8005912:	4813      	ldr	r0, [pc, #76]	; (8005960 <netif_set_link_up+0x64>)
 8005914:	f009 fd76 	bl	800f404 <iprintf>
 8005918:	e01b      	b.n	8005952 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d114      	bne.n	8005952 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	b2da      	uxtb	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800593a:	2103      	movs	r1, #3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff6b 	bl	8005818 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <netif_set_link_up+0x56>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	08010c30 	.word	0x08010c30
 800595c:	08010e18 	.word	0x08010e18
 8005960:	08010c80 	.word	0x08010c80

08005964 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d107      	bne.n	8005982 <netif_set_link_down+0x1e>
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <netif_set_link_down+0x54>)
 8005974:	f240 4206 	movw	r2, #1030	; 0x406
 8005978:	4910      	ldr	r1, [pc, #64]	; (80059bc <netif_set_link_down+0x58>)
 800597a:	4811      	ldr	r0, [pc, #68]	; (80059c0 <netif_set_link_down+0x5c>)
 800597c:	f009 fd42 	bl	800f404 <iprintf>
 8005980:	e017      	b.n	80059b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d010      	beq.n	80059b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005996:	f023 0304 	bic.w	r3, r3, #4
 800599a:	b2da      	uxtb	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <netif_set_link_down+0x4e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08010c30 	.word	0x08010c30
 80059bc:	08010e3c 	.word	0x08010e3c
 80059c0:	08010c80 	.word	0x08010c80

080059c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	61da      	str	r2, [r3, #28]
  }
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80059f2:	f06f 030b 	mvn.w	r3, #11
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a14:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <netif_get_by_index+0x48>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e00c      	b.n	8005a36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a22:	3301      	adds	r3, #1
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	79fa      	ldrb	r2, [r7, #7]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d101      	bne.n	8005a30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e006      	b.n	8005a3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ef      	bne.n	8005a1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	2000a44c 	.word	0x2000a44c

08005a50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005a56:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <pbuf_free_ooseq+0x38>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <pbuf_free_ooseq+0x3c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	e00a      	b.n	8005a7a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 fbdd 	bl	800822c <tcp_free_ooseq>
      return;
 8005a72:	e005      	b.n	8005a80 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f1      	bne.n	8005a64 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2000a455 	.word	0x2000a455
 8005a8c:	2000a464 	.word	0x2000a464

08005a90 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <pbuf_pool_is_empty+0x14>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	2000a455 	.word	0x2000a455

08005aa8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	80fb      	strh	r3, [r7, #6]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88ba      	ldrh	r2, [r7, #4]
 8005ad4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005ad6:	8b3b      	ldrh	r3, [r7, #24]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	7f3a      	ldrb	r2, [r7, #28]
 8005ae2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	73da      	strb	r2, [r3, #15]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
 8005b06:	460b      	mov	r3, r1
 8005b08:	80bb      	strh	r3, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b18:	d07f      	beq.n	8005c1a <pbuf_alloc+0x11e>
 8005b1a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b1e:	f300 80c8 	bgt.w	8005cb2 <pbuf_alloc+0x1b6>
 8005b22:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b26:	d010      	beq.n	8005b4a <pbuf_alloc+0x4e>
 8005b28:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b2c:	f300 80c1 	bgt.w	8005cb2 <pbuf_alloc+0x1b6>
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d002      	beq.n	8005b3a <pbuf_alloc+0x3e>
 8005b34:	2b41      	cmp	r3, #65	; 0x41
 8005b36:	f040 80bc 	bne.w	8005cb2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	88bb      	ldrh	r3, [r7, #4]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	2000      	movs	r0, #0
 8005b42:	f000 f8d1 	bl	8005ce8 <pbuf_alloc_reference>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005b48:	e0bd      	b.n	8005cc6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005b56:	2008      	movs	r0, #8
 8005b58:	f7ff fbce 	bl	80052f8 <memp_malloc>
 8005b5c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005b64:	f7ff ff94 	bl	8005a90 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b70:	f000 faa8 	bl	80060c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e0a7      	b.n	8005cc8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b7a:	3303      	adds	r3, #3
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8b7a      	ldrh	r2, [r7, #26]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bf28      	it	cs
 8005b90:	4613      	movcs	r3, r2
 8005b92:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b96:	3310      	adds	r3, #16
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3303      	adds	r3, #3
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	89f9      	ldrh	r1, [r7, #14]
 8005ba6:	8b7a      	ldrh	r2, [r7, #26]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	887b      	ldrh	r3, [r7, #2]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	6938      	ldr	r0, [r7, #16]
 8005bb6:	f7ff ff77 	bl	8005aa8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <pbuf_alloc+0xd8>
 8005bc6:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <pbuf_alloc+0x1d4>)
 8005bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bcc:	4941      	ldr	r1, [pc, #260]	; (8005cd4 <pbuf_alloc+0x1d8>)
 8005bce:	4842      	ldr	r0, [pc, #264]	; (8005cd8 <pbuf_alloc+0x1dc>)
 8005bd0:	f009 fc18 	bl	800f404 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005bd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bd6:	3303      	adds	r3, #3
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005be0:	d106      	bne.n	8005bf0 <pbuf_alloc+0xf4>
 8005be2:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <pbuf_alloc+0x1d4>)
 8005be4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005be8:	493c      	ldr	r1, [pc, #240]	; (8005cdc <pbuf_alloc+0x1e0>)
 8005bea:	483b      	ldr	r0, [pc, #236]	; (8005cd8 <pbuf_alloc+0x1dc>)
 8005bec:	f009 fc0a 	bl	800f404 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfa:	e002      	b.n	8005c02 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005c06:	8b7a      	ldrh	r2, [r7, #26]
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005c12:	8b7b      	ldrh	r3, [r7, #26]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d19e      	bne.n	8005b56 <pbuf_alloc+0x5a>
      break;
 8005c18:	e055      	b.n	8005cc6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c1c:	3303      	adds	r3, #3
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f023 0303 	bic.w	r3, r3, #3
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	88bb      	ldrh	r3, [r7, #4]
 8005c28:	3303      	adds	r3, #3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f023 0303 	bic.w	r3, r3, #3
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005c36:	8b3b      	ldrh	r3, [r7, #24]
 8005c38:	3310      	adds	r3, #16
 8005c3a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c3c:	8b3a      	ldrh	r2, [r7, #24]
 8005c3e:	88bb      	ldrh	r3, [r7, #4]
 8005c40:	3303      	adds	r3, #3
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d306      	bcc.n	8005c58 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005c4a:	8afa      	ldrh	r2, [r7, #22]
 8005c4c:	88bb      	ldrh	r3, [r7, #4]
 8005c4e:	3303      	adds	r3, #3
 8005c50:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d201      	bcs.n	8005c5c <pbuf_alloc+0x160>
        return NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e035      	b.n	8005cc8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c5c:	8afb      	ldrh	r3, [r7, #22]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f9ba 	bl	8004fd8 <mem_malloc>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <pbuf_alloc+0x174>
        return NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e02b      	b.n	8005cc8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c72:	3310      	adds	r3, #16
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	4413      	add	r3, r2
 8005c78:	3303      	adds	r3, #3
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	4618      	mov	r0, r3
 8005c80:	88b9      	ldrh	r1, [r7, #4]
 8005c82:	88ba      	ldrh	r2, [r7, #4]
 8005c84:	2300      	movs	r3, #0
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4601      	mov	r1, r0
 8005c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c92:	f7ff ff09 	bl	8005aa8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <pbuf_alloc+0x1c8>
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <pbuf_alloc+0x1d4>)
 8005ca4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005ca8:	490d      	ldr	r1, [pc, #52]	; (8005ce0 <pbuf_alloc+0x1e4>)
 8005caa:	480b      	ldr	r0, [pc, #44]	; (8005cd8 <pbuf_alloc+0x1dc>)
 8005cac:	f009 fbaa 	bl	800f404 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005cb0:	e008      	b.n	8005cc4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005cb2:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <pbuf_alloc+0x1d4>)
 8005cb4:	f240 1227 	movw	r2, #295	; 0x127
 8005cb8:	490a      	ldr	r1, [pc, #40]	; (8005ce4 <pbuf_alloc+0x1e8>)
 8005cba:	4807      	ldr	r0, [pc, #28]	; (8005cd8 <pbuf_alloc+0x1dc>)
 8005cbc:	f009 fba2 	bl	800f404 <iprintf>
      return NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e001      	b.n	8005cc8 <pbuf_alloc+0x1cc>
      break;
 8005cc4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	; 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08010e60 	.word	0x08010e60
 8005cd4:	08010e90 	.word	0x08010e90
 8005cd8:	08010ec0 	.word	0x08010ec0
 8005cdc:	08010ee8 	.word	0x08010ee8
 8005ce0:	08010f1c 	.word	0x08010f1c
 8005ce4:	08010f48 	.word	0x08010f48

08005ce8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005cf8:	883b      	ldrh	r3, [r7, #0]
 8005cfa:	2b41      	cmp	r3, #65	; 0x41
 8005cfc:	d009      	beq.n	8005d12 <pbuf_alloc_reference+0x2a>
 8005cfe:	883b      	ldrh	r3, [r7, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d006      	beq.n	8005d12 <pbuf_alloc_reference+0x2a>
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <pbuf_alloc_reference+0x5c>)
 8005d06:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005d0a:	490f      	ldr	r1, [pc, #60]	; (8005d48 <pbuf_alloc_reference+0x60>)
 8005d0c:	480f      	ldr	r0, [pc, #60]	; (8005d4c <pbuf_alloc_reference+0x64>)
 8005d0e:	f009 fb79 	bl	800f404 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d12:	2007      	movs	r0, #7
 8005d14:	f7ff faf0 	bl	80052f8 <memp_malloc>
 8005d18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e00b      	b.n	8005d3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005d24:	8879      	ldrh	r1, [r7, #2]
 8005d26:	887a      	ldrh	r2, [r7, #2]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	883b      	ldrh	r3, [r7, #0]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	460b      	mov	r3, r1
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff feb7 	bl	8005aa8 <pbuf_init_alloced_pbuf>
  return p;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	08010e60 	.word	0x08010e60
 8005d48:	08010f64 	.word	0x08010f64
 8005d4c:	08010ec0 	.word	0x08010ec0

08005d50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	81bb      	strh	r3, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d68:	8a7b      	ldrh	r3, [r7, #18]
 8005d6a:	3303      	adds	r3, #3
 8005d6c:	f023 0203 	bic.w	r2, r3, #3
 8005d70:	89bb      	ldrh	r3, [r7, #12]
 8005d72:	441a      	add	r2, r3
 8005d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d901      	bls.n	8005d7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e018      	b.n	8005db0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d84:	8a7b      	ldrh	r3, [r7, #18]
 8005d86:	3303      	adds	r3, #3
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	4413      	add	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e001      	b.n	8005d98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	89b9      	ldrh	r1, [r7, #12]
 8005d9c:	89ba      	ldrh	r2, [r7, #12]
 8005d9e:	2302      	movs	r3, #2
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	897b      	ldrh	r3, [r7, #10]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	460b      	mov	r3, r1
 8005da8:	6979      	ldr	r1, [r7, #20]
 8005daa:	f7ff fe7d 	bl	8005aa8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005dae:	687b      	ldr	r3, [r7, #4]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <pbuf_realloc+0x20>
 8005dca:	4b3a      	ldr	r3, [pc, #232]	; (8005eb4 <pbuf_realloc+0xfc>)
 8005dcc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005dd0:	4939      	ldr	r1, [pc, #228]	; (8005eb8 <pbuf_realloc+0x100>)
 8005dd2:	483a      	ldr	r0, [pc, #232]	; (8005ebc <pbuf_realloc+0x104>)
 8005dd4:	f009 fb16 	bl	800f404 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	891b      	ldrh	r3, [r3, #8]
 8005ddc:	887a      	ldrh	r2, [r7, #2]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d263      	bcs.n	8005eaa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	891a      	ldrh	r2, [r3, #8]
 8005de6:	887b      	ldrh	r3, [r7, #2]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	817b      	strh	r3, [r7, #10]
  q = p;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005df4:	e018      	b.n	8005e28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	895b      	ldrh	r3, [r3, #10]
 8005dfa:	897a      	ldrh	r2, [r7, #10]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	891a      	ldrh	r2, [r3, #8]
 8005e04:	893b      	ldrh	r3, [r7, #8]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <pbuf_realloc+0x70>
 8005e1a:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <pbuf_realloc+0xfc>)
 8005e1c:	f240 12af 	movw	r2, #431	; 0x1af
 8005e20:	4927      	ldr	r1, [pc, #156]	; (8005ec0 <pbuf_realloc+0x108>)
 8005e22:	4826      	ldr	r0, [pc, #152]	; (8005ebc <pbuf_realloc+0x104>)
 8005e24:	f009 faee 	bl	800f404 <iprintf>
  while (rem_len > q->len) {
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	895b      	ldrh	r3, [r3, #10]
 8005e2c:	897a      	ldrh	r2, [r7, #10]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d8e1      	bhi.n	8005df6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	7b1b      	ldrb	r3, [r3, #12]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d121      	bne.n	8005e82 <pbuf_realloc+0xca>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	895b      	ldrh	r3, [r3, #10]
 8005e42:	897a      	ldrh	r2, [r7, #10]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d01c      	beq.n	8005e82 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	7b5b      	ldrb	r3, [r3, #13]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d116      	bne.n	8005e82 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	897b      	ldrh	r3, [r7, #10]
 8005e60:	4413      	add	r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7fe ffba 	bl	8004de0 <mem_trim>
 8005e6c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <pbuf_realloc+0xca>
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <pbuf_realloc+0xfc>)
 8005e76:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005e7a:	4912      	ldr	r1, [pc, #72]	; (8005ec4 <pbuf_realloc+0x10c>)
 8005e7c:	480f      	ldr	r0, [pc, #60]	; (8005ebc <pbuf_realloc+0x104>)
 8005e7e:	f009 fac1 	bl	800f404 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	897a      	ldrh	r2, [r7, #10]
 8005e86:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	895a      	ldrh	r2, [r3, #10]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f911 	bl	80060c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e000      	b.n	8005eac <pbuf_realloc+0xf4>
    return;
 8005eaa:	bf00      	nop

}
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08010e60 	.word	0x08010e60
 8005eb8:	08010f78 	.word	0x08010f78
 8005ebc:	08010ec0 	.word	0x08010ec0
 8005ec0:	08010f90 	.word	0x08010f90
 8005ec4:	08010fa8 	.word	0x08010fa8

08005ec8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <pbuf_add_header_impl+0x22>
 8005edc:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <pbuf_add_header_impl+0xc4>)
 8005ede:	f240 12df 	movw	r2, #479	; 0x1df
 8005ee2:	492b      	ldr	r1, [pc, #172]	; (8005f90 <pbuf_add_header_impl+0xc8>)
 8005ee4:	482b      	ldr	r0, [pc, #172]	; (8005f94 <pbuf_add_header_impl+0xcc>)
 8005ee6:	f009 fa8d 	bl	800f404 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <pbuf_add_header_impl+0x30>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef6:	d301      	bcc.n	8005efc <pbuf_add_header_impl+0x34>
    return 1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e043      	b.n	8005f84 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <pbuf_add_header_impl+0x3e>
    return 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e03e      	b.n	8005f84 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	891a      	ldrh	r2, [r3, #8]
 8005f0e:	8a7b      	ldrh	r3, [r7, #18]
 8005f10:	4413      	add	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8a7a      	ldrh	r2, [r7, #18]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d901      	bls.n	8005f1e <pbuf_add_header_impl+0x56>
    return 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e032      	b.n	8005f84 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	7b1b      	ldrb	r3, [r3, #12]
 8005f22:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005f24:	8a3b      	ldrh	r3, [r7, #16]
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	425b      	negs	r3, r3
 8005f36:	4413      	add	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d20d      	bcs.n	8005f60 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e01d      	b.n	8005f84 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	425b      	negs	r3, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e001      	b.n	8005f60 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e011      	b.n	8005f84 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	895a      	ldrh	r2, [r3, #10]
 8005f6a:	8a7b      	ldrh	r3, [r7, #18]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	891a      	ldrh	r2, [r3, #8]
 8005f78:	8a7b      	ldrh	r3, [r7, #18]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08010e60 	.word	0x08010e60
 8005f90:	08010fc4 	.word	0x08010fc4
 8005f94:	08010ec0 	.word	0x08010ec0

08005f98 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ff8e 	bl	8005ec8 <pbuf_add_header_impl>
 8005fac:	4603      	mov	r3, r0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <pbuf_remove_header+0x1e>
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <pbuf_remove_header+0x94>)
 8005fca:	f240 224b 	movw	r2, #587	; 0x24b
 8005fce:	4920      	ldr	r1, [pc, #128]	; (8006050 <pbuf_remove_header+0x98>)
 8005fd0:	4820      	ldr	r0, [pc, #128]	; (8006054 <pbuf_remove_header+0x9c>)
 8005fd2:	f009 fa17 	bl	800f404 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <pbuf_remove_header+0x2c>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe2:	d301      	bcc.n	8005fe8 <pbuf_remove_header+0x30>
    return 1;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e02c      	b.n	8006042 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <pbuf_remove_header+0x3a>
    return 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e027      	b.n	8006042 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	895b      	ldrh	r3, [r3, #10]
 8005ffa:	89fa      	ldrh	r2, [r7, #14]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d908      	bls.n	8006012 <pbuf_remove_header+0x5a>
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <pbuf_remove_header+0x94>)
 8006002:	f240 2255 	movw	r2, #597	; 0x255
 8006006:	4914      	ldr	r1, [pc, #80]	; (8006058 <pbuf_remove_header+0xa0>)
 8006008:	4812      	ldr	r0, [pc, #72]	; (8006054 <pbuf_remove_header+0x9c>)
 800600a:	f009 f9fb 	bl	800f404 <iprintf>
 800600e:	2301      	movs	r3, #1
 8006010:	e017      	b.n	8006042 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	441a      	add	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	895a      	ldrh	r2, [r3, #10]
 8006028:	89fb      	ldrh	r3, [r7, #14]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	b29a      	uxth	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	891a      	ldrh	r2, [r3, #8]
 8006036:	89fb      	ldrh	r3, [r7, #14]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	08010e60 	.word	0x08010e60
 8006050:	08010fc4 	.word	0x08010fc4
 8006054:	08010ec0 	.word	0x08010ec0
 8006058:	08010fd0 	.word	0x08010fd0

0800605c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	807b      	strh	r3, [r7, #2]
 8006068:	4613      	mov	r3, r2
 800606a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800606c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006070:	2b00      	cmp	r3, #0
 8006072:	da08      	bge.n	8006086 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006078:	425b      	negs	r3, r3
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff9b 	bl	8005fb8 <pbuf_remove_header>
 8006082:	4603      	mov	r3, r0
 8006084:	e007      	b.n	8006096 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006086:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800608a:	787a      	ldrb	r2, [r7, #1]
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff1a 	bl	8005ec8 <pbuf_add_header_impl>
 8006094:	4603      	mov	r3, r0
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80060aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ffd2 	bl	800605c <pbuf_header_impl>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <pbuf_free+0x22>
 80060d8:	4b38      	ldr	r3, [pc, #224]	; (80061bc <pbuf_free+0xf8>)
 80060da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80060de:	4938      	ldr	r1, [pc, #224]	; (80061c0 <pbuf_free+0xfc>)
 80060e0:	4838      	ldr	r0, [pc, #224]	; (80061c4 <pbuf_free+0x100>)
 80060e2:	f009 f98f 	bl	800f404 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e063      	b.n	80061b2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80060ee:	e05c      	b.n	80061aa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7b9b      	ldrb	r3, [r3, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <pbuf_free+0x42>
 80060f8:	4b30      	ldr	r3, [pc, #192]	; (80061bc <pbuf_free+0xf8>)
 80060fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80060fe:	4932      	ldr	r1, [pc, #200]	; (80061c8 <pbuf_free+0x104>)
 8006100:	4830      	ldr	r0, [pc, #192]	; (80061c4 <pbuf_free+0x100>)
 8006102:	f009 f97f 	bl	800f404 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7b9b      	ldrb	r3, [r3, #14]
 800610a:	3b01      	subs	r3, #1
 800610c:	b2da      	uxtb	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	739a      	strb	r2, [r3, #14]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7b9b      	ldrb	r3, [r3, #14]
 8006116:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d143      	bne.n	80061a6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7b5b      	ldrb	r3, [r3, #13]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d011      	beq.n	800615e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <pbuf_free+0x90>
 8006146:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <pbuf_free+0xf8>)
 8006148:	f240 22ff 	movw	r2, #767	; 0x2ff
 800614c:	491f      	ldr	r1, [pc, #124]	; (80061cc <pbuf_free+0x108>)
 800614e:	481d      	ldr	r0, [pc, #116]	; (80061c4 <pbuf_free+0x100>)
 8006150:	f009 f958 	bl	800f404 <iprintf>
        pc->custom_free_function(p);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
 800615c:	e01d      	b.n	800619a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d104      	bne.n	800616e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	2008      	movs	r0, #8
 8006168:	f7ff f936 	bl	80053d8 <memp_free>
 800616c:	e015      	b.n	800619a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d104      	bne.n	800617e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	2007      	movs	r0, #7
 8006178:	f7ff f92e 	bl	80053d8 <memp_free>
 800617c:	e00d      	b.n	800619a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <pbuf_free+0xc8>
          mem_free(p);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fe fdc1 	bl	8004d0c <mem_free>
 800618a:	e006      	b.n	800619a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800618c:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <pbuf_free+0xf8>)
 800618e:	f240 320f 	movw	r2, #783	; 0x30f
 8006192:	490f      	ldr	r1, [pc, #60]	; (80061d0 <pbuf_free+0x10c>)
 8006194:	480b      	ldr	r0, [pc, #44]	; (80061c4 <pbuf_free+0x100>)
 8006196:	f009 f935 	bl	800f404 <iprintf>
        }
      }
      count++;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	3301      	adds	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	607b      	str	r3, [r7, #4]
 80061a4:	e001      	b.n	80061aa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d19f      	bne.n	80060f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	08010e60 	.word	0x08010e60
 80061c0:	08010fc4 	.word	0x08010fc4
 80061c4:	08010ec0 	.word	0x08010ec0
 80061c8:	08010ff0 	.word	0x08010ff0
 80061cc:	08011008 	.word	0x08011008
 80061d0:	0801102c 	.word	0x0801102c

080061d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80061e0:	e005      	b.n	80061ee <pbuf_clen+0x1a>
    ++len;
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	3301      	adds	r3, #1
 80061e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f6      	bne.n	80061e2 <pbuf_clen+0xe>
  }
  return len;
 80061f4:	89fb      	ldrh	r3, [r7, #14]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d010      	beq.n	8006234 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7b9b      	ldrb	r3, [r3, #14]
 8006216:	3301      	adds	r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7b9b      	ldrb	r3, [r3, #14]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <pbuf_ref+0x30>
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <pbuf_ref+0x38>)
 8006228:	f240 3242 	movw	r2, #834	; 0x342
 800622c:	4904      	ldr	r1, [pc, #16]	; (8006240 <pbuf_ref+0x3c>)
 800622e:	4805      	ldr	r0, [pc, #20]	; (8006244 <pbuf_ref+0x40>)
 8006230:	f009 f8e8 	bl	800f404 <iprintf>
  }
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	08010e60 	.word	0x08010e60
 8006240:	08011040 	.word	0x08011040
 8006244:	08010ec0 	.word	0x08010ec0

08006248 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <pbuf_cat+0x16>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <pbuf_cat+0x26>
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <pbuf_cat+0x98>)
 8006260:	f240 3259 	movw	r2, #857	; 0x359
 8006264:	491f      	ldr	r1, [pc, #124]	; (80062e4 <pbuf_cat+0x9c>)
 8006266:	4820      	ldr	r0, [pc, #128]	; (80062e8 <pbuf_cat+0xa0>)
 8006268:	f009 f8cc 	bl	800f404 <iprintf>
 800626c:	e034      	b.n	80062d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e00a      	b.n	800628a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	891a      	ldrh	r2, [r3, #8]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	891b      	ldrh	r3, [r3, #8]
 800627c:	4413      	add	r3, r2
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	891a      	ldrh	r2, [r3, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	895b      	ldrh	r3, [r3, #10]
 800629a:	429a      	cmp	r2, r3
 800629c:	d006      	beq.n	80062ac <pbuf_cat+0x64>
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <pbuf_cat+0x98>)
 80062a0:	f240 3262 	movw	r2, #866	; 0x362
 80062a4:	4911      	ldr	r1, [pc, #68]	; (80062ec <pbuf_cat+0xa4>)
 80062a6:	4810      	ldr	r0, [pc, #64]	; (80062e8 <pbuf_cat+0xa0>)
 80062a8:	f009 f8ac 	bl	800f404 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d006      	beq.n	80062c2 <pbuf_cat+0x7a>
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <pbuf_cat+0x98>)
 80062b6:	f240 3263 	movw	r2, #867	; 0x363
 80062ba:	490d      	ldr	r1, [pc, #52]	; (80062f0 <pbuf_cat+0xa8>)
 80062bc:	480a      	ldr	r0, [pc, #40]	; (80062e8 <pbuf_cat+0xa0>)
 80062be:	f009 f8a1 	bl	800f404 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	891a      	ldrh	r2, [r3, #8]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	891b      	ldrh	r3, [r3, #8]
 80062ca:	4413      	add	r3, r2
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	08010e60 	.word	0x08010e60
 80062e4:	08011054 	.word	0x08011054
 80062e8:	08010ec0 	.word	0x08010ec0
 80062ec:	0801108c 	.word	0x0801108c
 80062f0:	080110bc 	.word	0x080110bc

080062f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <pbuf_copy+0x2a>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <pbuf_copy+0x2a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	891a      	ldrh	r2, [r3, #8]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	891b      	ldrh	r3, [r3, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d209      	bcs.n	8006332 <pbuf_copy+0x3e>
 800631e:	4b57      	ldr	r3, [pc, #348]	; (800647c <pbuf_copy+0x188>)
 8006320:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006324:	4956      	ldr	r1, [pc, #344]	; (8006480 <pbuf_copy+0x18c>)
 8006326:	4857      	ldr	r0, [pc, #348]	; (8006484 <pbuf_copy+0x190>)
 8006328:	f009 f86c 	bl	800f404 <iprintf>
 800632c:	f06f 030f 	mvn.w	r3, #15
 8006330:	e09f      	b.n	8006472 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	895b      	ldrh	r3, [r3, #10]
 8006336:	461a      	mov	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	895b      	ldrh	r3, [r3, #10]
 8006340:	4619      	mov	r1, r3
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1acb      	subs	r3, r1, r3
 8006346:	429a      	cmp	r2, r3
 8006348:	d306      	bcc.n	8006358 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	895b      	ldrh	r3, [r3, #10]
 800634e:	461a      	mov	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e005      	b.n	8006364 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	895b      	ldrh	r3, [r3, #10]
 800635c:	461a      	mov	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	18d0      	adds	r0, r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4619      	mov	r1, r3
 8006378:	f009 f814 	bl	800f3a4 <memcpy>
    offset_to += len;
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	895b      	ldrh	r3, [r3, #10]
 8006390:	461a      	mov	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4293      	cmp	r3, r2
 8006396:	d906      	bls.n	80063a6 <pbuf_copy+0xb2>
 8006398:	4b38      	ldr	r3, [pc, #224]	; (800647c <pbuf_copy+0x188>)
 800639a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800639e:	493a      	ldr	r1, [pc, #232]	; (8006488 <pbuf_copy+0x194>)
 80063a0:	4838      	ldr	r0, [pc, #224]	; (8006484 <pbuf_copy+0x190>)
 80063a2:	f009 f82f 	bl	800f404 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	895b      	ldrh	r3, [r3, #10]
 80063aa:	461a      	mov	r2, r3
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d906      	bls.n	80063c0 <pbuf_copy+0xcc>
 80063b2:	4b32      	ldr	r3, [pc, #200]	; (800647c <pbuf_copy+0x188>)
 80063b4:	f240 32da 	movw	r2, #986	; 0x3da
 80063b8:	4934      	ldr	r1, [pc, #208]	; (800648c <pbuf_copy+0x198>)
 80063ba:	4832      	ldr	r0, [pc, #200]	; (8006484 <pbuf_copy+0x190>)
 80063bc:	f009 f822 	bl	800f404 <iprintf>
    if (offset_from >= p_from->len) {
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	461a      	mov	r2, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d304      	bcc.n	80063d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	895b      	ldrh	r3, [r3, #10]
 80063da:	461a      	mov	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4293      	cmp	r3, r2
 80063e0:	d114      	bne.n	800640c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10c      	bne.n	800640c <pbuf_copy+0x118>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <pbuf_copy+0x118>
 80063f8:	4b20      	ldr	r3, [pc, #128]	; (800647c <pbuf_copy+0x188>)
 80063fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80063fe:	4924      	ldr	r1, [pc, #144]	; (8006490 <pbuf_copy+0x19c>)
 8006400:	4820      	ldr	r0, [pc, #128]	; (8006484 <pbuf_copy+0x190>)
 8006402:	f008 ffff 	bl	800f404 <iprintf>
 8006406:	f06f 030f 	mvn.w	r3, #15
 800640a:	e032      	b.n	8006472 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <pbuf_copy+0x146>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	895a      	ldrh	r2, [r3, #10]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	891b      	ldrh	r3, [r3, #8]
 800641a:	429a      	cmp	r2, r3
 800641c:	d10d      	bne.n	800643a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <pbuf_copy+0x146>
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <pbuf_copy+0x188>)
 8006428:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800642c:	4919      	ldr	r1, [pc, #100]	; (8006494 <pbuf_copy+0x1a0>)
 800642e:	4815      	ldr	r0, [pc, #84]	; (8006484 <pbuf_copy+0x190>)
 8006430:	f008 ffe8 	bl	800f404 <iprintf>
 8006434:	f06f 0305 	mvn.w	r3, #5
 8006438:	e01b      	b.n	8006472 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d013      	beq.n	8006468 <pbuf_copy+0x174>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	895a      	ldrh	r2, [r3, #10]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	891b      	ldrh	r3, [r3, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d10d      	bne.n	8006468 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <pbuf_copy+0x174>
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <pbuf_copy+0x188>)
 8006456:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800645a:	490e      	ldr	r1, [pc, #56]	; (8006494 <pbuf_copy+0x1a0>)
 800645c:	4809      	ldr	r0, [pc, #36]	; (8006484 <pbuf_copy+0x190>)
 800645e:	f008 ffd1 	bl	800f404 <iprintf>
 8006462:	f06f 0305 	mvn.w	r3, #5
 8006466:	e004      	b.n	8006472 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f47f af61 	bne.w	8006332 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	08010e60 	.word	0x08010e60
 8006480:	08011108 	.word	0x08011108
 8006484:	08010ec0 	.word	0x08010ec0
 8006488:	08011138 	.word	0x08011138
 800648c:	08011150 	.word	0x08011150
 8006490:	0801116c 	.word	0x0801116c
 8006494:	0801117c 	.word	0x0801117c

08006498 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	460b      	mov	r3, r1
 80064a8:	80fb      	strh	r3, [r7, #6]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d108      	bne.n	80064ce <pbuf_copy_partial+0x36>
 80064bc:	4b2b      	ldr	r3, [pc, #172]	; (800656c <pbuf_copy_partial+0xd4>)
 80064be:	f240 420a 	movw	r2, #1034	; 0x40a
 80064c2:	492b      	ldr	r1, [pc, #172]	; (8006570 <pbuf_copy_partial+0xd8>)
 80064c4:	482b      	ldr	r0, [pc, #172]	; (8006574 <pbuf_copy_partial+0xdc>)
 80064c6:	f008 ff9d 	bl	800f404 <iprintf>
 80064ca:	2300      	movs	r3, #0
 80064cc:	e04a      	b.n	8006564 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d108      	bne.n	80064e6 <pbuf_copy_partial+0x4e>
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <pbuf_copy_partial+0xd4>)
 80064d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80064da:	4927      	ldr	r1, [pc, #156]	; (8006578 <pbuf_copy_partial+0xe0>)
 80064dc:	4825      	ldr	r0, [pc, #148]	; (8006574 <pbuf_copy_partial+0xdc>)
 80064de:	f008 ff91 	bl	800f404 <iprintf>
 80064e2:	2300      	movs	r3, #0
 80064e4:	e03e      	b.n	8006564 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e034      	b.n	8006556 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80064ec:	88bb      	ldrh	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <pbuf_copy_partial+0x70>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	895b      	ldrh	r3, [r3, #10]
 80064f6:	88ba      	ldrh	r2, [r7, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d305      	bcc.n	8006508 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	895b      	ldrh	r3, [r3, #10]
 8006500:	88ba      	ldrh	r2, [r7, #4]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	80bb      	strh	r3, [r7, #4]
 8006506:	e023      	b.n	8006550 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	895a      	ldrh	r2, [r3, #10]
 800650c:	88bb      	ldrh	r3, [r7, #4]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006512:	8b3a      	ldrh	r2, [r7, #24]
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	429a      	cmp	r2, r3
 8006518:	d901      	bls.n	800651e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800651e:	8b7b      	ldrh	r3, [r7, #26]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	18d0      	adds	r0, r2, r3
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	88bb      	ldrh	r3, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	8b3a      	ldrh	r2, [r7, #24]
 800652e:	4619      	mov	r1, r3
 8006530:	f008 ff38 	bl	800f3a4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006534:	8afa      	ldrh	r2, [r7, #22]
 8006536:	8b3b      	ldrh	r3, [r7, #24]
 8006538:	4413      	add	r3, r2
 800653a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800653c:	8b7a      	ldrh	r2, [r7, #26]
 800653e:	8b3b      	ldrh	r3, [r7, #24]
 8006540:	4413      	add	r3, r2
 8006542:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	8b3b      	ldrh	r3, [r7, #24]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <pbuf_copy_partial+0xca>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1c4      	bne.n	80064ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006562:	8afb      	ldrh	r3, [r7, #22]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	08010e60 	.word	0x08010e60
 8006570:	080111a8 	.word	0x080111a8
 8006574:	08010ec0 	.word	0x08010ec0
 8006578:	080111c8 	.word	0x080111c8

0800657c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <pbuf_take+0x30>
 8006598:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <pbuf_take+0x108>)
 800659a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800659e:	493a      	ldr	r1, [pc, #232]	; (8006688 <pbuf_take+0x10c>)
 80065a0:	483a      	ldr	r0, [pc, #232]	; (800668c <pbuf_take+0x110>)
 80065a2:	f008 ff2f 	bl	800f404 <iprintf>
 80065a6:	f06f 030f 	mvn.w	r3, #15
 80065aa:	e067      	b.n	800667c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <pbuf_take+0x4a>
 80065b2:	4b34      	ldr	r3, [pc, #208]	; (8006684 <pbuf_take+0x108>)
 80065b4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80065b8:	4935      	ldr	r1, [pc, #212]	; (8006690 <pbuf_take+0x114>)
 80065ba:	4834      	ldr	r0, [pc, #208]	; (800668c <pbuf_take+0x110>)
 80065bc:	f008 ff22 	bl	800f404 <iprintf>
 80065c0:	f06f 030f 	mvn.w	r3, #15
 80065c4:	e05a      	b.n	800667c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	891b      	ldrh	r3, [r3, #8]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d909      	bls.n	80065e4 <pbuf_take+0x68>
 80065d0:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <pbuf_take+0x108>)
 80065d2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80065d6:	492f      	ldr	r1, [pc, #188]	; (8006694 <pbuf_take+0x118>)
 80065d8:	482c      	ldr	r0, [pc, #176]	; (800668c <pbuf_take+0x110>)
 80065da:	f008 ff13 	bl	800f404 <iprintf>
 80065de:	f04f 33ff 	mov.w	r3, #4294967295
 80065e2:	e04b      	b.n	800667c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <pbuf_take+0x7e>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <pbuf_take+0x7e>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	891b      	ldrh	r3, [r3, #8]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d902      	bls.n	8006600 <pbuf_take+0x84>
    return ERR_ARG;
 80065fa:	f06f 030f 	mvn.w	r3, #15
 80065fe:	e03d      	b.n	800667c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e028      	b.n	8006658 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <pbuf_take+0x9e>
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <pbuf_take+0x108>)
 800660e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006612:	4921      	ldr	r1, [pc, #132]	; (8006698 <pbuf_take+0x11c>)
 8006614:	481d      	ldr	r0, [pc, #116]	; (800668c <pbuf_take+0x110>)
 8006616:	f008 fef5 	bl	800f404 <iprintf>
    buf_copy_len = total_copy_len;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	895b      	ldrh	r3, [r3, #10]
 8006622:	461a      	mov	r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	4293      	cmp	r3, r2
 8006628:	d902      	bls.n	8006630 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	895b      	ldrh	r3, [r3, #10]
 800662e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	6858      	ldr	r0, [r3, #4]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	4619      	mov	r1, r3
 800663e:	f008 feb1 	bl	800f3a4 <memcpy>
    total_copy_len -= buf_copy_len;
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	4413      	add	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1d3      	bne.n	8006606 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <pbuf_take+0xf0>
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d006      	beq.n	800667a <pbuf_take+0xfe>
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <pbuf_take+0x108>)
 800666e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006672:	490a      	ldr	r1, [pc, #40]	; (800669c <pbuf_take+0x120>)
 8006674:	4805      	ldr	r0, [pc, #20]	; (800668c <pbuf_take+0x110>)
 8006676:	f008 fec5 	bl	800f404 <iprintf>
  return ERR_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	08010e60 	.word	0x08010e60
 8006688:	08011238 	.word	0x08011238
 800668c:	08010ec0 	.word	0x08010ec0
 8006690:	08011250 	.word	0x08011250
 8006694:	0801126c 	.word	0x0801126c
 8006698:	0801128c 	.word	0x0801128c
 800669c:	080112a4 	.word	0x080112a4

080066a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	603a      	str	r2, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
 80066ac:	460b      	mov	r3, r1
 80066ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	8919      	ldrh	r1, [r3, #8]
 80066b4:	88ba      	ldrh	r2, [r7, #4]
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fa1f 	bl	8005afc <pbuf_alloc>
 80066be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <pbuf_clone+0x2a>
    return NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e011      	b.n	80066ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff fe11 	bl	80062f4 <pbuf_copy>
 80066d2:	4603      	mov	r3, r0
 80066d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80066d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d006      	beq.n	80066ec <pbuf_clone+0x4c>
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <pbuf_clone+0x58>)
 80066e0:	f240 5224 	movw	r2, #1316	; 0x524
 80066e4:	4905      	ldr	r1, [pc, #20]	; (80066fc <pbuf_clone+0x5c>)
 80066e6:	4806      	ldr	r0, [pc, #24]	; (8006700 <pbuf_clone+0x60>)
 80066e8:	f008 fe8c 	bl	800f404 <iprintf>
  return q;
 80066ec:	68fb      	ldr	r3, [r7, #12]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	08010e60 	.word	0x08010e60
 80066fc:	080112d4 	.word	0x080112d4
 8006700:	08010ec0 	.word	0x08010ec0

08006704 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006708:	f008 fe94 	bl	800f434 <rand>
 800670c:	4603      	mov	r3, r0
 800670e:	b29b      	uxth	r3, r3
 8006710:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006714:	b29b      	uxth	r3, r3
 8006716:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800671a:	b29a      	uxth	r2, r3
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <tcp_init+0x20>)
 800671e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000020 	.word	0x20000020

08006728 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7d1b      	ldrb	r3, [r3, #20]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d105      	bne.n	8006744 <tcp_free+0x1c>
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <tcp_free+0x2c>)
 800673a:	22d4      	movs	r2, #212	; 0xd4
 800673c:	4906      	ldr	r1, [pc, #24]	; (8006758 <tcp_free+0x30>)
 800673e:	4807      	ldr	r0, [pc, #28]	; (800675c <tcp_free+0x34>)
 8006740:	f008 fe60 	bl	800f404 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	2001      	movs	r0, #1
 8006748:	f7fe fe46 	bl	80053d8 <memp_free>
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	08011360 	.word	0x08011360
 8006758:	08011390 	.word	0x08011390
 800675c:	080113a4 	.word	0x080113a4

08006760 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7d1b      	ldrb	r3, [r3, #20]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d105      	bne.n	800677c <tcp_free_listen+0x1c>
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <tcp_free_listen+0x2c>)
 8006772:	22df      	movs	r2, #223	; 0xdf
 8006774:	4906      	ldr	r1, [pc, #24]	; (8006790 <tcp_free_listen+0x30>)
 8006776:	4807      	ldr	r0, [pc, #28]	; (8006794 <tcp_free_listen+0x34>)
 8006778:	f008 fe44 	bl	800f404 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	2002      	movs	r0, #2
 8006780:	f7fe fe2a 	bl	80053d8 <memp_free>
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	08011360 	.word	0x08011360
 8006790:	080113cc 	.word	0x080113cc
 8006794:	080113a4 	.word	0x080113a4

08006798 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800679c:	f001 f800 	bl	80077a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <tcp_tmr+0x28>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <tcp_tmr+0x28>)
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <tcp_tmr+0x28>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80067b8:	f000 fcb2 	bl	8007120 <tcp_slowtmr>
  }
}
 80067bc:	bf00      	nop
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	2000a46d 	.word	0x2000a46d

080067c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <tcp_remove_listener+0x1c>
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <tcp_remove_listener+0x48>)
 80067d6:	22ff      	movs	r2, #255	; 0xff
 80067d8:	490d      	ldr	r1, [pc, #52]	; (8006810 <tcp_remove_listener+0x4c>)
 80067da:	480e      	ldr	r0, [pc, #56]	; (8006814 <tcp_remove_listener+0x50>)
 80067dc:	f008 fe12 	bl	800f404 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e00a      	b.n	80067fc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d102      	bne.n	80067f6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f1      	bne.n	80067e6 <tcp_remove_listener+0x22>
    }
  }
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	08011360 	.word	0x08011360
 8006810:	080113e8 	.word	0x080113e8
 8006814:	080113a4 	.word	0x080113a4

08006818 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <tcp_listen_closed+0x1c>
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <tcp_listen_closed+0x60>)
 8006828:	f240 1211 	movw	r2, #273	; 0x111
 800682c:	4913      	ldr	r1, [pc, #76]	; (800687c <tcp_listen_closed+0x64>)
 800682e:	4814      	ldr	r0, [pc, #80]	; (8006880 <tcp_listen_closed+0x68>)
 8006830:	f008 fde8 	bl	800f404 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7d1b      	ldrb	r3, [r3, #20]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d006      	beq.n	800684a <tcp_listen_closed+0x32>
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <tcp_listen_closed+0x60>)
 800683e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006842:	4910      	ldr	r1, [pc, #64]	; (8006884 <tcp_listen_closed+0x6c>)
 8006844:	480e      	ldr	r0, [pc, #56]	; (8006880 <tcp_listen_closed+0x68>)
 8006846:	f008 fddd 	bl	800f404 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800684a:	2301      	movs	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e00b      	b.n	8006868 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006850:	4a0d      	ldr	r2, [pc, #52]	; (8006888 <tcp_listen_closed+0x70>)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ffb1 	bl	80067c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b03      	cmp	r3, #3
 800686c:	d9f0      	bls.n	8006850 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	08011360 	.word	0x08011360
 800687c:	08011410 	.word	0x08011410
 8006880:	080113a4 	.word	0x080113a4
 8006884:	0801141c 	.word	0x0801141c
 8006888:	08013338 	.word	0x08013338

0800688c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800688c:	b5b0      	push	{r4, r5, r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af04      	add	r7, sp, #16
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <tcp_close_shutdown+0x20>
 800689e:	4b63      	ldr	r3, [pc, #396]	; (8006a2c <tcp_close_shutdown+0x1a0>)
 80068a0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80068a4:	4962      	ldr	r1, [pc, #392]	; (8006a30 <tcp_close_shutdown+0x1a4>)
 80068a6:	4863      	ldr	r0, [pc, #396]	; (8006a34 <tcp_close_shutdown+0x1a8>)
 80068a8:	f008 fdac 	bl	800f404 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d066      	beq.n	8006980 <tcp_close_shutdown+0xf4>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7d1b      	ldrb	r3, [r3, #20]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d003      	beq.n	80068c2 <tcp_close_shutdown+0x36>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7d1b      	ldrb	r3, [r3, #20]
 80068be:	2b07      	cmp	r3, #7
 80068c0:	d15e      	bne.n	8006980 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <tcp_close_shutdown+0x48>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80068d2:	d055      	beq.n	8006980 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8b5b      	ldrh	r3, [r3, #26]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <tcp_close_shutdown+0x62>
 80068e0:	4b52      	ldr	r3, [pc, #328]	; (8006a2c <tcp_close_shutdown+0x1a0>)
 80068e2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80068e6:	4954      	ldr	r1, [pc, #336]	; (8006a38 <tcp_close_shutdown+0x1ac>)
 80068e8:	4852      	ldr	r0, [pc, #328]	; (8006a34 <tcp_close_shutdown+0x1a8>)
 80068ea:	f008 fd8b 	bl	800f404 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80068f6:	687d      	ldr	r5, [r7, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	8ad2      	ldrh	r2, [r2, #22]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	8b09      	ldrh	r1, [r1, #24]
 8006904:	9102      	str	r1, [sp, #8]
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	462b      	mov	r3, r5
 800690c:	4622      	mov	r2, r4
 800690e:	4601      	mov	r1, r0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f005 fcf7 	bl	800c304 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fad4 	bl	8007ec4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800691c:	4b47      	ldr	r3, [pc, #284]	; (8006a3c <tcp_close_shutdown+0x1b0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	429a      	cmp	r2, r3
 8006924:	d105      	bne.n	8006932 <tcp_close_shutdown+0xa6>
 8006926:	4b45      	ldr	r3, [pc, #276]	; (8006a3c <tcp_close_shutdown+0x1b0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4a43      	ldr	r2, [pc, #268]	; (8006a3c <tcp_close_shutdown+0x1b0>)
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e013      	b.n	800695a <tcp_close_shutdown+0xce>
 8006932:	4b42      	ldr	r3, [pc, #264]	; (8006a3c <tcp_close_shutdown+0x1b0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e00c      	b.n	8006954 <tcp_close_shutdown+0xc8>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	429a      	cmp	r2, r3
 8006942:	d104      	bne.n	800694e <tcp_close_shutdown+0xc2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	60da      	str	r2, [r3, #12]
 800694c:	e005      	b.n	800695a <tcp_close_shutdown+0xce>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ef      	bne.n	800693a <tcp_close_shutdown+0xae>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	60da      	str	r2, [r3, #12]
 8006960:	4b37      	ldr	r3, [pc, #220]	; (8006a40 <tcp_close_shutdown+0x1b4>)
 8006962:	2201      	movs	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <tcp_close_shutdown+0x1b8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d102      	bne.n	8006976 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006970:	f003 ff6c 	bl	800a84c <tcp_trigger_input_pcb_close>
 8006974:	e002      	b.n	800697c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fed6 	bl	8006728 <tcp_free>
      }
      return ERR_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	e050      	b.n	8006a22 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7d1b      	ldrb	r3, [r3, #20]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d03b      	beq.n	8006a00 <tcp_close_shutdown+0x174>
 8006988:	2b02      	cmp	r3, #2
 800698a:	dc44      	bgt.n	8006a16 <tcp_close_shutdown+0x18a>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <tcp_close_shutdown+0x10a>
 8006990:	2b01      	cmp	r3, #1
 8006992:	d02a      	beq.n	80069ea <tcp_close_shutdown+0x15e>
 8006994:	e03f      	b.n	8006a16 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8adb      	ldrh	r3, [r3, #22]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d021      	beq.n	80069e2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <tcp_close_shutdown+0x1bc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d105      	bne.n	80069b4 <tcp_close_shutdown+0x128>
 80069a8:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <tcp_close_shutdown+0x1bc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4a26      	ldr	r2, [pc, #152]	; (8006a48 <tcp_close_shutdown+0x1bc>)
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e013      	b.n	80069dc <tcp_close_shutdown+0x150>
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <tcp_close_shutdown+0x1bc>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	e00c      	b.n	80069d6 <tcp_close_shutdown+0x14a>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d104      	bne.n	80069d0 <tcp_close_shutdown+0x144>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	e005      	b.n	80069dc <tcp_close_shutdown+0x150>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1ef      	bne.n	80069bc <tcp_close_shutdown+0x130>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fea0 	bl	8006728 <tcp_free>
      break;
 80069e8:	e01a      	b.n	8006a20 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ff14 	bl	8006818 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4816      	ldr	r0, [pc, #88]	; (8006a4c <tcp_close_shutdown+0x1c0>)
 80069f4:	f001 fab6 	bl	8007f64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff feb1 	bl	8006760 <tcp_free_listen>
      break;
 80069fe:	e00f      	b.n	8006a20 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	480e      	ldr	r0, [pc, #56]	; (8006a3c <tcp_close_shutdown+0x1b0>)
 8006a04:	f001 faae 	bl	8007f64 <tcp_pcb_remove>
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <tcp_close_shutdown+0x1b4>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fe8a 	bl	8006728 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006a14:	e004      	b.n	8006a20 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f81a 	bl	8006a50 <tcp_close_shutdown_fin>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	e000      	b.n	8006a22 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bdb0      	pop	{r4, r5, r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08011360 	.word	0x08011360
 8006a30:	08011434 	.word	0x08011434
 8006a34:	080113a4 	.word	0x080113a4
 8006a38:	08011454 	.word	0x08011454
 8006a3c:	2000a464 	.word	0x2000a464
 8006a40:	2000a46c 	.word	0x2000a46c
 8006a44:	2000a4a4 	.word	0x2000a4a4
 8006a48:	2000a45c 	.word	0x2000a45c
 8006a4c:	2000a460 	.word	0x2000a460

08006a50 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <tcp_close_shutdown_fin+0x1c>
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <tcp_close_shutdown_fin+0xc8>)
 8006a60:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006a64:	492d      	ldr	r1, [pc, #180]	; (8006b1c <tcp_close_shutdown_fin+0xcc>)
 8006a66:	482e      	ldr	r0, [pc, #184]	; (8006b20 <tcp_close_shutdown_fin+0xd0>)
 8006a68:	f008 fccc 	bl	800f404 <iprintf>

  switch (pcb->state) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7d1b      	ldrb	r3, [r3, #20]
 8006a70:	2b07      	cmp	r3, #7
 8006a72:	d020      	beq.n	8006ab6 <tcp_close_shutdown_fin+0x66>
 8006a74:	2b07      	cmp	r3, #7
 8006a76:	dc2b      	bgt.n	8006ad0 <tcp_close_shutdown_fin+0x80>
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d002      	beq.n	8006a82 <tcp_close_shutdown_fin+0x32>
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d00d      	beq.n	8006a9c <tcp_close_shutdown_fin+0x4c>
 8006a80:	e026      	b.n	8006ad0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f004 fd4c 	bl	800b520 <tcp_send_fin>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11f      	bne.n	8006ad4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2205      	movs	r2, #5
 8006a98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006a9a:	e01b      	b.n	8006ad4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f004 fd3f 	bl	800b520 <tcp_send_fin>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d114      	bne.n	8006ad8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ab4:	e010      	b.n	8006ad8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f004 fd32 	bl	800b520 <tcp_send_fin>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2209      	movs	r2, #9
 8006acc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ace:	e005      	b.n	8006adc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e01c      	b.n	8006b0e <tcp_close_shutdown_fin+0xbe>
      break;
 8006ad4:	bf00      	nop
 8006ad6:	e002      	b.n	8006ade <tcp_close_shutdown_fin+0x8e>
      break;
 8006ad8:	bf00      	nop
 8006ada:	e000      	b.n	8006ade <tcp_close_shutdown_fin+0x8e>
      break;
 8006adc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f004 fe58 	bl	800b79c <tcp_output>
 8006aec:	e00d      	b.n	8006b0a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d108      	bne.n	8006b0a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8b5b      	ldrh	r3, [r3, #26]
 8006afc:	f043 0308 	orr.w	r3, r3, #8
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e001      	b.n	8006b0e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	08011360 	.word	0x08011360
 8006b1c:	08011410 	.word	0x08011410
 8006b20:	080113a4 	.word	0x080113a4

08006b24 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <tcp_close+0x22>
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <tcp_close+0x4c>)
 8006b34:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006b38:	490e      	ldr	r1, [pc, #56]	; (8006b74 <tcp_close+0x50>)
 8006b3a:	480f      	ldr	r0, [pc, #60]	; (8006b78 <tcp_close+0x54>)
 8006b3c:	f008 fc62 	bl	800f404 <iprintf>
 8006b40:	f06f 030f 	mvn.w	r3, #15
 8006b44:	e00f      	b.n	8006b66 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7d1b      	ldrb	r3, [r3, #20]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d006      	beq.n	8006b5c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8b5b      	ldrh	r3, [r3, #26]
 8006b52:	f043 0310 	orr.w	r3, r3, #16
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe94 	bl	800688c <tcp_close_shutdown>
 8006b64:	4603      	mov	r3, r0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	08011360 	.word	0x08011360
 8006b74:	08011470 	.word	0x08011470
 8006b78:	080113a4 	.word	0x080113a4

08006b7c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af04      	add	r7, sp, #16
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d107      	bne.n	8006b9c <tcp_abandon+0x20>
 8006b8c:	4b52      	ldr	r3, [pc, #328]	; (8006cd8 <tcp_abandon+0x15c>)
 8006b8e:	f240 223d 	movw	r2, #573	; 0x23d
 8006b92:	4952      	ldr	r1, [pc, #328]	; (8006cdc <tcp_abandon+0x160>)
 8006b94:	4852      	ldr	r0, [pc, #328]	; (8006ce0 <tcp_abandon+0x164>)
 8006b96:	f008 fc35 	bl	800f404 <iprintf>
 8006b9a:	e099      	b.n	8006cd0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d106      	bne.n	8006bb2 <tcp_abandon+0x36>
 8006ba4:	4b4c      	ldr	r3, [pc, #304]	; (8006cd8 <tcp_abandon+0x15c>)
 8006ba6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006baa:	494e      	ldr	r1, [pc, #312]	; (8006ce4 <tcp_abandon+0x168>)
 8006bac:	484c      	ldr	r0, [pc, #304]	; (8006ce0 <tcp_abandon+0x164>)
 8006bae:	f008 fc29 	bl	800f404 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7d1b      	ldrb	r3, [r3, #20]
 8006bb6:	2b0a      	cmp	r3, #10
 8006bb8:	d107      	bne.n	8006bca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	484a      	ldr	r0, [pc, #296]	; (8006ce8 <tcp_abandon+0x16c>)
 8006bbe:	f001 f9d1 	bl	8007f64 <tcp_pcb_remove>
    tcp_free(pcb);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fdb0 	bl	8006728 <tcp_free>
 8006bc8:	e082      	b.n	8006cd0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7d1b      	ldrb	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d126      	bne.n	8006c42 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8adb      	ldrh	r3, [r3, #22]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02e      	beq.n	8006c5a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006bfc:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <tcp_abandon+0x170>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d105      	bne.n	8006c12 <tcp_abandon+0x96>
 8006c06:	4b39      	ldr	r3, [pc, #228]	; (8006cec <tcp_abandon+0x170>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4a37      	ldr	r2, [pc, #220]	; (8006cec <tcp_abandon+0x170>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e013      	b.n	8006c3a <tcp_abandon+0xbe>
 8006c12:	4b36      	ldr	r3, [pc, #216]	; (8006cec <tcp_abandon+0x170>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	e00c      	b.n	8006c34 <tcp_abandon+0xb8>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d104      	bne.n	8006c2e <tcp_abandon+0xb2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	e005      	b.n	8006c3a <tcp_abandon+0xbe>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1ef      	bne.n	8006c1a <tcp_abandon+0x9e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	e00b      	b.n	8006c5a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8adb      	ldrh	r3, [r3, #22]
 8006c4a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4828      	ldr	r0, [pc, #160]	; (8006cf0 <tcp_abandon+0x174>)
 8006c50:	f001 f988 	bl	8007f64 <tcp_pcb_remove>
 8006c54:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <tcp_abandon+0x178>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fe7a 	bl	8007960 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fe71 	bl	8007960 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fe68 	bl	8007960 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	8b12      	ldrh	r2, [r2, #24]
 8006ca0:	9202      	str	r2, [sp, #8]
 8006ca2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f005 fb28 	bl	800c304 <tcp_rst>
    }
    last_state = pcb->state;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	7d1b      	ldrb	r3, [r3, #20]
 8006cb8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fd34 	bl	8006728 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <tcp_abandon+0x154>
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f06f 010c 	mvn.w	r1, #12
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	4798      	blx	r3
  }
}
 8006cd0:	3728      	adds	r7, #40	; 0x28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08011360 	.word	0x08011360
 8006cdc:	080114a4 	.word	0x080114a4
 8006ce0:	080113a4 	.word	0x080113a4
 8006ce4:	080114c0 	.word	0x080114c0
 8006ce8:	2000a468 	.word	0x2000a468
 8006cec:	2000a45c 	.word	0x2000a45c
 8006cf0:	2000a464 	.word	0x2000a464
 8006cf4:	2000a46c 	.word	0x2000a46c

08006cf8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff ff3a 	bl	8006b7c <tcp_abandon>
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <tcp_update_rcv_ann_wnd+0x1c>
 8006d1e:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006d20:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006d24:	4924      	ldr	r1, [pc, #144]	; (8006db8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006d26:	4825      	ldr	r0, [pc, #148]	; (8006dbc <tcp_update_rcv_ann_wnd+0xac>)
 8006d28:	f008 fb6c 	bl	800f404 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006d34:	4413      	add	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006d40:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006d44:	bf28      	it	cs
 8006d46:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	db08      	blt.n	8006d68 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	e020      	b.n	8006daa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd03      	ble.n	8006d7e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d7c:	e014      	b.n	8006da8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d90:	d306      	bcc.n	8006da0 <tcp_update_rcv_ann_wnd+0x90>
 8006d92:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006d94:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006d98:	4909      	ldr	r1, [pc, #36]	; (8006dc0 <tcp_update_rcv_ann_wnd+0xb0>)
 8006d9a:	4808      	ldr	r0, [pc, #32]	; (8006dbc <tcp_update_rcv_ann_wnd+0xac>)
 8006d9c:	f008 fb32 	bl	800f404 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006da8:	2300      	movs	r3, #0
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	08011360 	.word	0x08011360
 8006db8:	080115bc 	.word	0x080115bc
 8006dbc:	080113a4 	.word	0x080113a4
 8006dc0:	080115e0 	.word	0x080115e0

08006dc4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <tcp_recved+0x22>
 8006dd6:	4b1f      	ldr	r3, [pc, #124]	; (8006e54 <tcp_recved+0x90>)
 8006dd8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006ddc:	491e      	ldr	r1, [pc, #120]	; (8006e58 <tcp_recved+0x94>)
 8006dde:	481f      	ldr	r0, [pc, #124]	; (8006e5c <tcp_recved+0x98>)
 8006de0:	f008 fb10 	bl	800f404 <iprintf>
 8006de4:	e032      	b.n	8006e4c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	7d1b      	ldrb	r3, [r3, #20]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d106      	bne.n	8006dfc <tcp_recved+0x38>
 8006dee:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <tcp_recved+0x90>)
 8006df0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006df4:	491a      	ldr	r1, [pc, #104]	; (8006e60 <tcp_recved+0x9c>)
 8006df6:	4819      	ldr	r0, [pc, #100]	; (8006e5c <tcp_recved+0x98>)
 8006df8:	f008 fb04 	bl	800f404 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006e00:	887b      	ldrh	r3, [r7, #2]
 8006e02:	4413      	add	r3, r2
 8006e04:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006e06:	89fb      	ldrh	r3, [r7, #14]
 8006e08:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e0c:	d804      	bhi.n	8006e18 <tcp_recved+0x54>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e12:	89fa      	ldrh	r2, [r7, #14]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d204      	bcs.n	8006e22 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006e1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e20:	e002      	b.n	8006e28 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	89fa      	ldrh	r2, [r7, #14]
 8006e26:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff ff71 	bl	8006d10 <tcp_update_rcv_ann_wnd>
 8006e2e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006e36:	d309      	bcc.n	8006e4c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8b5b      	ldrh	r3, [r3, #26]
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f004 fca8 	bl	800b79c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08011360 	.word	0x08011360
 8006e58:	080115fc 	.word	0x080115fc
 8006e5c:	080113a4 	.word	0x080113a4
 8006e60:	08011614 	.word	0x08011614

08006e64 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006e6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <tcp_new_port+0x84>)
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <tcp_new_port+0x84>)
 8006e78:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ee8 <tcp_new_port+0x84>)
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d103      	bne.n	8006e8e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <tcp_new_port+0x84>)
 8006e88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006e8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006e8e:	2300      	movs	r3, #0
 8006e90:	71fb      	strb	r3, [r7, #7]
 8006e92:	e01e      	b.n	8006ed2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <tcp_new_port+0x88>)
 8006e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	e011      	b.n	8006ec6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	8ada      	ldrh	r2, [r3, #22]
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <tcp_new_port+0x84>)
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d108      	bne.n	8006ec0 <tcp_new_port+0x5c>
        n++;
 8006eae:	88bb      	ldrh	r3, [r7, #4]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006eb4:	88bb      	ldrh	r3, [r7, #4]
 8006eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eba:	d3d8      	bcc.n	8006e6e <tcp_new_port+0xa>
          return 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e00d      	b.n	8006edc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ea      	bne.n	8006ea2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	71fb      	strb	r3, [r7, #7]
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d9dd      	bls.n	8006e94 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <tcp_new_port+0x84>)
 8006eda:	881b      	ldrh	r3, [r3, #0]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	20000020 	.word	0x20000020
 8006eec:	08013338 	.word	0x08013338

08006ef0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <tcp_connect+0x2e>
 8006f0a:	4b7d      	ldr	r3, [pc, #500]	; (8007100 <tcp_connect+0x210>)
 8006f0c:	f240 4235 	movw	r2, #1077	; 0x435
 8006f10:	497c      	ldr	r1, [pc, #496]	; (8007104 <tcp_connect+0x214>)
 8006f12:	487d      	ldr	r0, [pc, #500]	; (8007108 <tcp_connect+0x218>)
 8006f14:	f008 fa76 	bl	800f404 <iprintf>
 8006f18:	f06f 030f 	mvn.w	r3, #15
 8006f1c:	e0ec      	b.n	80070f8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <tcp_connect+0x48>
 8006f24:	4b76      	ldr	r3, [pc, #472]	; (8007100 <tcp_connect+0x210>)
 8006f26:	f240 4236 	movw	r2, #1078	; 0x436
 8006f2a:	4978      	ldr	r1, [pc, #480]	; (800710c <tcp_connect+0x21c>)
 8006f2c:	4876      	ldr	r0, [pc, #472]	; (8007108 <tcp_connect+0x218>)
 8006f2e:	f008 fa69 	bl	800f404 <iprintf>
 8006f32:	f06f 030f 	mvn.w	r3, #15
 8006f36:	e0df      	b.n	80070f8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	7d1b      	ldrb	r3, [r3, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <tcp_connect+0x64>
 8006f40:	4b6f      	ldr	r3, [pc, #444]	; (8007100 <tcp_connect+0x210>)
 8006f42:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8006f46:	4972      	ldr	r1, [pc, #456]	; (8007110 <tcp_connect+0x220>)
 8006f48:	486f      	ldr	r0, [pc, #444]	; (8007108 <tcp_connect+0x218>)
 8006f4a:	f008 fa5b 	bl	800f404 <iprintf>
 8006f4e:	f06f 0309 	mvn.w	r3, #9
 8006f52:	e0d1      	b.n	80070f8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <tcp_connect+0x70>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	e000      	b.n	8006f62 <tcp_connect+0x72>
 8006f60:	2300      	movs	r3, #0
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	7a1b      	ldrb	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	7a1b      	ldrb	r3, [r3, #8]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fd43 	bl	8005a04 <netif_get_by_index>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8006f80:	e005      	b.n	8006f8e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f006 ff5c 	bl	800de44 <ip4_route>
 8006f8c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006f94:	f06f 0303 	mvn.w	r3, #3
 8006f98:	e0ae      	b.n	80070f8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <tcp_connect+0xb8>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d111      	bne.n	8006fcc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <tcp_connect+0xc4>
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	e000      	b.n	8006fb6 <tcp_connect+0xc6>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <tcp_connect+0xd4>
      return ERR_RTE;
 8006fbe:	f06f 0303 	mvn.w	r3, #3
 8006fc2:	e099      	b.n	80070f8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8adb      	ldrh	r3, [r3, #22]
 8006fd0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8adb      	ldrh	r3, [r3, #22]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10c      	bne.n	8006ff4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8006fda:	f7ff ff43 	bl	8006e64 <tcp_new_port>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8adb      	ldrh	r3, [r3, #22]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <tcp_connect+0x104>
      return ERR_BUF;
 8006fee:	f06f 0301 	mvn.w	r3, #1
 8006ff2:	e081      	b.n	80070f8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f001 f849 	bl	800808c <tcp_next_iss>
 8006ffa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1e5a      	subs	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	1e5a      	subs	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800703e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007048:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3304      	adds	r3, #4
 8007052:	461a      	mov	r2, r3
 8007054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007056:	f001 f83f 	bl	80080d8 <tcp_eff_send_mss_netif>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007072:	2102      	movs	r1, #2
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f004 faa3 	bl	800b5c0 <tcp_enqueue_flags>
 800707a:	4603      	mov	r3, r0
 800707c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800707e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d136      	bne.n	80070f4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2202      	movs	r2, #2
 800708a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800708c:	8b7b      	ldrh	r3, [r7, #26]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d021      	beq.n	80070d6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007092:	4b20      	ldr	r3, [pc, #128]	; (8007114 <tcp_connect+0x224>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	429a      	cmp	r2, r3
 800709a:	d105      	bne.n	80070a8 <tcp_connect+0x1b8>
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <tcp_connect+0x224>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <tcp_connect+0x224>)
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	e013      	b.n	80070d0 <tcp_connect+0x1e0>
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <tcp_connect+0x224>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	623b      	str	r3, [r7, #32]
 80070ae:	e00c      	b.n	80070ca <tcp_connect+0x1da>
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d104      	bne.n	80070c4 <tcp_connect+0x1d4>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	e005      	b.n	80070d0 <tcp_connect+0x1e0>
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1ef      	bne.n	80070b0 <tcp_connect+0x1c0>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <tcp_connect+0x228>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	4a0e      	ldr	r2, [pc, #56]	; (8007118 <tcp_connect+0x228>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	f005 fad0 	bl	800c688 <tcp_timer_needed>
 80070e8:	4b0c      	ldr	r3, [pc, #48]	; (800711c <tcp_connect+0x22c>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f004 fb54 	bl	800b79c <tcp_output>
  }
  return ret;
 80070f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	; 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	08011360 	.word	0x08011360
 8007104:	0801163c 	.word	0x0801163c
 8007108:	080113a4 	.word	0x080113a4
 800710c:	08011658 	.word	0x08011658
 8007110:	08011674 	.word	0x08011674
 8007114:	2000a45c 	.word	0x2000a45c
 8007118:	2000a464 	.word	0x2000a464
 800711c:	2000a46c 	.word	0x2000a46c

08007120 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007120:	b5b0      	push	{r4, r5, r7, lr}
 8007122:	b090      	sub	sp, #64	; 0x40
 8007124:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800712c:	4b94      	ldr	r3, [pc, #592]	; (8007380 <tcp_slowtmr+0x260>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a93      	ldr	r2, [pc, #588]	; (8007380 <tcp_slowtmr+0x260>)
 8007134:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007136:	4b93      	ldr	r3, [pc, #588]	; (8007384 <tcp_slowtmr+0x264>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b91      	ldr	r3, [pc, #580]	; (8007384 <tcp_slowtmr+0x264>)
 8007140:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007146:	4b90      	ldr	r3, [pc, #576]	; (8007388 <tcp_slowtmr+0x268>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800714c:	e29f      	b.n	800768e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	7d1b      	ldrb	r3, [r3, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <tcp_slowtmr+0x44>
 8007156:	4b8d      	ldr	r3, [pc, #564]	; (800738c <tcp_slowtmr+0x26c>)
 8007158:	f240 42be 	movw	r2, #1214	; 0x4be
 800715c:	498c      	ldr	r1, [pc, #560]	; (8007390 <tcp_slowtmr+0x270>)
 800715e:	488d      	ldr	r0, [pc, #564]	; (8007394 <tcp_slowtmr+0x274>)
 8007160:	f008 f950 	bl	800f404 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	7d1b      	ldrb	r3, [r3, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <tcp_slowtmr+0x5a>
 800716c:	4b87      	ldr	r3, [pc, #540]	; (800738c <tcp_slowtmr+0x26c>)
 800716e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007172:	4989      	ldr	r1, [pc, #548]	; (8007398 <tcp_slowtmr+0x278>)
 8007174:	4887      	ldr	r0, [pc, #540]	; (8007394 <tcp_slowtmr+0x274>)
 8007176:	f008 f945 	bl	800f404 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	7d1b      	ldrb	r3, [r3, #20]
 800717e:	2b0a      	cmp	r3, #10
 8007180:	d106      	bne.n	8007190 <tcp_slowtmr+0x70>
 8007182:	4b82      	ldr	r3, [pc, #520]	; (800738c <tcp_slowtmr+0x26c>)
 8007184:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007188:	4984      	ldr	r1, [pc, #528]	; (800739c <tcp_slowtmr+0x27c>)
 800718a:	4882      	ldr	r0, [pc, #520]	; (8007394 <tcp_slowtmr+0x274>)
 800718c:	f008 f93a 	bl	800f404 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	7f9a      	ldrb	r2, [r3, #30]
 8007194:	4b7b      	ldr	r3, [pc, #492]	; (8007384 <tcp_slowtmr+0x264>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d105      	bne.n	80071a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80071a6:	e272      	b.n	800768e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80071a8:	4b76      	ldr	r3, [pc, #472]	; (8007384 <tcp_slowtmr+0x264>)
 80071aa:	781a      	ldrb	r2, [r3, #0]
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	7d1b      	ldrb	r3, [r3, #20]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d10a      	bne.n	80071da <tcp_slowtmr+0xba>
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d905      	bls.n	80071da <tcp_slowtmr+0xba>
      ++pcb_remove;
 80071ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d2:	3301      	adds	r3, #1
 80071d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071d8:	e11e      	b.n	8007418 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071e0:	2b0b      	cmp	r3, #11
 80071e2:	d905      	bls.n	80071f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80071e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e8:	3301      	adds	r3, #1
 80071ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071ee:	e113      	b.n	8007418 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d075      	beq.n	80072e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <tcp_slowtmr+0xf0>
 8007202:	4b62      	ldr	r3, [pc, #392]	; (800738c <tcp_slowtmr+0x26c>)
 8007204:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007208:	4965      	ldr	r1, [pc, #404]	; (80073a0 <tcp_slowtmr+0x280>)
 800720a:	4862      	ldr	r0, [pc, #392]	; (8007394 <tcp_slowtmr+0x274>)
 800720c:	f008 f8fa 	bl	800f404 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <tcp_slowtmr+0x106>
 8007218:	4b5c      	ldr	r3, [pc, #368]	; (800738c <tcp_slowtmr+0x26c>)
 800721a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800721e:	4961      	ldr	r1, [pc, #388]	; (80073a4 <tcp_slowtmr+0x284>)
 8007220:	485c      	ldr	r0, [pc, #368]	; (8007394 <tcp_slowtmr+0x274>)
 8007222:	f008 f8ef 	bl	800f404 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800722c:	2b0b      	cmp	r3, #11
 800722e:	d905      	bls.n	800723c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007234:	3301      	adds	r3, #1
 8007236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800723a:	e0ed      	b.n	8007418 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007242:	3b01      	subs	r3, #1
 8007244:	4a58      	ldr	r2, [pc, #352]	; (80073a8 <tcp_slowtmr+0x288>)
 8007246:	5cd3      	ldrb	r3, [r2, r3]
 8007248:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007250:	7c7a      	ldrb	r2, [r7, #17]
 8007252:	429a      	cmp	r2, r3
 8007254:	d907      	bls.n	8007266 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800725c:	3301      	adds	r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800726c:	7c7a      	ldrb	r2, [r7, #17]
 800726e:	429a      	cmp	r2, r3
 8007270:	f200 80d2 	bhi.w	8007418 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007274:	2301      	movs	r3, #1
 8007276:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800727e:	2b00      	cmp	r3, #0
 8007280:	d108      	bne.n	8007294 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007284:	f005 f932 	bl	800c4ec <tcp_zero_window_probe>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d014      	beq.n	80072b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800728e:	2300      	movs	r3, #0
 8007290:	623b      	str	r3, [r7, #32]
 8007292:	e011      	b.n	80072b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800729a:	4619      	mov	r1, r3
 800729c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800729e:	f003 fff7 	bl	800b290 <tcp_split_unsent_seg>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d107      	bne.n	80072b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80072a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072aa:	f004 fa77 	bl	800b79c <tcp_output>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80ac 	beq.w	8007418 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072ce:	2b06      	cmp	r3, #6
 80072d0:	f200 80a2 	bhi.w	8007418 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80072e4:	e098      	b.n	8007418 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db0f      	blt.n	8007310 <tcp_slowtmr+0x1f0>
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80072f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d008      	beq.n	8007310 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007304:	b29b      	uxth	r3, r3
 8007306:	3301      	adds	r3, #1
 8007308:	b29b      	uxth	r3, r3
 800730a:	b21a      	sxth	r2, r3
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800731c:	429a      	cmp	r2, r3
 800731e:	db7b      	blt.n	8007418 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007322:	f004 fd2d 	bl	800bd80 <tcp_rexmit_rto_prepare>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <tcp_slowtmr+0x21c>
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	2b00      	cmp	r3, #0
 8007332:	d171      	bne.n	8007418 <tcp_slowtmr+0x2f8>
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d06d      	beq.n	8007418 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	7d1b      	ldrb	r3, [r3, #20]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d03a      	beq.n	80073ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800734a:	2b0c      	cmp	r3, #12
 800734c:	bf28      	it	cs
 800734e:	230c      	movcs	r3, #12
 8007350:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007358:	10db      	asrs	r3, r3, #3
 800735a:	b21b      	sxth	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007364:	4413      	add	r3, r2
 8007366:	7efa      	ldrb	r2, [r7, #27]
 8007368:	4910      	ldr	r1, [pc, #64]	; (80073ac <tcp_slowtmr+0x28c>)
 800736a:	5c8a      	ldrb	r2, [r1, r2]
 800736c:	4093      	lsls	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007376:	4293      	cmp	r3, r2
 8007378:	dc1a      	bgt.n	80073b0 <tcp_slowtmr+0x290>
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	b21a      	sxth	r2, r3
 800737e:	e019      	b.n	80073b4 <tcp_slowtmr+0x294>
 8007380:	2000a458 	.word	0x2000a458
 8007384:	2000a46e 	.word	0x2000a46e
 8007388:	2000a464 	.word	0x2000a464
 800738c:	08011360 	.word	0x08011360
 8007390:	080116a4 	.word	0x080116a4
 8007394:	080113a4 	.word	0x080113a4
 8007398:	080116d0 	.word	0x080116d0
 800739c:	080116fc 	.word	0x080116fc
 80073a0:	0801172c 	.word	0x0801172c
 80073a4:	08011760 	.word	0x08011760
 80073a8:	08013330 	.word	0x08013330
 80073ac:	08013320 	.word	0x08013320
 80073b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	2200      	movs	r2, #0
 80073be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80073cc:	4293      	cmp	r3, r2
 80073ce:	bf28      	it	cs
 80073d0:	4613      	movcs	r3, r2
 80073d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80073d4:	8a7b      	ldrh	r3, [r7, #18]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d206      	bcs.n	8007400 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	2200      	movs	r2, #0
 800740e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007414:	f004 fd24 	bl	800be60 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	7d1b      	ldrb	r3, [r3, #20]
 800741c:	2b06      	cmp	r3, #6
 800741e:	d111      	bne.n	8007444 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	8b5b      	ldrh	r3, [r3, #26]
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800742c:	4b9d      	ldr	r3, [pc, #628]	; (80076a4 <tcp_slowtmr+0x584>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b28      	cmp	r3, #40	; 0x28
 8007438:	d904      	bls.n	8007444 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800743a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800743e:	3301      	adds	r3, #1
 8007440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	7a5b      	ldrb	r3, [r3, #9]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d04c      	beq.n	80074ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007454:	2b04      	cmp	r3, #4
 8007456:	d003      	beq.n	8007460 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800745c:	2b07      	cmp	r3, #7
 800745e:	d144      	bne.n	80074ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007460:	4b90      	ldr	r3, [pc, #576]	; (80076a4 <tcp_slowtmr+0x584>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007470:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007474:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007478:	498b      	ldr	r1, [pc, #556]	; (80076a8 <tcp_slowtmr+0x588>)
 800747a:	fba1 1303 	umull	r1, r3, r1, r3
 800747e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007480:	429a      	cmp	r2, r3
 8007482:	d90a      	bls.n	800749a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007488:	3301      	adds	r3, #1
 800748a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800748e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007492:	3301      	adds	r3, #1
 8007494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007498:	e027      	b.n	80074ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800749a:	4b82      	ldr	r3, [pc, #520]	; (80076a4 <tcp_slowtmr+0x584>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80074b0:	4618      	mov	r0, r3
 80074b2:	4b7e      	ldr	r3, [pc, #504]	; (80076ac <tcp_slowtmr+0x58c>)
 80074b4:	fb00 f303 	mul.w	r3, r0, r3
 80074b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80074ba:	497b      	ldr	r1, [pc, #492]	; (80076a8 <tcp_slowtmr+0x588>)
 80074bc:	fba1 1303 	umull	r1, r3, r1, r3
 80074c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d911      	bls.n	80074ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80074c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074c8:	f004 ffd0 	bl	800c46c <tcp_keepalive>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80074d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d107      	bne.n	80074ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80074e0:	3301      	adds	r3, #1
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d011      	beq.n	8007516 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80074f2:	4b6c      	ldr	r3, [pc, #432]	; (80076a4 <tcp_slowtmr+0x584>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007502:	4619      	mov	r1, r3
 8007504:	460b      	mov	r3, r1
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	440b      	add	r3, r1
 800750a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800750c:	429a      	cmp	r2, r3
 800750e:	d302      	bcc.n	8007516 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007512:	f000 fe8b 	bl	800822c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	7d1b      	ldrb	r3, [r3, #20]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d10b      	bne.n	8007536 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800751e:	4b61      	ldr	r3, [pc, #388]	; (80076a4 <tcp_slowtmr+0x584>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b28      	cmp	r3, #40	; 0x28
 800752a:	d904      	bls.n	8007536 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007530:	3301      	adds	r3, #1
 8007532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	7d1b      	ldrb	r3, [r3, #20]
 800753a:	2b09      	cmp	r3, #9
 800753c:	d10b      	bne.n	8007556 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <tcp_slowtmr+0x584>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2bf0      	cmp	r3, #240	; 0xf0
 800754a:	d904      	bls.n	8007556 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007550:	3301      	adds	r3, #1
 8007552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755a:	2b00      	cmp	r3, #0
 800755c:	d060      	beq.n	8007620 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007564:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007568:	f000 fcac 	bl	8007ec4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	d010      	beq.n	8007594 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007572:	4b4f      	ldr	r3, [pc, #316]	; (80076b0 <tcp_slowtmr+0x590>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007578:	429a      	cmp	r2, r3
 800757a:	d106      	bne.n	800758a <tcp_slowtmr+0x46a>
 800757c:	4b4d      	ldr	r3, [pc, #308]	; (80076b4 <tcp_slowtmr+0x594>)
 800757e:	f240 526d 	movw	r2, #1389	; 0x56d
 8007582:	494d      	ldr	r1, [pc, #308]	; (80076b8 <tcp_slowtmr+0x598>)
 8007584:	484d      	ldr	r0, [pc, #308]	; (80076bc <tcp_slowtmr+0x59c>)
 8007586:	f007 ff3d 	bl	800f404 <iprintf>
        prev->next = pcb->next;
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	60da      	str	r2, [r3, #12]
 8007592:	e00f      	b.n	80075b4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007594:	4b46      	ldr	r3, [pc, #280]	; (80076b0 <tcp_slowtmr+0x590>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759a:	429a      	cmp	r2, r3
 800759c:	d006      	beq.n	80075ac <tcp_slowtmr+0x48c>
 800759e:	4b45      	ldr	r3, [pc, #276]	; (80076b4 <tcp_slowtmr+0x594>)
 80075a0:	f240 5271 	movw	r2, #1393	; 0x571
 80075a4:	4946      	ldr	r1, [pc, #280]	; (80076c0 <tcp_slowtmr+0x5a0>)
 80075a6:	4845      	ldr	r0, [pc, #276]	; (80076bc <tcp_slowtmr+0x59c>)
 80075a8:	f007 ff2c 	bl	800f404 <iprintf>
        tcp_active_pcbs = pcb->next;
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4a3f      	ldr	r2, [pc, #252]	; (80076b0 <tcp_slowtmr+0x590>)
 80075b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80075b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80075c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	3304      	adds	r3, #4
 80075ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075cc:	8ad2      	ldrh	r2, [r2, #22]
 80075ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d0:	8b09      	ldrh	r1, [r1, #24]
 80075d2:	9102      	str	r1, [sp, #8]
 80075d4:	9201      	str	r2, [sp, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	462b      	mov	r3, r5
 80075da:	4622      	mov	r2, r4
 80075dc:	4601      	mov	r1, r0
 80075de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075e0:	f004 fe90 	bl	800c304 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	7d1b      	ldrb	r3, [r3, #20]
 80075ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80075fa:	6838      	ldr	r0, [r7, #0]
 80075fc:	f7ff f894 	bl	8006728 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007600:	4b30      	ldr	r3, [pc, #192]	; (80076c4 <tcp_slowtmr+0x5a4>)
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <tcp_slowtmr+0x4f6>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f06f 010c 	mvn.w	r1, #12
 8007612:	68b8      	ldr	r0, [r7, #8]
 8007614:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007616:	4b2b      	ldr	r3, [pc, #172]	; (80076c4 <tcp_slowtmr+0x5a4>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d037      	beq.n	800768e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800761e:	e590      	b.n	8007142 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	7f1b      	ldrb	r3, [r3, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	b2da      	uxtb	r2, r3
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	7f1a      	ldrb	r2, [r3, #28]
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	7f5b      	ldrb	r3, [r3, #29]
 800763e:	429a      	cmp	r2, r3
 8007640:	d325      	bcc.n	800768e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007648:	4b1e      	ldr	r3, [pc, #120]	; (80076c4 <tcp_slowtmr+0x5a4>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <tcp_slowtmr+0x550>
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800765e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007660:	6912      	ldr	r2, [r2, #16]
 8007662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800766e:	e002      	b.n	8007676 <tcp_slowtmr+0x556>
 8007670:	2300      	movs	r3, #0
 8007672:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <tcp_slowtmr+0x5a4>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d000      	beq.n	8007680 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800767e:	e560      	b.n	8007142 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007680:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768a:	f004 f887 	bl	800b79c <tcp_output>
  while (pcb != NULL) {
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f ad5c 	bne.w	800714e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <tcp_slowtmr+0x5a8>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80076a0:	e067      	b.n	8007772 <tcp_slowtmr+0x652>
 80076a2:	bf00      	nop
 80076a4:	2000a458 	.word	0x2000a458
 80076a8:	10624dd3 	.word	0x10624dd3
 80076ac:	000124f8 	.word	0x000124f8
 80076b0:	2000a464 	.word	0x2000a464
 80076b4:	08011360 	.word	0x08011360
 80076b8:	08011798 	.word	0x08011798
 80076bc:	080113a4 	.word	0x080113a4
 80076c0:	080117c4 	.word	0x080117c4
 80076c4:	2000a46c 	.word	0x2000a46c
 80076c8:	2000a468 	.word	0x2000a468
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	7d1b      	ldrb	r3, [r3, #20]
 80076d0:	2b0a      	cmp	r3, #10
 80076d2:	d006      	beq.n	80076e2 <tcp_slowtmr+0x5c2>
 80076d4:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <tcp_slowtmr+0x664>)
 80076d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80076da:	492b      	ldr	r1, [pc, #172]	; (8007788 <tcp_slowtmr+0x668>)
 80076dc:	482b      	ldr	r0, [pc, #172]	; (800778c <tcp_slowtmr+0x66c>)
 80076de:	f007 fe91 	bl	800f404 <iprintf>
    pcb_remove = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <tcp_slowtmr+0x670>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2bf0      	cmp	r3, #240	; 0xf0
 80076f4:	d904      	bls.n	8007700 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80076f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076fa:	3301      	adds	r3, #1
 80076fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02f      	beq.n	8007768 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800770a:	f000 fbdb 	bl	8007ec4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	2b00      	cmp	r3, #0
 8007712:	d010      	beq.n	8007736 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007714:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <tcp_slowtmr+0x674>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771a:	429a      	cmp	r2, r3
 800771c:	d106      	bne.n	800772c <tcp_slowtmr+0x60c>
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <tcp_slowtmr+0x664>)
 8007720:	f240 52af 	movw	r2, #1455	; 0x5af
 8007724:	491c      	ldr	r1, [pc, #112]	; (8007798 <tcp_slowtmr+0x678>)
 8007726:	4819      	ldr	r0, [pc, #100]	; (800778c <tcp_slowtmr+0x66c>)
 8007728:	f007 fe6c 	bl	800f404 <iprintf>
        prev->next = pcb->next;
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	e00f      	b.n	8007756 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007736:	4b17      	ldr	r3, [pc, #92]	; (8007794 <tcp_slowtmr+0x674>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800773c:	429a      	cmp	r2, r3
 800773e:	d006      	beq.n	800774e <tcp_slowtmr+0x62e>
 8007740:	4b10      	ldr	r3, [pc, #64]	; (8007784 <tcp_slowtmr+0x664>)
 8007742:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007746:	4915      	ldr	r1, [pc, #84]	; (800779c <tcp_slowtmr+0x67c>)
 8007748:	4810      	ldr	r0, [pc, #64]	; (800778c <tcp_slowtmr+0x66c>)
 800774a:	f007 fe5b 	bl	800f404 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <tcp_slowtmr+0x674>)
 8007754:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007760:	69f8      	ldr	r0, [r7, #28]
 8007762:	f7fe ffe1 	bl	8006728 <tcp_free>
 8007766:	e004      	b.n	8007772 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1a9      	bne.n	80076cc <tcp_slowtmr+0x5ac>
    }
  }
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3730      	adds	r7, #48	; 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bdb0      	pop	{r4, r5, r7, pc}
 8007782:	bf00      	nop
 8007784:	08011360 	.word	0x08011360
 8007788:	080117f0 	.word	0x080117f0
 800778c:	080113a4 	.word	0x080113a4
 8007790:	2000a458 	.word	0x2000a458
 8007794:	2000a468 	.word	0x2000a468
 8007798:	08011820 	.word	0x08011820
 800779c:	08011848 	.word	0x08011848

080077a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80077a6:	4b2d      	ldr	r3, [pc, #180]	; (800785c <tcp_fasttmr+0xbc>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	4b2b      	ldr	r3, [pc, #172]	; (800785c <tcp_fasttmr+0xbc>)
 80077b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80077b2:	4b2b      	ldr	r3, [pc, #172]	; (8007860 <tcp_fasttmr+0xc0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80077b8:	e048      	b.n	800784c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	7f9a      	ldrb	r2, [r3, #30]
 80077be:	4b27      	ldr	r3, [pc, #156]	; (800785c <tcp_fasttmr+0xbc>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d03f      	beq.n	8007846 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80077c6:	4b25      	ldr	r3, [pc, #148]	; (800785c <tcp_fasttmr+0xbc>)
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	8b5b      	ldrh	r3, [r3, #26]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d010      	beq.n	80077fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8b5b      	ldrh	r3, [r3, #26]
 80077de:	f043 0302 	orr.w	r3, r3, #2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f003 ffd7 	bl	800b79c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8b5b      	ldrh	r3, [r3, #26]
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8b5b      	ldrh	r3, [r3, #26]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	8b5b      	ldrh	r3, [r3, #26]
 800780c:	f023 0308 	bic.w	r3, r3, #8
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff f91a 	bl	8006a50 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <tcp_fasttmr+0xc4>)
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f819 	bl	8007868 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <tcp_fasttmr+0xc4>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d000      	beq.n	8007840 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800783e:	e7b8      	b.n	80077b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	e002      	b.n	800784c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1b3      	bne.n	80077ba <tcp_fasttmr+0x1a>
    }
  }
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	2000a46e 	.word	0x2000a46e
 8007860:	2000a464 	.word	0x2000a464
 8007864:	2000a46c 	.word	0x2000a46c

08007868 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <tcp_process_refused_data+0x22>
 8007876:	4b37      	ldr	r3, [pc, #220]	; (8007954 <tcp_process_refused_data+0xec>)
 8007878:	f240 6209 	movw	r2, #1545	; 0x609
 800787c:	4936      	ldr	r1, [pc, #216]	; (8007958 <tcp_process_refused_data+0xf0>)
 800787e:	4837      	ldr	r0, [pc, #220]	; (800795c <tcp_process_refused_data+0xf4>)
 8007880:	f007 fdc0 	bl	800f404 <iprintf>
 8007884:	f06f 030f 	mvn.w	r3, #15
 8007888:	e060      	b.n	800794c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800788e:	7b5b      	ldrb	r3, [r3, #13]
 8007890:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007896:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <tcp_process_refused_data+0x58>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6918      	ldr	r0, [r3, #16]
 80078b2:	2300      	movs	r3, #0
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	47a0      	blx	r4
 80078ba:	4603      	mov	r3, r0
 80078bc:	73fb      	strb	r3, [r7, #15]
 80078be:	e007      	b.n	80078d0 <tcp_process_refused_data+0x68>
 80078c0:	2300      	movs	r3, #0
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	2000      	movs	r0, #0
 80078c8:	f000 f8a4 	bl	8007a14 <tcp_recv_null>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80078d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d12a      	bne.n	800792e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d033      	beq.n	800794a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80078ea:	d005      	beq.n	80078f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f0:	3301      	adds	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <tcp_process_refused_data+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6918      	ldr	r0, [r3, #16]
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	47a0      	blx	r4
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	e001      	b.n	800791e <tcp_process_refused_data+0xb6>
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800791e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007922:	f113 0f0d 	cmn.w	r3, #13
 8007926:	d110      	bne.n	800794a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007928:	f06f 030c 	mvn.w	r3, #12
 800792c:	e00e      	b.n	800794c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800792e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007932:	f113 0f0d 	cmn.w	r3, #13
 8007936:	d102      	bne.n	800793e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007938:	f06f 030c 	mvn.w	r3, #12
 800793c:	e006      	b.n	800794c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007944:	f06f 0304 	mvn.w	r3, #4
 8007948:	e000      	b.n	800794c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	bd90      	pop	{r4, r7, pc}
 8007954:	08011360 	.word	0x08011360
 8007958:	08011870 	.word	0x08011870
 800795c:	080113a4 	.word	0x080113a4

08007960 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007968:	e007      	b.n	800797a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f80a 	bl	800798a <tcp_seg_free>
    seg = next;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f4      	bne.n	800796a <tcp_segs_free+0xa>
  }
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00c      	beq.n	80079b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fb8d 	bl	80060c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	2003      	movs	r0, #3
 80079ae:	f7fd fd13 	bl	80053d8 <memp_free>
  }
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <tcp_seg_copy+0x1c>
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <tcp_seg_copy+0x4c>)
 80079cc:	f240 6282 	movw	r2, #1666	; 0x682
 80079d0:	490e      	ldr	r1, [pc, #56]	; (8007a0c <tcp_seg_copy+0x50>)
 80079d2:	480f      	ldr	r0, [pc, #60]	; (8007a10 <tcp_seg_copy+0x54>)
 80079d4:	f007 fd16 	bl	800f404 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80079d8:	2003      	movs	r0, #3
 80079da:	f7fd fc8d 	bl	80052f8 <memp_malloc>
 80079de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <tcp_seg_copy+0x2e>
    return NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e00a      	b.n	8007a00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80079ea:	2210      	movs	r2, #16
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f007 fcd8 	bl	800f3a4 <memcpy>
  pbuf_ref(cseg->p);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fc03 	bl	8006204 <pbuf_ref>
  return cseg;
 80079fe:	68fb      	ldr	r3, [r7, #12]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	08011360 	.word	0x08011360
 8007a0c:	080118b4 	.word	0x080118b4
 8007a10:	080113a4 	.word	0x080113a4

08007a14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <tcp_recv_null+0x28>
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <tcp_recv_null+0x60>)
 8007a2a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007a2e:	4912      	ldr	r1, [pc, #72]	; (8007a78 <tcp_recv_null+0x64>)
 8007a30:	4812      	ldr	r0, [pc, #72]	; (8007a7c <tcp_recv_null+0x68>)
 8007a32:	f007 fce7 	bl	800f404 <iprintf>
 8007a36:	f06f 030f 	mvn.w	r3, #15
 8007a3a:	e016      	b.n	8007a6a <tcp_recv_null+0x56>

  if (p != NULL) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	891b      	ldrh	r3, [r3, #8]
 8007a46:	4619      	mov	r1, r3
 8007a48:	68b8      	ldr	r0, [r7, #8]
 8007a4a:	f7ff f9bb 	bl	8006dc4 <tcp_recved>
    pbuf_free(p);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fe fb38 	bl	80060c4 <pbuf_free>
 8007a54:	e008      	b.n	8007a68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007a5e:	68b8      	ldr	r0, [r7, #8]
 8007a60:	f7ff f860 	bl	8006b24 <tcp_close>
 8007a64:	4603      	mov	r3, r0
 8007a66:	e000      	b.n	8007a6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	08011360 	.word	0x08011360
 8007a78:	080118d0 	.word	0x080118d0
 8007a7c:	080113a4 	.word	0x080113a4

08007a80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	db01      	blt.n	8007a96 <tcp_kill_prio+0x16>
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	e000      	b.n	8007a98 <tcp_kill_prio+0x18>
 8007a96:	237f      	movs	r3, #127	; 0x7f
 8007a98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d034      	beq.n	8007b0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aae:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <tcp_kill_prio+0x94>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e01f      	b.n	8007af6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	7d5b      	ldrb	r3, [r3, #21]
 8007aba:	7afa      	ldrb	r2, [r7, #11]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d80c      	bhi.n	8007ada <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007ac4:	7afa      	ldrb	r2, [r7, #11]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d112      	bne.n	8007af0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007aca:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <tcp_kill_prio+0x98>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d80a      	bhi.n	8007af0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <tcp_kill_prio+0x98>)
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	7d5b      	ldrb	r3, [r3, #21]
 8007aee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1dc      	bne.n	8007ab6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b02:	6938      	ldr	r0, [r7, #16]
 8007b04:	f7ff f8f8 	bl	8006cf8 <tcp_abort>
 8007b08:	e000      	b.n	8007b0c <tcp_kill_prio+0x8c>
    return;
 8007b0a:	bf00      	nop
  }
}
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	2000a464 	.word	0x2000a464
 8007b18:	2000a458 	.word	0x2000a458

08007b1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d009      	beq.n	8007b40 <tcp_kill_state+0x24>
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	d006      	beq.n	8007b40 <tcp_kill_state+0x24>
 8007b32:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <tcp_kill_state+0x80>)
 8007b34:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007b38:	4919      	ldr	r1, [pc, #100]	; (8007ba0 <tcp_kill_state+0x84>)
 8007b3a:	481a      	ldr	r0, [pc, #104]	; (8007ba4 <tcp_kill_state+0x88>)
 8007b3c:	f007 fc62 	bl	800f404 <iprintf>

  inactivity = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <tcp_kill_state+0x8c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	e017      	b.n	8007b80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	7d1b      	ldrb	r3, [r3, #20]
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d10f      	bne.n	8007b7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b5a:	4b14      	ldr	r3, [pc, #80]	; (8007bac <tcp_kill_state+0x90>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d807      	bhi.n	8007b7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007b6a:	4b10      	ldr	r3, [pc, #64]	; (8007bac <tcp_kill_state+0x90>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e4      	bne.n	8007b50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6938      	ldr	r0, [r7, #16]
 8007b90:	f7fe fff4 	bl	8006b7c <tcp_abandon>
  }
}
 8007b94:	bf00      	nop
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	08011360 	.word	0x08011360
 8007ba0:	080118ec 	.word	0x080118ec
 8007ba4:	080113a4 	.word	0x080113a4
 8007ba8:	2000a464 	.word	0x2000a464
 8007bac:	2000a458 	.word	0x2000a458

08007bb0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bbe:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <tcp_kill_timewait+0x58>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e012      	b.n	8007bec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007bc6:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <tcp_kill_timewait+0x5c>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d807      	bhi.n	8007be6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <tcp_kill_timewait+0x5c>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e9      	bne.n	8007bc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007bf8:	68b8      	ldr	r0, [r7, #8]
 8007bfa:	f7ff f87d 	bl	8006cf8 <tcp_abort>
  }
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	2000a468 	.word	0x2000a468
 8007c0c:	2000a458 	.word	0x2000a458

08007c10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007c16:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <tcp_handle_closepend+0x48>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c1c:	e014      	b.n	8007c48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8b5b      	ldrh	r3, [r3, #26]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d009      	beq.n	8007c44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8b5b      	ldrh	r3, [r3, #26]
 8007c34:	f023 0308 	bic.w	r3, r3, #8
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fe ff06 	bl	8006a50 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e7      	bne.n	8007c1e <tcp_handle_closepend+0xe>
  }
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	2000a464 	.word	0x2000a464

08007c5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c66:	2001      	movs	r0, #1
 8007c68:	f7fd fb46 	bl	80052f8 <memp_malloc>
 8007c6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d126      	bne.n	8007cc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007c74:	f7ff ffcc 	bl	8007c10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007c78:	f7ff ff9a 	bl	8007bb0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f7fd fb3b 	bl	80052f8 <memp_malloc>
 8007c82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11b      	bne.n	8007cc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007c8a:	2009      	movs	r0, #9
 8007c8c:	f7ff ff46 	bl	8007b1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c90:	2001      	movs	r0, #1
 8007c92:	f7fd fb31 	bl	80052f8 <memp_malloc>
 8007c96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d111      	bne.n	8007cc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007c9e:	2008      	movs	r0, #8
 8007ca0:	f7ff ff3c 	bl	8007b1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7fd fb27 	bl	80052f8 <memp_malloc>
 8007caa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff fee3 	bl	8007a80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cba:	2001      	movs	r0, #1
 8007cbc:	f7fd fb1c 	bl	80052f8 <memp_malloc>
 8007cc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d03f      	beq.n	8007d48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007cc8:	229c      	movs	r2, #156	; 0x9c
 8007cca:	2100      	movs	r1, #0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f007 fb91 	bl	800f3f4 <memset>
    pcb->prio = prio;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	79fa      	ldrb	r2, [r7, #7]
 8007cd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007cde:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007cfe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2206      	movs	r2, #6
 8007d04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2206      	movs	r2, #6
 8007d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d14:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <tcp_alloc+0xf8>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <tcp_alloc+0xfc>)
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007d34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <tcp_alloc+0x100>)
 8007d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a07      	ldr	r2, [pc, #28]	; (8007d60 <tcp_alloc+0x104>)
 8007d44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000a458 	.word	0x2000a458
 8007d58:	2000a46e 	.word	0x2000a46e
 8007d5c:	08007a15 	.word	0x08007a15
 8007d60:	006ddd00 	.word	0x006ddd00

08007d64 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007d68:	2040      	movs	r0, #64	; 0x40
 8007d6a:	f7ff ff77 	bl	8007c5c <tcp_alloc>
 8007d6e:	4603      	mov	r3, r0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	611a      	str	r2, [r3, #16]
  }
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7d1b      	ldrb	r3, [r3, #20]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d106      	bne.n	8007dbe <tcp_recv+0x26>
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <tcp_recv+0x38>)
 8007db2:	f240 72df 	movw	r2, #2015	; 0x7df
 8007db6:	4907      	ldr	r1, [pc, #28]	; (8007dd4 <tcp_recv+0x3c>)
 8007db8:	4807      	ldr	r0, [pc, #28]	; (8007dd8 <tcp_recv+0x40>)
 8007dba:	f007 fb23 	bl	800f404 <iprintf>
    pcb->recv = recv;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08011360 	.word	0x08011360
 8007dd4:	080118fc 	.word	0x080118fc
 8007dd8:	080113a4 	.word	0x080113a4

08007ddc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00e      	beq.n	8007e0a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7d1b      	ldrb	r3, [r3, #20]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d106      	bne.n	8007e02 <tcp_sent+0x26>
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <tcp_sent+0x38>)
 8007df6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007dfa:	4907      	ldr	r1, [pc, #28]	; (8007e18 <tcp_sent+0x3c>)
 8007dfc:	4807      	ldr	r0, [pc, #28]	; (8007e1c <tcp_sent+0x40>)
 8007dfe:	f007 fb01 	bl	800f404 <iprintf>
    pcb->sent = sent;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	08011360 	.word	0x08011360
 8007e18:	08011924 	.word	0x08011924
 8007e1c:	080113a4 	.word	0x080113a4

08007e20 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00e      	beq.n	8007e4e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7d1b      	ldrb	r3, [r3, #20]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d106      	bne.n	8007e46 <tcp_err+0x26>
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <tcp_err+0x38>)
 8007e3a:	f640 020d 	movw	r2, #2061	; 0x80d
 8007e3e:	4907      	ldr	r1, [pc, #28]	; (8007e5c <tcp_err+0x3c>)
 8007e40:	4807      	ldr	r0, [pc, #28]	; (8007e60 <tcp_err+0x40>)
 8007e42:	f007 fadf 	bl	800f404 <iprintf>
    pcb->errf = err;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08011360 	.word	0x08011360
 8007e5c:	0801194c 	.word	0x0801194c
 8007e60:	080113a4 	.word	0x080113a4

08007e64 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d107      	bne.n	8007e88 <tcp_poll+0x24>
 8007e78:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <tcp_poll+0x50>)
 8007e7a:	f640 023d 	movw	r2, #2109	; 0x83d
 8007e7e:	490e      	ldr	r1, [pc, #56]	; (8007eb8 <tcp_poll+0x54>)
 8007e80:	480e      	ldr	r0, [pc, #56]	; (8007ebc <tcp_poll+0x58>)
 8007e82:	f007 fabf 	bl	800f404 <iprintf>
 8007e86:	e011      	b.n	8007eac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	7d1b      	ldrb	r3, [r3, #20]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d106      	bne.n	8007e9e <tcp_poll+0x3a>
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <tcp_poll+0x50>)
 8007e92:	f640 023e 	movw	r2, #2110	; 0x83e
 8007e96:	490a      	ldr	r1, [pc, #40]	; (8007ec0 <tcp_poll+0x5c>)
 8007e98:	4808      	ldr	r0, [pc, #32]	; (8007ebc <tcp_poll+0x58>)
 8007e9a:	f007 fab3 	bl	800f404 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	79fa      	ldrb	r2, [r7, #7]
 8007eaa:	775a      	strb	r2, [r3, #29]
}
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08011360 	.word	0x08011360
 8007eb8:	08011974 	.word	0x08011974
 8007ebc:	080113a4 	.word	0x080113a4
 8007ec0:	0801198c 	.word	0x0801198c

08007ec4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <tcp_pcb_purge+0x1e>
 8007ed2:	4b21      	ldr	r3, [pc, #132]	; (8007f58 <tcp_pcb_purge+0x94>)
 8007ed4:	f640 0251 	movw	r2, #2129	; 0x851
 8007ed8:	4920      	ldr	r1, [pc, #128]	; (8007f5c <tcp_pcb_purge+0x98>)
 8007eda:	4821      	ldr	r0, [pc, #132]	; (8007f60 <tcp_pcb_purge+0x9c>)
 8007edc:	f007 fa92 	bl	800f404 <iprintf>
 8007ee0:	e037      	b.n	8007f52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7d1b      	ldrb	r3, [r3, #20]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d033      	beq.n	8007f52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007eee:	2b0a      	cmp	r3, #10
 8007ef0:	d02f      	beq.n	8007f52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d02b      	beq.n	8007f52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe f8dc 	bl	80060c4 <pbuf_free>
      pcb->refused_data = NULL;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f986 	bl	800822c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fd17 	bl	8007960 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fd12 	bl	8007960 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	08011360 	.word	0x08011360
 8007f5c:	080119ac 	.word	0x080119ac
 8007f60:	080113a4 	.word	0x080113a4

08007f64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d106      	bne.n	8007f82 <tcp_pcb_remove+0x1e>
 8007f74:	4b3e      	ldr	r3, [pc, #248]	; (8008070 <tcp_pcb_remove+0x10c>)
 8007f76:	f640 0283 	movw	r2, #2179	; 0x883
 8007f7a:	493e      	ldr	r1, [pc, #248]	; (8008074 <tcp_pcb_remove+0x110>)
 8007f7c:	483e      	ldr	r0, [pc, #248]	; (8008078 <tcp_pcb_remove+0x114>)
 8007f7e:	f007 fa41 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <tcp_pcb_remove+0x32>
 8007f88:	4b39      	ldr	r3, [pc, #228]	; (8008070 <tcp_pcb_remove+0x10c>)
 8007f8a:	f640 0284 	movw	r2, #2180	; 0x884
 8007f8e:	493b      	ldr	r1, [pc, #236]	; (800807c <tcp_pcb_remove+0x118>)
 8007f90:	4839      	ldr	r0, [pc, #228]	; (8008078 <tcp_pcb_remove+0x114>)
 8007f92:	f007 fa37 	bl	800f404 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d105      	bne.n	8007fac <tcp_pcb_remove+0x48>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e013      	b.n	8007fd4 <tcp_pcb_remove+0x70>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e00c      	b.n	8007fce <tcp_pcb_remove+0x6a>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d104      	bne.n	8007fc8 <tcp_pcb_remove+0x64>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	e005      	b.n	8007fd4 <tcp_pcb_remove+0x70>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1ef      	bne.n	8007fb4 <tcp_pcb_remove+0x50>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007fda:	6838      	ldr	r0, [r7, #0]
 8007fdc:	f7ff ff72 	bl	8007ec4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	7d1b      	ldrb	r3, [r3, #20]
 8007fe4:	2b0a      	cmp	r3, #10
 8007fe6:	d013      	beq.n	8008010 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d00f      	beq.n	8008010 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	8b5b      	ldrh	r3, [r3, #26]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	8b5b      	ldrh	r3, [r3, #26]
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	b29a      	uxth	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800800a:	6838      	ldr	r0, [r7, #0]
 800800c:	f003 fbc6 	bl	800b79c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	7d1b      	ldrb	r3, [r3, #20]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d020      	beq.n	800805a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d006      	beq.n	800802e <tcp_pcb_remove+0xca>
 8008020:	4b13      	ldr	r3, [pc, #76]	; (8008070 <tcp_pcb_remove+0x10c>)
 8008022:	f640 0293 	movw	r2, #2195	; 0x893
 8008026:	4916      	ldr	r1, [pc, #88]	; (8008080 <tcp_pcb_remove+0x11c>)
 8008028:	4813      	ldr	r0, [pc, #76]	; (8008078 <tcp_pcb_remove+0x114>)
 800802a:	f007 f9eb 	bl	800f404 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	2b00      	cmp	r3, #0
 8008034:	d006      	beq.n	8008044 <tcp_pcb_remove+0xe0>
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <tcp_pcb_remove+0x10c>)
 8008038:	f640 0294 	movw	r2, #2196	; 0x894
 800803c:	4911      	ldr	r1, [pc, #68]	; (8008084 <tcp_pcb_remove+0x120>)
 800803e:	480e      	ldr	r0, [pc, #56]	; (8008078 <tcp_pcb_remove+0x114>)
 8008040:	f007 f9e0 	bl	800f404 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008048:	2b00      	cmp	r3, #0
 800804a:	d006      	beq.n	800805a <tcp_pcb_remove+0xf6>
 800804c:	4b08      	ldr	r3, [pc, #32]	; (8008070 <tcp_pcb_remove+0x10c>)
 800804e:	f640 0296 	movw	r2, #2198	; 0x896
 8008052:	490d      	ldr	r1, [pc, #52]	; (8008088 <tcp_pcb_remove+0x124>)
 8008054:	4808      	ldr	r0, [pc, #32]	; (8008078 <tcp_pcb_remove+0x114>)
 8008056:	f007 f9d5 	bl	800f404 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2200      	movs	r2, #0
 800805e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008066:	bf00      	nop
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	08011360 	.word	0x08011360
 8008074:	080119c8 	.word	0x080119c8
 8008078:	080113a4 	.word	0x080113a4
 800807c:	080119e4 	.word	0x080119e4
 8008080:	08011a04 	.word	0x08011a04
 8008084:	08011a1c 	.word	0x08011a1c
 8008088:	08011a38 	.word	0x08011a38

0800808c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <tcp_next_iss+0x1c>
 800809a:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <tcp_next_iss+0x38>)
 800809c:	f640 02af 	movw	r2, #2223	; 0x8af
 80080a0:	4909      	ldr	r1, [pc, #36]	; (80080c8 <tcp_next_iss+0x3c>)
 80080a2:	480a      	ldr	r0, [pc, #40]	; (80080cc <tcp_next_iss+0x40>)
 80080a4:	f007 f9ae 	bl	800f404 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80080a8:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <tcp_next_iss+0x44>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <tcp_next_iss+0x48>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4413      	add	r3, r2
 80080b2:	4a07      	ldr	r2, [pc, #28]	; (80080d0 <tcp_next_iss+0x44>)
 80080b4:	6013      	str	r3, [r2, #0]
  return iss;
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <tcp_next_iss+0x44>)
 80080b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	08011360 	.word	0x08011360
 80080c8:	08011a50 	.word	0x08011a50
 80080cc:	080113a4 	.word	0x080113a4
 80080d0:	20000024 	.word	0x20000024
 80080d4:	2000a458 	.word	0x2000a458

080080d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <tcp_eff_send_mss_netif+0x22>
 80080ec:	4b14      	ldr	r3, [pc, #80]	; (8008140 <tcp_eff_send_mss_netif+0x68>)
 80080ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80080f2:	4914      	ldr	r1, [pc, #80]	; (8008144 <tcp_eff_send_mss_netif+0x6c>)
 80080f4:	4814      	ldr	r0, [pc, #80]	; (8008148 <tcp_eff_send_mss_netif+0x70>)
 80080f6:	f007 f985 	bl	800f404 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008100:	89fb      	ldrh	r3, [r7, #14]
 8008102:	e019      	b.n	8008138 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008108:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800810a:	8afb      	ldrh	r3, [r7, #22]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008110:	2328      	movs	r3, #40	; 0x28
 8008112:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008114:	8afa      	ldrh	r2, [r7, #22]
 8008116:	8abb      	ldrh	r3, [r7, #20]
 8008118:	429a      	cmp	r2, r3
 800811a:	d904      	bls.n	8008126 <tcp_eff_send_mss_netif+0x4e>
 800811c:	8afa      	ldrh	r2, [r7, #22]
 800811e:	8abb      	ldrh	r3, [r7, #20]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	b29b      	uxth	r3, r3
 8008124:	e000      	b.n	8008128 <tcp_eff_send_mss_netif+0x50>
 8008126:	2300      	movs	r3, #0
 8008128:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800812a:	8a7a      	ldrh	r2, [r7, #18]
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	4293      	cmp	r3, r2
 8008130:	bf28      	it	cs
 8008132:	4613      	movcs	r3, r2
 8008134:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008136:	89fb      	ldrh	r3, [r7, #14]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08011360 	.word	0x08011360
 8008144:	08011a6c 	.word	0x08011a6c
 8008148:	080113a4 	.word	0x080113a4

0800814c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d119      	bne.n	8008194 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008160:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008162:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008166:	4910      	ldr	r1, [pc, #64]	; (80081a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008168:	4810      	ldr	r0, [pc, #64]	; (80081ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800816a:	f007 f94b 	bl	800f404 <iprintf>

  while (pcb != NULL) {
 800816e:	e011      	b.n	8008194 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d108      	bne.n	800818e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7fe fdb8 	bl	8006cf8 <tcp_abort>
      pcb = next;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e002      	b.n	8008194 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1ea      	bne.n	8008170 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	08011360 	.word	0x08011360
 80081a8:	08011a94 	.word	0x08011a94
 80081ac:	080113a4 	.word	0x080113a4

080081b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02a      	beq.n	8008216 <tcp_netif_ip_addr_changed+0x66>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d026      	beq.n	8008216 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80081c8:	4b15      	ldr	r3, [pc, #84]	; (8008220 <tcp_netif_ip_addr_changed+0x70>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff ffbc 	bl	800814c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80081d4:	4b13      	ldr	r3, [pc, #76]	; (8008224 <tcp_netif_ip_addr_changed+0x74>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ffb6 	bl	800814c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d017      	beq.n	8008216 <tcp_netif_ip_addr_changed+0x66>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d013      	beq.n	8008216 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <tcp_netif_ip_addr_changed+0x78>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e00c      	b.n	8008210 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d103      	bne.n	800820a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1ef      	bne.n	80081f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	2000a464 	.word	0x2000a464
 8008224:	2000a45c 	.word	0x2000a45c
 8008228:	2000a460 	.word	0x2000a460

0800822c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff fb8d 	bl	8007960 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008254:	b590      	push	{r4, r7, lr}
 8008256:	b08d      	sub	sp, #52	; 0x34
 8008258:	af04      	add	r7, sp, #16
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <tcp_input+0x1c>
 8008264:	4b9b      	ldr	r3, [pc, #620]	; (80084d4 <tcp_input+0x280>)
 8008266:	2283      	movs	r2, #131	; 0x83
 8008268:	499b      	ldr	r1, [pc, #620]	; (80084d8 <tcp_input+0x284>)
 800826a:	489c      	ldr	r0, [pc, #624]	; (80084dc <tcp_input+0x288>)
 800826c:	f007 f8ca 	bl	800f404 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4a9a      	ldr	r2, [pc, #616]	; (80084e0 <tcp_input+0x28c>)
 8008276:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	895b      	ldrh	r3, [r3, #10]
 800827c:	2b13      	cmp	r3, #19
 800827e:	f240 83d1 	bls.w	8008a24 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008282:	4b98      	ldr	r3, [pc, #608]	; (80084e4 <tcp_input+0x290>)
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	4a97      	ldr	r2, [pc, #604]	; (80084e4 <tcp_input+0x290>)
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f006 f86f 	bl	800e370 <ip4_addr_isbroadcast_u32>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 83c7 	bne.w	8008a28 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800829a:	4b92      	ldr	r3, [pc, #584]	; (80084e4 <tcp_input+0x290>)
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80082a2:	2be0      	cmp	r3, #224	; 0xe0
 80082a4:	f000 83c0 	beq.w	8008a28 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80082a8:	4b8d      	ldr	r3, [pc, #564]	; (80084e0 <tcp_input+0x28c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	899b      	ldrh	r3, [r3, #12]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fc fba9 	bl	8004a08 <lwip_htons>
 80082b6:	4603      	mov	r3, r0
 80082b8:	0b1b      	lsrs	r3, r3, #12
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80082c2:	7cbb      	ldrb	r3, [r7, #18]
 80082c4:	2b13      	cmp	r3, #19
 80082c6:	f240 83b1 	bls.w	8008a2c <tcp_input+0x7d8>
 80082ca:	7cbb      	ldrb	r3, [r7, #18]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	891b      	ldrh	r3, [r3, #8]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	f200 83aa 	bhi.w	8008a2c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80082d8:	7cbb      	ldrb	r3, [r7, #18]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b14      	subs	r3, #20
 80082de:	b29a      	uxth	r2, r3
 80082e0:	4b81      	ldr	r3, [pc, #516]	; (80084e8 <tcp_input+0x294>)
 80082e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80082e4:	4b81      	ldr	r3, [pc, #516]	; (80084ec <tcp_input+0x298>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	895a      	ldrh	r2, [r3, #10]
 80082ee:	7cbb      	ldrb	r3, [r7, #18]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d309      	bcc.n	800830a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80082f6:	4b7c      	ldr	r3, [pc, #496]	; (80084e8 <tcp_input+0x294>)
 80082f8:	881a      	ldrh	r2, [r3, #0]
 80082fa:	4b7d      	ldr	r3, [pc, #500]	; (80084f0 <tcp_input+0x29c>)
 80082fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80082fe:	7cbb      	ldrb	r3, [r7, #18]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fd fe58 	bl	8005fb8 <pbuf_remove_header>
 8008308:	e04e      	b.n	80083a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d105      	bne.n	800831e <tcp_input+0xca>
 8008312:	4b70      	ldr	r3, [pc, #448]	; (80084d4 <tcp_input+0x280>)
 8008314:	22c2      	movs	r2, #194	; 0xc2
 8008316:	4977      	ldr	r1, [pc, #476]	; (80084f4 <tcp_input+0x2a0>)
 8008318:	4870      	ldr	r0, [pc, #448]	; (80084dc <tcp_input+0x288>)
 800831a:	f007 f873 	bl	800f404 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800831e:	2114      	movs	r1, #20
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fd fe49 	bl	8005fb8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	895a      	ldrh	r2, [r3, #10]
 800832a:	4b71      	ldr	r3, [pc, #452]	; (80084f0 <tcp_input+0x29c>)
 800832c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800832e:	4b6e      	ldr	r3, [pc, #440]	; (80084e8 <tcp_input+0x294>)
 8008330:	881a      	ldrh	r2, [r3, #0]
 8008332:	4b6f      	ldr	r3, [pc, #444]	; (80084f0 <tcp_input+0x29c>)
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800833a:	4b6d      	ldr	r3, [pc, #436]	; (80084f0 <tcp_input+0x29c>)
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7fd fe39 	bl	8005fb8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	895b      	ldrh	r3, [r3, #10]
 800834c:	8a3a      	ldrh	r2, [r7, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	f200 836e 	bhi.w	8008a30 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4a64      	ldr	r2, [pc, #400]	; (80084ec <tcp_input+0x298>)
 800835c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	8a3a      	ldrh	r2, [r7, #16]
 8008364:	4611      	mov	r1, r2
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd fe26 	bl	8005fb8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	891a      	ldrh	r2, [r3, #8]
 8008370:	8a3b      	ldrh	r3, [r7, #16]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	895b      	ldrh	r3, [r3, #10]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <tcp_input+0x13a>
 8008382:	4b54      	ldr	r3, [pc, #336]	; (80084d4 <tcp_input+0x280>)
 8008384:	22df      	movs	r2, #223	; 0xdf
 8008386:	495c      	ldr	r1, [pc, #368]	; (80084f8 <tcp_input+0x2a4>)
 8008388:	4854      	ldr	r0, [pc, #336]	; (80084dc <tcp_input+0x288>)
 800838a:	f007 f83b 	bl	800f404 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	891a      	ldrh	r2, [r3, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	891b      	ldrh	r3, [r3, #8]
 8008398:	429a      	cmp	r2, r3
 800839a:	d005      	beq.n	80083a8 <tcp_input+0x154>
 800839c:	4b4d      	ldr	r3, [pc, #308]	; (80084d4 <tcp_input+0x280>)
 800839e:	22e0      	movs	r2, #224	; 0xe0
 80083a0:	4956      	ldr	r1, [pc, #344]	; (80084fc <tcp_input+0x2a8>)
 80083a2:	484e      	ldr	r0, [pc, #312]	; (80084dc <tcp_input+0x288>)
 80083a4:	f007 f82e 	bl	800f404 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80083a8:	4b4d      	ldr	r3, [pc, #308]	; (80084e0 <tcp_input+0x28c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4a4b      	ldr	r2, [pc, #300]	; (80084e0 <tcp_input+0x28c>)
 80083b2:	6814      	ldr	r4, [r2, #0]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fc fb27 	bl	8004a08 <lwip_htons>
 80083ba:	4603      	mov	r3, r0
 80083bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80083be:	4b48      	ldr	r3, [pc, #288]	; (80084e0 <tcp_input+0x28c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	885b      	ldrh	r3, [r3, #2]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	4a46      	ldr	r2, [pc, #280]	; (80084e0 <tcp_input+0x28c>)
 80083c8:	6814      	ldr	r4, [r2, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fc fb1c 	bl	8004a08 <lwip_htons>
 80083d0:	4603      	mov	r3, r0
 80083d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80083d4:	4b42      	ldr	r3, [pc, #264]	; (80084e0 <tcp_input+0x28c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	4a41      	ldr	r2, [pc, #260]	; (80084e0 <tcp_input+0x28c>)
 80083dc:	6814      	ldr	r4, [r2, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fc fb27 	bl	8004a32 <lwip_htonl>
 80083e4:	4603      	mov	r3, r0
 80083e6:	6063      	str	r3, [r4, #4]
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	4a45      	ldr	r2, [pc, #276]	; (8008500 <tcp_input+0x2ac>)
 80083ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80083ee:	4b3c      	ldr	r3, [pc, #240]	; (80084e0 <tcp_input+0x28c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	4a3a      	ldr	r2, [pc, #232]	; (80084e0 <tcp_input+0x28c>)
 80083f6:	6814      	ldr	r4, [r2, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fc fb1a 	bl	8004a32 <lwip_htonl>
 80083fe:	4603      	mov	r3, r0
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	4a3f      	ldr	r2, [pc, #252]	; (8008504 <tcp_input+0x2b0>)
 8008406:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008408:	4b35      	ldr	r3, [pc, #212]	; (80084e0 <tcp_input+0x28c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	89db      	ldrh	r3, [r3, #14]
 800840e:	b29b      	uxth	r3, r3
 8008410:	4a33      	ldr	r2, [pc, #204]	; (80084e0 <tcp_input+0x28c>)
 8008412:	6814      	ldr	r4, [r2, #0]
 8008414:	4618      	mov	r0, r3
 8008416:	f7fc faf7 	bl	8004a08 <lwip_htons>
 800841a:	4603      	mov	r3, r0
 800841c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800841e:	4b30      	ldr	r3, [pc, #192]	; (80084e0 <tcp_input+0x28c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	899b      	ldrh	r3, [r3, #12]
 8008424:	b29b      	uxth	r3, r3
 8008426:	4618      	mov	r0, r3
 8008428:	f7fc faee 	bl	8004a08 <lwip_htons>
 800842c:	4603      	mov	r3, r0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4b34      	ldr	r3, [pc, #208]	; (8008508 <tcp_input+0x2b4>)
 8008438:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	891a      	ldrh	r2, [r3, #8]
 800843e:	4b33      	ldr	r3, [pc, #204]	; (800850c <tcp_input+0x2b8>)
 8008440:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008442:	4b31      	ldr	r3, [pc, #196]	; (8008508 <tcp_input+0x2b4>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <tcp_input+0x214>
    tcplen++;
 800844e:	4b2f      	ldr	r3, [pc, #188]	; (800850c <tcp_input+0x2b8>)
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	4b2d      	ldr	r3, [pc, #180]	; (800850c <tcp_input+0x2b8>)
 8008458:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	891a      	ldrh	r2, [r3, #8]
 800845e:	4b2b      	ldr	r3, [pc, #172]	; (800850c <tcp_input+0x2b8>)
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	f200 82e6 	bhi.w	8008a34 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800846c:	4b28      	ldr	r3, [pc, #160]	; (8008510 <tcp_input+0x2bc>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	e09d      	b.n	80085b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	7d1b      	ldrb	r3, [r3, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <tcp_input+0x234>
 800847c:	4b15      	ldr	r3, [pc, #84]	; (80084d4 <tcp_input+0x280>)
 800847e:	22fb      	movs	r2, #251	; 0xfb
 8008480:	4924      	ldr	r1, [pc, #144]	; (8008514 <tcp_input+0x2c0>)
 8008482:	4816      	ldr	r0, [pc, #88]	; (80084dc <tcp_input+0x288>)
 8008484:	f006 ffbe 	bl	800f404 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	7d1b      	ldrb	r3, [r3, #20]
 800848c:	2b0a      	cmp	r3, #10
 800848e:	d105      	bne.n	800849c <tcp_input+0x248>
 8008490:	4b10      	ldr	r3, [pc, #64]	; (80084d4 <tcp_input+0x280>)
 8008492:	22fc      	movs	r2, #252	; 0xfc
 8008494:	4920      	ldr	r1, [pc, #128]	; (8008518 <tcp_input+0x2c4>)
 8008496:	4811      	ldr	r0, [pc, #68]	; (80084dc <tcp_input+0x288>)
 8008498:	f006 ffb4 	bl	800f404 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	7d1b      	ldrb	r3, [r3, #20]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d105      	bne.n	80084b0 <tcp_input+0x25c>
 80084a4:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <tcp_input+0x280>)
 80084a6:	22fd      	movs	r2, #253	; 0xfd
 80084a8:	491c      	ldr	r1, [pc, #112]	; (800851c <tcp_input+0x2c8>)
 80084aa:	480c      	ldr	r0, [pc, #48]	; (80084dc <tcp_input+0x288>)
 80084ac:	f006 ffaa 	bl	800f404 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	7a1b      	ldrb	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d033      	beq.n	8008520 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	7a1a      	ldrb	r2, [r3, #8]
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <tcp_input+0x290>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084c4:	3301      	adds	r3, #1
 80084c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d029      	beq.n	8008520 <tcp_input+0x2cc>
      prev = pcb;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	61bb      	str	r3, [r7, #24]
      continue;
 80084d0:	e06b      	b.n	80085aa <tcp_input+0x356>
 80084d2:	bf00      	nop
 80084d4:	08011ac8 	.word	0x08011ac8
 80084d8:	08011afc 	.word	0x08011afc
 80084dc:	08011b14 	.word	0x08011b14
 80084e0:	2000a480 	.word	0x2000a480
 80084e4:	20004d28 	.word	0x20004d28
 80084e8:	2000a484 	.word	0x2000a484
 80084ec:	2000a488 	.word	0x2000a488
 80084f0:	2000a486 	.word	0x2000a486
 80084f4:	08011b3c 	.word	0x08011b3c
 80084f8:	08011b4c 	.word	0x08011b4c
 80084fc:	08011b58 	.word	0x08011b58
 8008500:	2000a490 	.word	0x2000a490
 8008504:	2000a494 	.word	0x2000a494
 8008508:	2000a49c 	.word	0x2000a49c
 800850c:	2000a49a 	.word	0x2000a49a
 8008510:	2000a464 	.word	0x2000a464
 8008514:	08011b78 	.word	0x08011b78
 8008518:	08011ba0 	.word	0x08011ba0
 800851c:	08011bcc 	.word	0x08011bcc
    }

    if (pcb->remote_port == tcphdr->src &&
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	8b1a      	ldrh	r2, [r3, #24]
 8008524:	4b72      	ldr	r3, [pc, #456]	; (80086f0 <tcp_input+0x49c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	429a      	cmp	r2, r3
 800852e:	d13a      	bne.n	80085a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	8ada      	ldrh	r2, [r3, #22]
 8008534:	4b6e      	ldr	r3, [pc, #440]	; (80086f0 <tcp_input+0x49c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800853c:	429a      	cmp	r2, r3
 800853e:	d132      	bne.n	80085a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	4b6b      	ldr	r3, [pc, #428]	; (80086f4 <tcp_input+0x4a0>)
 8008546:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008548:	429a      	cmp	r2, r3
 800854a:	d12c      	bne.n	80085a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	4b68      	ldr	r3, [pc, #416]	; (80086f4 <tcp_input+0x4a0>)
 8008552:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008554:	429a      	cmp	r2, r3
 8008556:	d126      	bne.n	80085a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	429a      	cmp	r2, r3
 8008560:	d106      	bne.n	8008570 <tcp_input+0x31c>
 8008562:	4b65      	ldr	r3, [pc, #404]	; (80086f8 <tcp_input+0x4a4>)
 8008564:	f240 120d 	movw	r2, #269	; 0x10d
 8008568:	4964      	ldr	r1, [pc, #400]	; (80086fc <tcp_input+0x4a8>)
 800856a:	4865      	ldr	r0, [pc, #404]	; (8008700 <tcp_input+0x4ac>)
 800856c:	f006 ff4a 	bl	800f404 <iprintf>
      if (prev != NULL) {
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <tcp_input+0x338>
        prev->next = pcb->next;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800857e:	4b61      	ldr	r3, [pc, #388]	; (8008704 <tcp_input+0x4b0>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008586:	4a5f      	ldr	r2, [pc, #380]	; (8008704 <tcp_input+0x4b0>)
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	429a      	cmp	r2, r3
 8008594:	d111      	bne.n	80085ba <tcp_input+0x366>
 8008596:	4b58      	ldr	r3, [pc, #352]	; (80086f8 <tcp_input+0x4a4>)
 8008598:	f240 1215 	movw	r2, #277	; 0x115
 800859c:	495a      	ldr	r1, [pc, #360]	; (8008708 <tcp_input+0x4b4>)
 800859e:	4858      	ldr	r0, [pc, #352]	; (8008700 <tcp_input+0x4ac>)
 80085a0:	f006 ff30 	bl	800f404 <iprintf>
      break;
 80085a4:	e009      	b.n	80085ba <tcp_input+0x366>
    }
    prev = pcb;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f47f af5e 	bne.w	8008474 <tcp_input+0x220>
 80085b8:	e000      	b.n	80085bc <tcp_input+0x368>
      break;
 80085ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f040 80aa 	bne.w	8008718 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80085c4:	4b51      	ldr	r3, [pc, #324]	; (800870c <tcp_input+0x4b8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	e03f      	b.n	800864c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	7d1b      	ldrb	r3, [r3, #20]
 80085d0:	2b0a      	cmp	r3, #10
 80085d2:	d006      	beq.n	80085e2 <tcp_input+0x38e>
 80085d4:	4b48      	ldr	r3, [pc, #288]	; (80086f8 <tcp_input+0x4a4>)
 80085d6:	f240 121f 	movw	r2, #287	; 0x11f
 80085da:	494d      	ldr	r1, [pc, #308]	; (8008710 <tcp_input+0x4bc>)
 80085dc:	4848      	ldr	r0, [pc, #288]	; (8008700 <tcp_input+0x4ac>)
 80085de:	f006 ff11 	bl	800f404 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	7a1b      	ldrb	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	7a1a      	ldrb	r2, [r3, #8]
 80085ee:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <tcp_input+0x4a0>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085f6:	3301      	adds	r3, #1
 80085f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d122      	bne.n	8008644 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	8b1a      	ldrh	r2, [r3, #24]
 8008602:	4b3b      	ldr	r3, [pc, #236]	; (80086f0 <tcp_input+0x49c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	429a      	cmp	r2, r3
 800860c:	d11b      	bne.n	8008646 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	8ada      	ldrh	r2, [r3, #22]
 8008612:	4b37      	ldr	r3, [pc, #220]	; (80086f0 <tcp_input+0x49c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	885b      	ldrh	r3, [r3, #2]
 8008618:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800861a:	429a      	cmp	r2, r3
 800861c:	d113      	bne.n	8008646 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	4b34      	ldr	r3, [pc, #208]	; (80086f4 <tcp_input+0x4a0>)
 8008624:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008626:	429a      	cmp	r2, r3
 8008628:	d10d      	bne.n	8008646 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <tcp_input+0x4a0>)
 8008630:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008632:	429a      	cmp	r2, r3
 8008634:	d107      	bne.n	8008646 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008636:	69f8      	ldr	r0, [r7, #28]
 8008638:	f000 fb56 	bl	8008ce8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fd fd41 	bl	80060c4 <pbuf_free>
        return;
 8008642:	e1fd      	b.n	8008a40 <tcp_input+0x7ec>
        continue;
 8008644:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1bc      	bne.n	80085cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008656:	4b2f      	ldr	r3, [pc, #188]	; (8008714 <tcp_input+0x4c0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e02a      	b.n	80086b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	7a1b      	ldrb	r3, [r3, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00c      	beq.n	8008680 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	7a1a      	ldrb	r2, [r3, #8]
 800866a:	4b22      	ldr	r3, [pc, #136]	; (80086f4 <tcp_input+0x4a0>)
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008672:	3301      	adds	r3, #1
 8008674:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008676:	429a      	cmp	r2, r3
 8008678:	d002      	beq.n	8008680 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	61bb      	str	r3, [r7, #24]
        continue;
 800867e:	e016      	b.n	80086ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	8ada      	ldrh	r2, [r3, #22]
 8008684:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <tcp_input+0x49c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	885b      	ldrh	r3, [r3, #2]
 800868a:	b29b      	uxth	r3, r3
 800868c:	429a      	cmp	r2, r3
 800868e:	d10c      	bne.n	80086aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <tcp_input+0x4a0>)
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	429a      	cmp	r2, r3
 800869a:	d00f      	beq.n	80086bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <tcp_input+0x46a>
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1d1      	bne.n	800865e <tcp_input+0x40a>
 80086ba:	e000      	b.n	80086be <tcp_input+0x46a>
            break;
 80086bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d029      	beq.n	8008718 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <tcp_input+0x4c0>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80086da:	4a0e      	ldr	r2, [pc, #56]	; (8008714 <tcp_input+0x4c0>)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80086e0:	6978      	ldr	r0, [r7, #20]
 80086e2:	f000 fa03 	bl	8008aec <tcp_listen_input>
      }
      pbuf_free(p);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fd fcec 	bl	80060c4 <pbuf_free>
      return;
 80086ec:	e1a8      	b.n	8008a40 <tcp_input+0x7ec>
 80086ee:	bf00      	nop
 80086f0:	2000a480 	.word	0x2000a480
 80086f4:	20004d28 	.word	0x20004d28
 80086f8:	08011ac8 	.word	0x08011ac8
 80086fc:	08011bf4 	.word	0x08011bf4
 8008700:	08011b14 	.word	0x08011b14
 8008704:	2000a464 	.word	0x2000a464
 8008708:	08011c20 	.word	0x08011c20
 800870c:	2000a468 	.word	0x2000a468
 8008710:	08011c4c 	.word	0x08011c4c
 8008714:	2000a460 	.word	0x2000a460
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8158 	beq.w	80089d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008720:	4b95      	ldr	r3, [pc, #596]	; (8008978 <tcp_input+0x724>)
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	891a      	ldrh	r2, [r3, #8]
 800872a:	4b93      	ldr	r3, [pc, #588]	; (8008978 <tcp_input+0x724>)
 800872c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800872e:	4a92      	ldr	r2, [pc, #584]	; (8008978 <tcp_input+0x724>)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008734:	4b91      	ldr	r3, [pc, #580]	; (800897c <tcp_input+0x728>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a8f      	ldr	r2, [pc, #572]	; (8008978 <tcp_input+0x724>)
 800873a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800873c:	4b90      	ldr	r3, [pc, #576]	; (8008980 <tcp_input+0x72c>)
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008742:	4b90      	ldr	r3, [pc, #576]	; (8008984 <tcp_input+0x730>)
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008748:	4b8f      	ldr	r3, [pc, #572]	; (8008988 <tcp_input+0x734>)
 800874a:	2200      	movs	r2, #0
 800874c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800874e:	4b8f      	ldr	r3, [pc, #572]	; (800898c <tcp_input+0x738>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	2b00      	cmp	r3, #0
 8008758:	d006      	beq.n	8008768 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7b5b      	ldrb	r3, [r3, #13]
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	b2da      	uxtb	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800876c:	2b00      	cmp	r3, #0
 800876e:	d017      	beq.n	80087a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008770:	69f8      	ldr	r0, [r7, #28]
 8008772:	f7ff f879 	bl	8007868 <tcp_process_refused_data>
 8008776:	4603      	mov	r3, r0
 8008778:	f113 0f0d 	cmn.w	r3, #13
 800877c:	d007      	beq.n	800878e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00c      	beq.n	80087a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008786:	4b82      	ldr	r3, [pc, #520]	; (8008990 <tcp_input+0x73c>)
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 80e3 	bne.w	800895e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008798:	69f8      	ldr	r0, [r7, #28]
 800879a:	f003 fe05 	bl	800c3a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800879e:	e0de      	b.n	800895e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80087a0:	4a7c      	ldr	r2, [pc, #496]	; (8008994 <tcp_input+0x740>)
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80087a6:	69f8      	ldr	r0, [r7, #28]
 80087a8:	f000 fb18 	bl	8008ddc <tcp_process>
 80087ac:	4603      	mov	r3, r0
 80087ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80087b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087b4:	f113 0f0d 	cmn.w	r3, #13
 80087b8:	f000 80d3 	beq.w	8008962 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80087bc:	4b71      	ldr	r3, [pc, #452]	; (8008984 <tcp_input+0x730>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d015      	beq.n	80087f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <tcp_input+0x590>
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	6912      	ldr	r2, [r2, #16]
 80087dc:	f06f 010d 	mvn.w	r1, #13
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80087e4:	69f9      	ldr	r1, [r7, #28]
 80087e6:	486c      	ldr	r0, [pc, #432]	; (8008998 <tcp_input+0x744>)
 80087e8:	f7ff fbbc 	bl	8007f64 <tcp_pcb_remove>
        tcp_free(pcb);
 80087ec:	69f8      	ldr	r0, [r7, #28]
 80087ee:	f7fd ff9b 	bl	8006728 <tcp_free>
 80087f2:	e0da      	b.n	80089aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80087f8:	4b63      	ldr	r3, [pc, #396]	; (8008988 <tcp_input+0x734>)
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d01d      	beq.n	800883c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008800:	4b61      	ldr	r3, [pc, #388]	; (8008988 <tcp_input+0x734>)
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <tcp_input+0x5d2>
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	6910      	ldr	r0, [r2, #16]
 800881a:	89fa      	ldrh	r2, [r7, #14]
 800881c:	69f9      	ldr	r1, [r7, #28]
 800881e:	4798      	blx	r3
 8008820:	4603      	mov	r3, r0
 8008822:	74fb      	strb	r3, [r7, #19]
 8008824:	e001      	b.n	800882a <tcp_input+0x5d6>
 8008826:	2300      	movs	r3, #0
 8008828:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800882a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800882e:	f113 0f0d 	cmn.w	r3, #13
 8008832:	f000 8098 	beq.w	8008966 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008836:	4b54      	ldr	r3, [pc, #336]	; (8008988 <tcp_input+0x734>)
 8008838:	2200      	movs	r2, #0
 800883a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800883c:	69f8      	ldr	r0, [r7, #28]
 800883e:	f000 f915 	bl	8008a6c <tcp_input_delayed_close>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	f040 8090 	bne.w	800896a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800884a:	4b4d      	ldr	r3, [pc, #308]	; (8008980 <tcp_input+0x72c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d041      	beq.n	80088d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <tcp_input+0x614>
 800885a:	4b50      	ldr	r3, [pc, #320]	; (800899c <tcp_input+0x748>)
 800885c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008860:	494f      	ldr	r1, [pc, #316]	; (80089a0 <tcp_input+0x74c>)
 8008862:	4850      	ldr	r0, [pc, #320]	; (80089a4 <tcp_input+0x750>)
 8008864:	f006 fdce 	bl	800f404 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	8b5b      	ldrh	r3, [r3, #26]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008874:	4b42      	ldr	r3, [pc, #264]	; (8008980 <tcp_input+0x72c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4618      	mov	r0, r3
 800887a:	f7fd fc23 	bl	80060c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800887e:	69f8      	ldr	r0, [r7, #28]
 8008880:	f7fe fa3a 	bl	8006cf8 <tcp_abort>
            goto aborted;
 8008884:	e091      	b.n	80089aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <tcp_input+0x656>
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	6918      	ldr	r0, [r3, #16]
 800889a:	4b39      	ldr	r3, [pc, #228]	; (8008980 <tcp_input+0x72c>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	47a0      	blx	r4
 80088a4:	4603      	mov	r3, r0
 80088a6:	74fb      	strb	r3, [r7, #19]
 80088a8:	e008      	b.n	80088bc <tcp_input+0x668>
 80088aa:	4b35      	ldr	r3, [pc, #212]	; (8008980 <tcp_input+0x72c>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	69f9      	ldr	r1, [r7, #28]
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7ff f8ae 	bl	8007a14 <tcp_recv_null>
 80088b8:	4603      	mov	r3, r0
 80088ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80088bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088c0:	f113 0f0d 	cmn.w	r3, #13
 80088c4:	d053      	beq.n	800896e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80088c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80088ce:	4b2c      	ldr	r3, [pc, #176]	; (8008980 <tcp_input+0x72c>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80088d6:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <tcp_input+0x730>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d030      	beq.n	8008944 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ee:	7b5a      	ldrb	r2, [r3, #13]
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f4:	f042 0220 	orr.w	r2, r2, #32
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	735a      	strb	r2, [r3, #13]
 80088fc:	e022      	b.n	8008944 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008902:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008906:	d005      	beq.n	8008914 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800890c:	3301      	adds	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <tcp_input+0x6e2>
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	6918      	ldr	r0, [r3, #16]
 8008928:	2300      	movs	r3, #0
 800892a:	2200      	movs	r2, #0
 800892c:	69f9      	ldr	r1, [r7, #28]
 800892e:	47a0      	blx	r4
 8008930:	4603      	mov	r3, r0
 8008932:	74fb      	strb	r3, [r7, #19]
 8008934:	e001      	b.n	800893a <tcp_input+0x6e6>
 8008936:	2300      	movs	r3, #0
 8008938:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800893a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800893e:	f113 0f0d 	cmn.w	r3, #13
 8008942:	d016      	beq.n	8008972 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008944:	4b13      	ldr	r3, [pc, #76]	; (8008994 <tcp_input+0x740>)
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800894a:	69f8      	ldr	r0, [r7, #28]
 800894c:	f000 f88e 	bl	8008a6c <tcp_input_delayed_close>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d128      	bne.n	80089a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008956:	69f8      	ldr	r0, [r7, #28]
 8008958:	f002 ff20 	bl	800b79c <tcp_output>
 800895c:	e025      	b.n	80089aa <tcp_input+0x756>
        goto aborted;
 800895e:	bf00      	nop
 8008960:	e023      	b.n	80089aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008962:	bf00      	nop
 8008964:	e021      	b.n	80089aa <tcp_input+0x756>
              goto aborted;
 8008966:	bf00      	nop
 8008968:	e01f      	b.n	80089aa <tcp_input+0x756>
          goto aborted;
 800896a:	bf00      	nop
 800896c:	e01d      	b.n	80089aa <tcp_input+0x756>
            goto aborted;
 800896e:	bf00      	nop
 8008970:	e01b      	b.n	80089aa <tcp_input+0x756>
              goto aborted;
 8008972:	bf00      	nop
 8008974:	e019      	b.n	80089aa <tcp_input+0x756>
 8008976:	bf00      	nop
 8008978:	2000a470 	.word	0x2000a470
 800897c:	2000a480 	.word	0x2000a480
 8008980:	2000a4a0 	.word	0x2000a4a0
 8008984:	2000a49d 	.word	0x2000a49d
 8008988:	2000a498 	.word	0x2000a498
 800898c:	2000a49c 	.word	0x2000a49c
 8008990:	2000a49a 	.word	0x2000a49a
 8008994:	2000a4a4 	.word	0x2000a4a4
 8008998:	2000a464 	.word	0x2000a464
 800899c:	08011ac8 	.word	0x08011ac8
 80089a0:	08011c7c 	.word	0x08011c7c
 80089a4:	08011b14 	.word	0x08011b14
          goto aborted;
 80089a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80089aa:	4b27      	ldr	r3, [pc, #156]	; (8008a48 <tcp_input+0x7f4>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80089b0:	4b26      	ldr	r3, [pc, #152]	; (8008a4c <tcp_input+0x7f8>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80089b6:	4b26      	ldr	r3, [pc, #152]	; (8008a50 <tcp_input+0x7fc>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d03f      	beq.n	8008a3e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80089be:	4b24      	ldr	r3, [pc, #144]	; (8008a50 <tcp_input+0x7fc>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fd fb7e 	bl	80060c4 <pbuf_free>
      inseg.p = NULL;
 80089c8:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <tcp_input+0x7fc>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80089ce:	e036      	b.n	8008a3e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80089d0:	4b20      	ldr	r3, [pc, #128]	; (8008a54 <tcp_input+0x800>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	899b      	ldrh	r3, [r3, #12]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fc f815 	bl	8004a08 <lwip_htons>
 80089de:	4603      	mov	r3, r0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d118      	bne.n	8008a1c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089ea:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <tcp_input+0x804>)
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <tcp_input+0x808>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <tcp_input+0x80c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <tcp_input+0x800>)
 80089fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089fe:	885b      	ldrh	r3, [r3, #2]
 8008a00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a02:	4a14      	ldr	r2, [pc, #80]	; (8008a54 <tcp_input+0x800>)
 8008a04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a06:	8812      	ldrh	r2, [r2, #0]
 8008a08:	b292      	uxth	r2, r2
 8008a0a:	9202      	str	r2, [sp, #8]
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <tcp_input+0x810>)
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <tcp_input+0x814>)
 8008a14:	4602      	mov	r2, r0
 8008a16:	2000      	movs	r0, #0
 8008a18:	f003 fc74 	bl	800c304 <tcp_rst>
    pbuf_free(p);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7fd fb51 	bl	80060c4 <pbuf_free>
  return;
 8008a22:	e00c      	b.n	8008a3e <tcp_input+0x7ea>
    goto dropped;
 8008a24:	bf00      	nop
 8008a26:	e006      	b.n	8008a36 <tcp_input+0x7e2>
    goto dropped;
 8008a28:	bf00      	nop
 8008a2a:	e004      	b.n	8008a36 <tcp_input+0x7e2>
    goto dropped;
 8008a2c:	bf00      	nop
 8008a2e:	e002      	b.n	8008a36 <tcp_input+0x7e2>
      goto dropped;
 8008a30:	bf00      	nop
 8008a32:	e000      	b.n	8008a36 <tcp_input+0x7e2>
      goto dropped;
 8008a34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fd fb44 	bl	80060c4 <pbuf_free>
 8008a3c:	e000      	b.n	8008a40 <tcp_input+0x7ec>
  return;
 8008a3e:	bf00      	nop
}
 8008a40:	3724      	adds	r7, #36	; 0x24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd90      	pop	{r4, r7, pc}
 8008a46:	bf00      	nop
 8008a48:	2000a4a4 	.word	0x2000a4a4
 8008a4c:	2000a4a0 	.word	0x2000a4a0
 8008a50:	2000a470 	.word	0x2000a470
 8008a54:	2000a480 	.word	0x2000a480
 8008a58:	2000a494 	.word	0x2000a494
 8008a5c:	2000a49a 	.word	0x2000a49a
 8008a60:	2000a490 	.word	0x2000a490
 8008a64:	20004d38 	.word	0x20004d38
 8008a68:	20004d3c 	.word	0x20004d3c

08008a6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <tcp_input_delayed_close+0x1c>
 8008a7a:	4b17      	ldr	r3, [pc, #92]	; (8008ad8 <tcp_input_delayed_close+0x6c>)
 8008a7c:	f240 225a 	movw	r2, #602	; 0x25a
 8008a80:	4916      	ldr	r1, [pc, #88]	; (8008adc <tcp_input_delayed_close+0x70>)
 8008a82:	4817      	ldr	r0, [pc, #92]	; (8008ae0 <tcp_input_delayed_close+0x74>)
 8008a84:	f006 fcbe 	bl	800f404 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008a88:	4b16      	ldr	r3, [pc, #88]	; (8008ae4 <tcp_input_delayed_close+0x78>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01c      	beq.n	8008ace <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	8b5b      	ldrh	r3, [r3, #26]
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10d      	bne.n	8008abc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d008      	beq.n	8008abc <tcp_input_delayed_close+0x50>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6912      	ldr	r2, [r2, #16]
 8008ab4:	f06f 010e 	mvn.w	r1, #14
 8008ab8:	4610      	mov	r0, r2
 8008aba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	480a      	ldr	r0, [pc, #40]	; (8008ae8 <tcp_input_delayed_close+0x7c>)
 8008ac0:	f7ff fa50 	bl	8007f64 <tcp_pcb_remove>
    tcp_free(pcb);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fd fe2f 	bl	8006728 <tcp_free>
    return 1;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	08011ac8 	.word	0x08011ac8
 8008adc:	08011c98 	.word	0x08011c98
 8008ae0:	08011b14 	.word	0x08011b14
 8008ae4:	2000a49d 	.word	0x2000a49d
 8008ae8:	2000a464 	.word	0x2000a464

08008aec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b08b      	sub	sp, #44	; 0x2c
 8008af0:	af04      	add	r7, sp, #16
 8008af2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008af4:	4b6f      	ldr	r3, [pc, #444]	; (8008cb4 <tcp_listen_input+0x1c8>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 80d2 	bne.w	8008ca6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <tcp_listen_input+0x2a>
 8008b08:	4b6b      	ldr	r3, [pc, #428]	; (8008cb8 <tcp_listen_input+0x1cc>)
 8008b0a:	f240 2281 	movw	r2, #641	; 0x281
 8008b0e:	496b      	ldr	r1, [pc, #428]	; (8008cbc <tcp_listen_input+0x1d0>)
 8008b10:	486b      	ldr	r0, [pc, #428]	; (8008cc0 <tcp_listen_input+0x1d4>)
 8008b12:	f006 fc77 	bl	800f404 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008b16:	4b67      	ldr	r3, [pc, #412]	; (8008cb4 <tcp_listen_input+0x1c8>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	f003 0310 	and.w	r3, r3, #16
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d019      	beq.n	8008b56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b22:	4b68      	ldr	r3, [pc, #416]	; (8008cc4 <tcp_listen_input+0x1d8>)
 8008b24:	6819      	ldr	r1, [r3, #0]
 8008b26:	4b68      	ldr	r3, [pc, #416]	; (8008cc8 <tcp_listen_input+0x1dc>)
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4b67      	ldr	r3, [pc, #412]	; (8008ccc <tcp_listen_input+0x1e0>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b32:	4b67      	ldr	r3, [pc, #412]	; (8008cd0 <tcp_listen_input+0x1e4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b36:	885b      	ldrh	r3, [r3, #2]
 8008b38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b3a:	4a65      	ldr	r2, [pc, #404]	; (8008cd0 <tcp_listen_input+0x1e4>)
 8008b3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b3e:	8812      	ldrh	r2, [r2, #0]
 8008b40:	b292      	uxth	r2, r2
 8008b42:	9202      	str	r2, [sp, #8]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	4b63      	ldr	r3, [pc, #396]	; (8008cd4 <tcp_listen_input+0x1e8>)
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	4b63      	ldr	r3, [pc, #396]	; (8008cd8 <tcp_listen_input+0x1ec>)
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f003 fbd8 	bl	800c304 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008b54:	e0a9      	b.n	8008caa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008b56:	4b57      	ldr	r3, [pc, #348]	; (8008cb4 <tcp_listen_input+0x1c8>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 80a3 	beq.w	8008caa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7d5b      	ldrb	r3, [r3, #21]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff f877 	bl	8007c5c <tcp_alloc>
 8008b6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d111      	bne.n	8008b9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <tcp_listen_input+0xa8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6910      	ldr	r0, [r2, #16]
 8008b86:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73bb      	strb	r3, [r7, #14]
      return;
 8008b92:	e08b      	b.n	8008cac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008b94:	23f0      	movs	r3, #240	; 0xf0
 8008b96:	73bb      	strb	r3, [r7, #14]
      return;
 8008b98:	e088      	b.n	8008cac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008b9a:	4b50      	ldr	r3, [pc, #320]	; (8008cdc <tcp_listen_input+0x1f0>)
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008ba2:	4b4e      	ldr	r3, [pc, #312]	; (8008cdc <tcp_listen_input+0x1f0>)
 8008ba4:	691a      	ldr	r2, [r3, #16]
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	8ada      	ldrh	r2, [r3, #22]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008bb2:	4b47      	ldr	r3, [pc, #284]	; (8008cd0 <tcp_listen_input+0x1e4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008bc4:	4b41      	ldr	r3, [pc, #260]	; (8008ccc <tcp_listen_input+0x1e0>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008bd6:	6978      	ldr	r0, [r7, #20]
 8008bd8:	f7ff fa58 	bl	800808c <tcp_next_iss>
 8008bdc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008bf6:	4b35      	ldr	r3, [pc, #212]	; (8008ccc <tcp_listen_input+0x1e0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	1e5a      	subs	r2, r3, #1
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7a5b      	ldrb	r3, [r3, #9]
 8008c12:	f003 030c 	and.w	r3, r3, #12
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7a1a      	ldrb	r2, [r3, #8]
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008c24:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <tcp_listen_input+0x1f4>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	4a2c      	ldr	r2, [pc, #176]	; (8008ce0 <tcp_listen_input+0x1f4>)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	f003 fd29 	bl	800c688 <tcp_timer_needed>
 8008c36:	4b2b      	ldr	r3, [pc, #172]	; (8008ce4 <tcp_listen_input+0x1f8>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008c3c:	6978      	ldr	r0, [r7, #20]
 8008c3e:	f001 fd8f 	bl	800a760 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008c42:	4b23      	ldr	r3, [pc, #140]	; (8008cd0 <tcp_listen_input+0x1e4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	89db      	ldrh	r3, [r3, #14]
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f005 f8ed 	bl	800de44 <ip4_route>
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	461a      	mov	r2, r3
 8008c72:	4620      	mov	r0, r4
 8008c74:	f7ff fa30 	bl	80080d8 <tcp_eff_send_mss_netif>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008c80:	2112      	movs	r1, #18
 8008c82:	6978      	ldr	r0, [r7, #20]
 8008c84:	f002 fc9c 	bl	800b5c0 <tcp_enqueue_flags>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008c94:	2100      	movs	r1, #0
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7fd ff70 	bl	8006b7c <tcp_abandon>
      return;
 8008c9c:	e006      	b.n	8008cac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008c9e:	6978      	ldr	r0, [r7, #20]
 8008ca0:	f002 fd7c 	bl	800b79c <tcp_output>
  return;
 8008ca4:	e001      	b.n	8008caa <tcp_listen_input+0x1be>
    return;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <tcp_listen_input+0x1c0>
  return;
 8008caa:	bf00      	nop
}
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd90      	pop	{r4, r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	2000a49c 	.word	0x2000a49c
 8008cb8:	08011ac8 	.word	0x08011ac8
 8008cbc:	08011cc0 	.word	0x08011cc0
 8008cc0:	08011b14 	.word	0x08011b14
 8008cc4:	2000a494 	.word	0x2000a494
 8008cc8:	2000a49a 	.word	0x2000a49a
 8008ccc:	2000a490 	.word	0x2000a490
 8008cd0:	2000a480 	.word	0x2000a480
 8008cd4:	20004d38 	.word	0x20004d38
 8008cd8:	20004d3c 	.word	0x20004d3c
 8008cdc:	20004d28 	.word	0x20004d28
 8008ce0:	2000a464 	.word	0x2000a464
 8008ce4:	2000a46c 	.word	0x2000a46c

08008ce8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af04      	add	r7, sp, #16
 8008cee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <tcp_timewait_input+0xc8>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d153      	bne.n	8008da4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <tcp_timewait_input+0x28>
 8008d02:	4b2c      	ldr	r3, [pc, #176]	; (8008db4 <tcp_timewait_input+0xcc>)
 8008d04:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008d08:	492b      	ldr	r1, [pc, #172]	; (8008db8 <tcp_timewait_input+0xd0>)
 8008d0a:	482c      	ldr	r0, [pc, #176]	; (8008dbc <tcp_timewait_input+0xd4>)
 8008d0c:	f006 fb7a 	bl	800f404 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008d10:	4b27      	ldr	r3, [pc, #156]	; (8008db0 <tcp_timewait_input+0xc8>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d02a      	beq.n	8008d72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008d1c:	4b28      	ldr	r3, [pc, #160]	; (8008dc0 <tcp_timewait_input+0xd8>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	db2d      	blt.n	8008d86 <tcp_timewait_input+0x9e>
 8008d2a:	4b25      	ldr	r3, [pc, #148]	; (8008dc0 <tcp_timewait_input+0xd8>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d36:	440b      	add	r3, r1
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dc23      	bgt.n	8008d86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d3e:	4b21      	ldr	r3, [pc, #132]	; (8008dc4 <tcp_timewait_input+0xdc>)
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	4b21      	ldr	r3, [pc, #132]	; (8008dc8 <tcp_timewait_input+0xe0>)
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <tcp_timewait_input+0xd8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d4e:	4b1f      	ldr	r3, [pc, #124]	; (8008dcc <tcp_timewait_input+0xe4>)
 8008d50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d52:	885b      	ldrh	r3, [r3, #2]
 8008d54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d56:	4a1d      	ldr	r2, [pc, #116]	; (8008dcc <tcp_timewait_input+0xe4>)
 8008d58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d5a:	8812      	ldrh	r2, [r2, #0]
 8008d5c:	b292      	uxth	r2, r2
 8008d5e:	9202      	str	r2, [sp, #8]
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <tcp_timewait_input+0xe8>)
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <tcp_timewait_input+0xec>)
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f003 faca 	bl	800c304 <tcp_rst>
      return;
 8008d70:	e01b      	b.n	8008daa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008d72:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <tcp_timewait_input+0xc8>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008d7e:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <tcp_timewait_input+0xf0>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <tcp_timewait_input+0xe0>)
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8b5b      	ldrh	r3, [r3, #26]
 8008d92:	f043 0302 	orr.w	r3, r3, #2
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f002 fcfd 	bl	800b79c <tcp_output>
  }
  return;
 8008da2:	e001      	b.n	8008da8 <tcp_timewait_input+0xc0>
    return;
 8008da4:	bf00      	nop
 8008da6:	e000      	b.n	8008daa <tcp_timewait_input+0xc2>
  return;
 8008da8:	bf00      	nop
}
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	2000a49c 	.word	0x2000a49c
 8008db4:	08011ac8 	.word	0x08011ac8
 8008db8:	08011ce0 	.word	0x08011ce0
 8008dbc:	08011b14 	.word	0x08011b14
 8008dc0:	2000a490 	.word	0x2000a490
 8008dc4:	2000a494 	.word	0x2000a494
 8008dc8:	2000a49a 	.word	0x2000a49a
 8008dcc:	2000a480 	.word	0x2000a480
 8008dd0:	20004d38 	.word	0x20004d38
 8008dd4:	20004d3c 	.word	0x20004d3c
 8008dd8:	2000a458 	.word	0x2000a458

08008ddc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b08d      	sub	sp, #52	; 0x34
 8008de0:	af04      	add	r7, sp, #16
 8008de2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <tcp_process+0x24>
 8008df2:	4b9d      	ldr	r3, [pc, #628]	; (8009068 <tcp_process+0x28c>)
 8008df4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008df8:	499c      	ldr	r1, [pc, #624]	; (800906c <tcp_process+0x290>)
 8008dfa:	489d      	ldr	r0, [pc, #628]	; (8009070 <tcp_process+0x294>)
 8008dfc:	f006 fb02 	bl	800f404 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008e00:	4b9c      	ldr	r3, [pc, #624]	; (8009074 <tcp_process+0x298>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d04e      	beq.n	8008eaa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7d1b      	ldrb	r3, [r3, #20]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d108      	bne.n	8008e26 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e18:	4b97      	ldr	r3, [pc, #604]	; (8009078 <tcp_process+0x29c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d123      	bne.n	8008e68 <tcp_process+0x8c>
        acceptable = 1;
 8008e20:	2301      	movs	r3, #1
 8008e22:	76fb      	strb	r3, [r7, #27]
 8008e24:	e020      	b.n	8008e68 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e2a:	4b94      	ldr	r3, [pc, #592]	; (800907c <tcp_process+0x2a0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d102      	bne.n	8008e38 <tcp_process+0x5c>
        acceptable = 1;
 8008e32:	2301      	movs	r3, #1
 8008e34:	76fb      	strb	r3, [r7, #27]
 8008e36:	e017      	b.n	8008e68 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e38:	4b90      	ldr	r3, [pc, #576]	; (800907c <tcp_process+0x2a0>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	db10      	blt.n	8008e68 <tcp_process+0x8c>
 8008e46:	4b8d      	ldr	r3, [pc, #564]	; (800907c <tcp_process+0x2a0>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e52:	440b      	add	r3, r1
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	dc06      	bgt.n	8008e68 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	8b5b      	ldrh	r3, [r3, #26]
 8008e5e:	f043 0302 	orr.w	r3, r3, #2
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008e68:	7efb      	ldrb	r3, [r7, #27]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01b      	beq.n	8008ea6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7d1b      	ldrb	r3, [r3, #20]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <tcp_process+0xa8>
 8008e76:	4b7c      	ldr	r3, [pc, #496]	; (8009068 <tcp_process+0x28c>)
 8008e78:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008e7c:	4980      	ldr	r1, [pc, #512]	; (8009080 <tcp_process+0x2a4>)
 8008e7e:	487c      	ldr	r0, [pc, #496]	; (8009070 <tcp_process+0x294>)
 8008e80:	f006 fac0 	bl	800f404 <iprintf>
      recv_flags |= TF_RESET;
 8008e84:	4b7f      	ldr	r3, [pc, #508]	; (8009084 <tcp_process+0x2a8>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f043 0308 	orr.w	r3, r3, #8
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	4b7d      	ldr	r3, [pc, #500]	; (8009084 <tcp_process+0x2a8>)
 8008e90:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8b5b      	ldrh	r3, [r3, #26]
 8008e96:	f023 0301 	bic.w	r3, r3, #1
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008ea0:	f06f 030d 	mvn.w	r3, #13
 8008ea4:	e37a      	b.n	800959c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e378      	b.n	800959c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008eaa:	4b72      	ldr	r3, [pc, #456]	; (8009074 <tcp_process+0x298>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d010      	beq.n	8008ed8 <tcp_process+0xfc>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7d1b      	ldrb	r3, [r3, #20]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d00c      	beq.n	8008ed8 <tcp_process+0xfc>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	7d1b      	ldrb	r3, [r3, #20]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d008      	beq.n	8008ed8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8b5b      	ldrh	r3, [r3, #26]
 8008eca:	f043 0302 	orr.w	r3, r3, #2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e361      	b.n	800959c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	8b5b      	ldrh	r3, [r3, #26]
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d103      	bne.n	8008eec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008ee4:	4b68      	ldr	r3, [pc, #416]	; (8009088 <tcp_process+0x2ac>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fc2f 	bl	800a760 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7d1b      	ldrb	r3, [r3, #20]
 8008f06:	3b02      	subs	r3, #2
 8008f08:	2b07      	cmp	r3, #7
 8008f0a:	f200 8337 	bhi.w	800957c <tcp_process+0x7a0>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <tcp_process+0x138>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f35 	.word	0x08008f35
 8008f18:	08009165 	.word	0x08009165
 8008f1c:	080092dd 	.word	0x080092dd
 8008f20:	08009307 	.word	0x08009307
 8008f24:	0800942b 	.word	0x0800942b
 8008f28:	080092dd 	.word	0x080092dd
 8008f2c:	080094b7 	.word	0x080094b7
 8008f30:	08009547 	.word	0x08009547
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008f34:	4b4f      	ldr	r3, [pc, #316]	; (8009074 <tcp_process+0x298>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80e4 	beq.w	800910a <tcp_process+0x32e>
 8008f42:	4b4c      	ldr	r3, [pc, #304]	; (8009074 <tcp_process+0x298>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 80dd 	beq.w	800910a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	4b48      	ldr	r3, [pc, #288]	; (8009078 <tcp_process+0x29c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	f040 80d5 	bne.w	800910a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008f60:	4b46      	ldr	r3, [pc, #280]	; (800907c <tcp_process+0x2a0>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008f72:	4b41      	ldr	r3, [pc, #260]	; (8009078 <tcp_process+0x29c>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008f7a:	4b44      	ldr	r3, [pc, #272]	; (800908c <tcp_process+0x2b0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	89db      	ldrh	r3, [r3, #14]
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008f94:	4b39      	ldr	r3, [pc, #228]	; (800907c <tcp_process+0x2a0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	1e5a      	subs	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f004 ff49 	bl	800de44 <ip4_route>
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff f88c 	bl	80080d8 <tcp_eff_send_mss_netif>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fcc:	009a      	lsls	r2, r3, #2
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fd2:	005b      	lsls	r3, r3, #1
 8008fd4:	f241 111c 	movw	r1, #4380	; 0x111c
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf38      	it	cc
 8008fdc:	460b      	movcc	r3, r1
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d204      	bcs.n	8008fec <tcp_process+0x210>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	e00d      	b.n	8009008 <tcp_process+0x22c>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	f241 121c 	movw	r2, #4380	; 0x111c
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d904      	bls.n	8009004 <tcp_process+0x228>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	b29b      	uxth	r3, r3
 8009002:	e001      	b.n	8009008 <tcp_process+0x22c>
 8009004:	f241 131c 	movw	r3, #4380	; 0x111c
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <tcp_process+0x24a>
 8009018:	4b13      	ldr	r3, [pc, #76]	; (8009068 <tcp_process+0x28c>)
 800901a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800901e:	491c      	ldr	r1, [pc, #112]	; (8009090 <tcp_process+0x2b4>)
 8009020:	4813      	ldr	r0, [pc, #76]	; (8009070 <tcp_process+0x294>)
 8009022:	f006 f9ef 	bl	800f404 <iprintf>
        --pcb->snd_queuelen;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800902c:	3b01      	subs	r3, #1
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d12a      	bne.n	8009098 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009046:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <tcp_process+0x280>
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <tcp_process+0x28c>)
 8009050:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009054:	490f      	ldr	r1, [pc, #60]	; (8009094 <tcp_process+0x2b8>)
 8009056:	4806      	ldr	r0, [pc, #24]	; (8009070 <tcp_process+0x294>)
 8009058:	f006 f9d4 	bl	800f404 <iprintf>
          pcb->unsent = rseg->next;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	66da      	str	r2, [r3, #108]	; 0x6c
 8009064:	e01c      	b.n	80090a0 <tcp_process+0x2c4>
 8009066:	bf00      	nop
 8009068:	08011ac8 	.word	0x08011ac8
 800906c:	08011d00 	.word	0x08011d00
 8009070:	08011b14 	.word	0x08011b14
 8009074:	2000a49c 	.word	0x2000a49c
 8009078:	2000a494 	.word	0x2000a494
 800907c:	2000a490 	.word	0x2000a490
 8009080:	08011d1c 	.word	0x08011d1c
 8009084:	2000a49d 	.word	0x2000a49d
 8009088:	2000a458 	.word	0x2000a458
 800908c:	2000a480 	.word	0x2000a480
 8009090:	08011d3c 	.word	0x08011d3c
 8009094:	08011d54 	.word	0x08011d54
        } else {
          pcb->unacked = rseg->next;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80090a0:	69f8      	ldr	r0, [r7, #28]
 80090a2:	f7fe fc72 	bl	800798a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80090b6:	e006      	b.n	80090c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00a      	beq.n	80090e6 <tcp_process+0x30a>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	6910      	ldr	r0, [r2, #16]
 80090da:	2200      	movs	r2, #0
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	4798      	blx	r3
 80090e0:	4603      	mov	r3, r0
 80090e2:	76bb      	strb	r3, [r7, #26]
 80090e4:	e001      	b.n	80090ea <tcp_process+0x30e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80090ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090ee:	f113 0f0d 	cmn.w	r3, #13
 80090f2:	d102      	bne.n	80090fa <tcp_process+0x31e>
          return ERR_ABRT;
 80090f4:	f06f 030c 	mvn.w	r3, #12
 80090f8:	e250      	b.n	800959c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	8b5b      	ldrh	r3, [r3, #26]
 80090fe:	f043 0302 	orr.w	r3, r3, #2
 8009102:	b29a      	uxth	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009108:	e23a      	b.n	8009580 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800910a:	4b98      	ldr	r3, [pc, #608]	; (800936c <tcp_process+0x590>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8234 	beq.w	8009580 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009118:	4b95      	ldr	r3, [pc, #596]	; (8009370 <tcp_process+0x594>)
 800911a:	6819      	ldr	r1, [r3, #0]
 800911c:	4b95      	ldr	r3, [pc, #596]	; (8009374 <tcp_process+0x598>)
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	4b95      	ldr	r3, [pc, #596]	; (8009378 <tcp_process+0x59c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009128:	4b94      	ldr	r3, [pc, #592]	; (800937c <tcp_process+0x5a0>)
 800912a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800912c:	885b      	ldrh	r3, [r3, #2]
 800912e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009130:	4a92      	ldr	r2, [pc, #584]	; (800937c <tcp_process+0x5a0>)
 8009132:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009134:	8812      	ldrh	r2, [r2, #0]
 8009136:	b292      	uxth	r2, r2
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	4b90      	ldr	r3, [pc, #576]	; (8009380 <tcp_process+0x5a4>)
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	4b90      	ldr	r3, [pc, #576]	; (8009384 <tcp_process+0x5a8>)
 8009142:	4602      	mov	r2, r0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f003 f8dd 	bl	800c304 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009150:	2b05      	cmp	r3, #5
 8009152:	f200 8215 	bhi.w	8009580 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f002 fea7 	bl	800beb0 <tcp_rexmit_rto>
      break;
 8009162:	e20d      	b.n	8009580 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009164:	4b81      	ldr	r3, [pc, #516]	; (800936c <tcp_process+0x590>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80a1 	beq.w	80092b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009172:	4b7f      	ldr	r3, [pc, #508]	; (8009370 <tcp_process+0x594>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	db7e      	blt.n	8009280 <tcp_process+0x4a4>
 8009182:	4b7b      	ldr	r3, [pc, #492]	; (8009370 <tcp_process+0x594>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	dc77      	bgt.n	8009280 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2204      	movs	r2, #4
 8009194:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800919e:	23fa      	movs	r3, #250	; 0xfa
 80091a0:	76bb      	strb	r3, [r7, #26]
 80091a2:	e01d      	b.n	80091e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <tcp_process+0x3e0>
 80091ae:	4b76      	ldr	r3, [pc, #472]	; (8009388 <tcp_process+0x5ac>)
 80091b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80091b4:	4975      	ldr	r1, [pc, #468]	; (800938c <tcp_process+0x5b0>)
 80091b6:	4876      	ldr	r0, [pc, #472]	; (8009390 <tcp_process+0x5b4>)
 80091b8:	f006 f924 	bl	800f404 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <tcp_process+0x400>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6910      	ldr	r0, [r2, #16]
 80091d0:	2200      	movs	r2, #0
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4798      	blx	r3
 80091d6:	4603      	mov	r3, r0
 80091d8:	76bb      	strb	r3, [r7, #26]
 80091da:	e001      	b.n	80091e0 <tcp_process+0x404>
 80091dc:	23f0      	movs	r3, #240	; 0xf0
 80091de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80091e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80091e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80091ec:	f113 0f0d 	cmn.w	r3, #13
 80091f0:	d002      	beq.n	80091f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7fd fd80 	bl	8006cf8 <tcp_abort>
            }
            return ERR_ABRT;
 80091f8:	f06f 030c 	mvn.w	r3, #12
 80091fc:	e1ce      	b.n	800959c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fae0 	bl	80097c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009204:	4b63      	ldr	r3, [pc, #396]	; (8009394 <tcp_process+0x5b8>)
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <tcp_process+0x43c>
            recv_acked--;
 800920c:	4b61      	ldr	r3, [pc, #388]	; (8009394 <tcp_process+0x5b8>)
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	3b01      	subs	r3, #1
 8009212:	b29a      	uxth	r2, r3
 8009214:	4b5f      	ldr	r3, [pc, #380]	; (8009394 <tcp_process+0x5b8>)
 8009216:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800921c:	009a      	lsls	r2, r3, #2
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	f241 111c 	movw	r1, #4380	; 0x111c
 8009228:	428b      	cmp	r3, r1
 800922a:	bf38      	it	cc
 800922c:	460b      	movcc	r3, r1
 800922e:	429a      	cmp	r2, r3
 8009230:	d204      	bcs.n	800923c <tcp_process+0x460>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	b29b      	uxth	r3, r3
 800923a:	e00d      	b.n	8009258 <tcp_process+0x47c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	f241 121c 	movw	r2, #4380	; 0x111c
 8009246:	4293      	cmp	r3, r2
 8009248:	d904      	bls.n	8009254 <tcp_process+0x478>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	b29b      	uxth	r3, r3
 8009252:	e001      	b.n	8009258 <tcp_process+0x47c>
 8009254:	f241 131c 	movw	r3, #4380	; 0x111c
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800925e:	4b4e      	ldr	r3, [pc, #312]	; (8009398 <tcp_process+0x5bc>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d037      	beq.n	80092da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8b5b      	ldrh	r3, [r3, #26]
 800926e:	f043 0302 	orr.w	r3, r3, #2
 8009272:	b29a      	uxth	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2207      	movs	r2, #7
 800927c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800927e:	e02c      	b.n	80092da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009280:	4b3b      	ldr	r3, [pc, #236]	; (8009370 <tcp_process+0x594>)
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	4b3b      	ldr	r3, [pc, #236]	; (8009374 <tcp_process+0x598>)
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	4b3b      	ldr	r3, [pc, #236]	; (8009378 <tcp_process+0x59c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009290:	4b3a      	ldr	r3, [pc, #232]	; (800937c <tcp_process+0x5a0>)
 8009292:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009298:	4a38      	ldr	r2, [pc, #224]	; (800937c <tcp_process+0x5a0>)
 800929a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800929c:	8812      	ldrh	r2, [r2, #0]
 800929e:	b292      	uxth	r2, r2
 80092a0:	9202      	str	r2, [sp, #8]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	4b36      	ldr	r3, [pc, #216]	; (8009380 <tcp_process+0x5a4>)
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4b36      	ldr	r3, [pc, #216]	; (8009384 <tcp_process+0x5a8>)
 80092aa:	4602      	mov	r2, r0
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f003 f829 	bl	800c304 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80092b2:	e167      	b.n	8009584 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <tcp_process+0x590>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8161 	beq.w	8009584 <tcp_process+0x7a8>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	1e5a      	subs	r2, r3, #1
 80092c8:	4b2b      	ldr	r3, [pc, #172]	; (8009378 <tcp_process+0x59c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	f040 8159 	bne.w	8009584 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f002 fe0e 	bl	800bef4 <tcp_rexmit>
      break;
 80092d8:	e154      	b.n	8009584 <tcp_process+0x7a8>
 80092da:	e153      	b.n	8009584 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fa71 	bl	80097c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80092e2:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <tcp_process+0x5bc>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 814c 	beq.w	8009588 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	8b5b      	ldrh	r3, [r3, #26]
 80092f4:	f043 0302 	orr.w	r3, r3, #2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2207      	movs	r2, #7
 8009302:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009304:	e140      	b.n	8009588 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa5c 	bl	80097c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800930c:	4b22      	ldr	r3, [pc, #136]	; (8009398 <tcp_process+0x5bc>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d071      	beq.n	80093fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009318:	4b14      	ldr	r3, [pc, #80]	; (800936c <tcp_process+0x590>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b00      	cmp	r3, #0
 8009322:	d060      	beq.n	80093e6 <tcp_process+0x60a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009328:	4b11      	ldr	r3, [pc, #68]	; (8009370 <tcp_process+0x594>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d15a      	bne.n	80093e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009334:	2b00      	cmp	r3, #0
 8009336:	d156      	bne.n	80093e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8b5b      	ldrh	r3, [r3, #26]
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	b29a      	uxth	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7fe fdbc 	bl	8007ec4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800934c:	4b13      	ldr	r3, [pc, #76]	; (800939c <tcp_process+0x5c0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d105      	bne.n	8009362 <tcp_process+0x586>
 8009356:	4b11      	ldr	r3, [pc, #68]	; (800939c <tcp_process+0x5c0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4a0f      	ldr	r2, [pc, #60]	; (800939c <tcp_process+0x5c0>)
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	e02e      	b.n	80093c0 <tcp_process+0x5e4>
 8009362:	4b0e      	ldr	r3, [pc, #56]	; (800939c <tcp_process+0x5c0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	e027      	b.n	80093ba <tcp_process+0x5de>
 800936a:	bf00      	nop
 800936c:	2000a49c 	.word	0x2000a49c
 8009370:	2000a494 	.word	0x2000a494
 8009374:	2000a49a 	.word	0x2000a49a
 8009378:	2000a490 	.word	0x2000a490
 800937c:	2000a480 	.word	0x2000a480
 8009380:	20004d38 	.word	0x20004d38
 8009384:	20004d3c 	.word	0x20004d3c
 8009388:	08011ac8 	.word	0x08011ac8
 800938c:	08011d68 	.word	0x08011d68
 8009390:	08011b14 	.word	0x08011b14
 8009394:	2000a498 	.word	0x2000a498
 8009398:	2000a49d 	.word	0x2000a49d
 800939c:	2000a464 	.word	0x2000a464
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d104      	bne.n	80093b4 <tcp_process+0x5d8>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	60da      	str	r2, [r3, #12]
 80093b2:	e005      	b.n	80093c0 <tcp_process+0x5e4>
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1ef      	bne.n	80093a0 <tcp_process+0x5c4>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	60da      	str	r2, [r3, #12]
 80093c6:	4b77      	ldr	r3, [pc, #476]	; (80095a4 <tcp_process+0x7c8>)
 80093c8:	2201      	movs	r2, #1
 80093ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	220a      	movs	r2, #10
 80093d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80093d2:	4b75      	ldr	r3, [pc, #468]	; (80095a8 <tcp_process+0x7cc>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60da      	str	r2, [r3, #12]
 80093da:	4a73      	ldr	r2, [pc, #460]	; (80095a8 <tcp_process+0x7cc>)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	f003 f952 	bl	800c688 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80093e4:	e0d2      	b.n	800958c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	8b5b      	ldrh	r3, [r3, #26]
 80093ea:	f043 0302 	orr.w	r3, r3, #2
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2208      	movs	r2, #8
 80093f8:	751a      	strb	r2, [r3, #20]
      break;
 80093fa:	e0c7      	b.n	800958c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093fc:	4b6b      	ldr	r3, [pc, #428]	; (80095ac <tcp_process+0x7d0>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 80c1 	beq.w	800958c <tcp_process+0x7b0>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800940e:	4b68      	ldr	r3, [pc, #416]	; (80095b0 <tcp_process+0x7d4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	f040 80ba 	bne.w	800958c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 80b5 	bne.w	800958c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2206      	movs	r2, #6
 8009426:	751a      	strb	r2, [r3, #20]
      break;
 8009428:	e0b0      	b.n	800958c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9ca 	bl	80097c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009430:	4b60      	ldr	r3, [pc, #384]	; (80095b4 <tcp_process+0x7d8>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0320 	and.w	r3, r3, #32
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 80a9 	beq.w	8009590 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8b5b      	ldrh	r3, [r3, #26]
 8009442:	f043 0302 	orr.w	r3, r3, #2
 8009446:	b29a      	uxth	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7fe fd39 	bl	8007ec4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009452:	4b59      	ldr	r3, [pc, #356]	; (80095b8 <tcp_process+0x7dc>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d105      	bne.n	8009468 <tcp_process+0x68c>
 800945c:	4b56      	ldr	r3, [pc, #344]	; (80095b8 <tcp_process+0x7dc>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	4a55      	ldr	r2, [pc, #340]	; (80095b8 <tcp_process+0x7dc>)
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	e013      	b.n	8009490 <tcp_process+0x6b4>
 8009468:	4b53      	ldr	r3, [pc, #332]	; (80095b8 <tcp_process+0x7dc>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	e00c      	b.n	800948a <tcp_process+0x6ae>
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d104      	bne.n	8009484 <tcp_process+0x6a8>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	e005      	b.n	8009490 <tcp_process+0x6b4>
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1ef      	bne.n	8009470 <tcp_process+0x694>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	60da      	str	r2, [r3, #12]
 8009496:	4b43      	ldr	r3, [pc, #268]	; (80095a4 <tcp_process+0x7c8>)
 8009498:	2201      	movs	r2, #1
 800949a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	220a      	movs	r2, #10
 80094a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80094a2:	4b41      	ldr	r3, [pc, #260]	; (80095a8 <tcp_process+0x7cc>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	4a3f      	ldr	r2, [pc, #252]	; (80095a8 <tcp_process+0x7cc>)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	f003 f8ea 	bl	800c688 <tcp_timer_needed>
      }
      break;
 80094b4:	e06c      	b.n	8009590 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f984 	bl	80097c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80094bc:	4b3b      	ldr	r3, [pc, #236]	; (80095ac <tcp_process+0x7d0>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d065      	beq.n	8009594 <tcp_process+0x7b8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094cc:	4b38      	ldr	r3, [pc, #224]	; (80095b0 <tcp_process+0x7d4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d15f      	bne.n	8009594 <tcp_process+0x7b8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d15b      	bne.n	8009594 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7fe fcf1 	bl	8007ec4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80094e2:	4b35      	ldr	r3, [pc, #212]	; (80095b8 <tcp_process+0x7dc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d105      	bne.n	80094f8 <tcp_process+0x71c>
 80094ec:	4b32      	ldr	r3, [pc, #200]	; (80095b8 <tcp_process+0x7dc>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	4a31      	ldr	r2, [pc, #196]	; (80095b8 <tcp_process+0x7dc>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e013      	b.n	8009520 <tcp_process+0x744>
 80094f8:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <tcp_process+0x7dc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e00c      	b.n	800951a <tcp_process+0x73e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	429a      	cmp	r2, r3
 8009508:	d104      	bne.n	8009514 <tcp_process+0x738>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	e005      	b.n	8009520 <tcp_process+0x744>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1ef      	bne.n	8009500 <tcp_process+0x724>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	60da      	str	r2, [r3, #12]
 8009526:	4b1f      	ldr	r3, [pc, #124]	; (80095a4 <tcp_process+0x7c8>)
 8009528:	2201      	movs	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	220a      	movs	r2, #10
 8009530:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009532:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <tcp_process+0x7cc>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]
 800953a:	4a1b      	ldr	r2, [pc, #108]	; (80095a8 <tcp_process+0x7cc>)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	f003 f8a2 	bl	800c688 <tcp_timer_needed>
      }
      break;
 8009544:	e026      	b.n	8009594 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f93c 	bl	80097c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800954c:	4b17      	ldr	r3, [pc, #92]	; (80095ac <tcp_process+0x7d0>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01f      	beq.n	8009598 <tcp_process+0x7bc>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800955c:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <tcp_process+0x7d4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d119      	bne.n	8009598 <tcp_process+0x7bc>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d115      	bne.n	8009598 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800956c:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <tcp_process+0x7d8>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f043 0310 	orr.w	r3, r3, #16
 8009574:	b2da      	uxtb	r2, r3
 8009576:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <tcp_process+0x7d8>)
 8009578:	701a      	strb	r2, [r3, #0]
      }
      break;
 800957a:	e00d      	b.n	8009598 <tcp_process+0x7bc>
    default:
      break;
 800957c:	bf00      	nop
 800957e:	e00c      	b.n	800959a <tcp_process+0x7be>
      break;
 8009580:	bf00      	nop
 8009582:	e00a      	b.n	800959a <tcp_process+0x7be>
      break;
 8009584:	bf00      	nop
 8009586:	e008      	b.n	800959a <tcp_process+0x7be>
      break;
 8009588:	bf00      	nop
 800958a:	e006      	b.n	800959a <tcp_process+0x7be>
      break;
 800958c:	bf00      	nop
 800958e:	e004      	b.n	800959a <tcp_process+0x7be>
      break;
 8009590:	bf00      	nop
 8009592:	e002      	b.n	800959a <tcp_process+0x7be>
      break;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <tcp_process+0x7be>
      break;
 8009598:	bf00      	nop
  }
  return ERR_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3724      	adds	r7, #36	; 0x24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd90      	pop	{r4, r7, pc}
 80095a4:	2000a46c 	.word	0x2000a46c
 80095a8:	2000a468 	.word	0x2000a468
 80095ac:	2000a49c 	.word	0x2000a49c
 80095b0:	2000a494 	.word	0x2000a494
 80095b4:	2000a49d 	.word	0x2000a49d
 80095b8:	2000a464 	.word	0x2000a464

080095bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <tcp_oos_insert_segment+0x1e>
 80095cc:	4b3b      	ldr	r3, [pc, #236]	; (80096bc <tcp_oos_insert_segment+0x100>)
 80095ce:	f240 421f 	movw	r2, #1055	; 0x41f
 80095d2:	493b      	ldr	r1, [pc, #236]	; (80096c0 <tcp_oos_insert_segment+0x104>)
 80095d4:	483b      	ldr	r0, [pc, #236]	; (80096c4 <tcp_oos_insert_segment+0x108>)
 80095d6:	f005 ff15 	bl	800f404 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	899b      	ldrh	r3, [r3, #12]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fb fa10 	bl	8004a08 <lwip_htons>
 80095e8:	4603      	mov	r3, r0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d028      	beq.n	8009646 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80095f4:	6838      	ldr	r0, [r7, #0]
 80095f6:	f7fe f9b3 	bl	8007960 <tcp_segs_free>
    next = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	603b      	str	r3, [r7, #0]
 80095fe:	e056      	b.n	80096ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	899b      	ldrh	r3, [r3, #12]
 8009606:	b29b      	uxth	r3, r3
 8009608:	4618      	mov	r0, r3
 800960a:	f7fb f9fd 	bl	8004a08 <lwip_htons>
 800960e:	4603      	mov	r3, r0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00d      	beq.n	8009636 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	899b      	ldrh	r3, [r3, #12]
 8009620:	b29c      	uxth	r4, r3
 8009622:	2001      	movs	r0, #1
 8009624:	f7fb f9f0 	bl	8004a08 <lwip_htons>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4322      	orrs	r2, r4
 8009632:	b292      	uxth	r2, r2
 8009634:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7fe f9a2 	bl	800798a <tcp_seg_free>
    while (next &&
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	891b      	ldrh	r3, [r3, #8]
 8009650:	461a      	mov	r2, r3
 8009652:	4b1d      	ldr	r3, [pc, #116]	; (80096c8 <tcp_oos_insert_segment+0x10c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	441a      	add	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	8909      	ldrh	r1, [r1, #8]
 8009662:	440b      	add	r3, r1
 8009664:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009666:	2b00      	cmp	r3, #0
 8009668:	daca      	bge.n	8009600 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01e      	beq.n	80096ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	891b      	ldrh	r3, [r3, #8]
 8009674:	461a      	mov	r2, r3
 8009676:	4b14      	ldr	r3, [pc, #80]	; (80096c8 <tcp_oos_insert_segment+0x10c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	441a      	add	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd12      	ble.n	80096ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	b29a      	uxth	r2, r3
 8009690:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <tcp_oos_insert_segment+0x10c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	b29a      	uxth	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	891b      	ldrh	r3, [r3, #8]
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f7fc fb85 	bl	8005db8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd90      	pop	{r4, r7, pc}
 80096bc:	08011ac8 	.word	0x08011ac8
 80096c0:	08011d88 	.word	0x08011d88
 80096c4:	08011b14 	.word	0x08011b14
 80096c8:	2000a490 	.word	0x2000a490

080096cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80096cc:	b5b0      	push	{r4, r5, r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80096da:	e03e      	b.n	800975a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fc fd72 	bl	80061d4 <pbuf_clen>
 80096f0:	4603      	mov	r3, r0
 80096f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096fa:	8a7a      	ldrh	r2, [r7, #18]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d906      	bls.n	800970e <tcp_free_acked_segments+0x42>
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <tcp_free_acked_segments+0xe0>)
 8009702:	f240 4257 	movw	r2, #1111	; 0x457
 8009706:	492a      	ldr	r1, [pc, #168]	; (80097b0 <tcp_free_acked_segments+0xe4>)
 8009708:	482a      	ldr	r0, [pc, #168]	; (80097b4 <tcp_free_acked_segments+0xe8>)
 800970a:	f005 fe7b 	bl	800f404 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009714:	8a7b      	ldrh	r3, [r7, #18]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	891a      	ldrh	r2, [r3, #8]
 8009724:	4b24      	ldr	r3, [pc, #144]	; (80097b8 <tcp_free_acked_segments+0xec>)
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	4413      	add	r3, r2
 800972a:	b29a      	uxth	r2, r3
 800972c:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <tcp_free_acked_segments+0xec>)
 800972e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009730:	6978      	ldr	r0, [r7, #20]
 8009732:	f7fe f92a 	bl	800798a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00c      	beq.n	800975a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <tcp_free_acked_segments+0x8e>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <tcp_free_acked_segments+0x8e>
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <tcp_free_acked_segments+0xe0>)
 800974e:	f240 4261 	movw	r2, #1121	; 0x461
 8009752:	491a      	ldr	r1, [pc, #104]	; (80097bc <tcp_free_acked_segments+0xf0>)
 8009754:	4817      	ldr	r0, [pc, #92]	; (80097b4 <tcp_free_acked_segments+0xe8>)
 8009756:	f005 fe55 	bl	800f404 <iprintf>
  while (seg_list != NULL &&
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d020      	beq.n	80097a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	f7fb f963 	bl	8004a32 <lwip_htonl>
 800976c:	4604      	mov	r4, r0
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	891b      	ldrh	r3, [r3, #8]
 8009772:	461d      	mov	r5, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	899b      	ldrh	r3, [r3, #12]
 800977a:	b29b      	uxth	r3, r3
 800977c:	4618      	mov	r0, r3
 800977e:	f7fb f943 	bl	8004a08 <lwip_htons>
 8009782:	4603      	mov	r3, r0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <tcp_free_acked_segments+0xc6>
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <tcp_free_acked_segments+0xc8>
 8009792:	2300      	movs	r3, #0
 8009794:	442b      	add	r3, r5
 8009796:	18e2      	adds	r2, r4, r3
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <tcp_free_acked_segments+0xf4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dd9c      	ble.n	80096dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80097a2:	68bb      	ldr	r3, [r7, #8]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bdb0      	pop	{r4, r5, r7, pc}
 80097ac:	08011ac8 	.word	0x08011ac8
 80097b0:	08011db0 	.word	0x08011db0
 80097b4:	08011b14 	.word	0x08011b14
 80097b8:	2000a498 	.word	0x2000a498
 80097bc:	08011dd8 	.word	0x08011dd8
 80097c0:	2000a494 	.word	0x2000a494

080097c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80097c4:	b5b0      	push	{r4, r5, r7, lr}
 80097c6:	b094      	sub	sp, #80	; 0x50
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d106      	bne.n	80097e4 <tcp_receive+0x20>
 80097d6:	4b91      	ldr	r3, [pc, #580]	; (8009a1c <tcp_receive+0x258>)
 80097d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80097dc:	4990      	ldr	r1, [pc, #576]	; (8009a20 <tcp_receive+0x25c>)
 80097de:	4891      	ldr	r0, [pc, #580]	; (8009a24 <tcp_receive+0x260>)
 80097e0:	f005 fe10 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7d1b      	ldrb	r3, [r3, #20]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d806      	bhi.n	80097fa <tcp_receive+0x36>
 80097ec:	4b8b      	ldr	r3, [pc, #556]	; (8009a1c <tcp_receive+0x258>)
 80097ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80097f2:	498d      	ldr	r1, [pc, #564]	; (8009a28 <tcp_receive+0x264>)
 80097f4:	488b      	ldr	r0, [pc, #556]	; (8009a24 <tcp_receive+0x260>)
 80097f6:	f005 fe05 	bl	800f404 <iprintf>

  if (flags & TCP_ACK) {
 80097fa:	4b8c      	ldr	r3, [pc, #560]	; (8009a2c <tcp_receive+0x268>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 0310 	and.w	r3, r3, #16
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8264 	beq.w	8009cd0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800980e:	461a      	mov	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009814:	4413      	add	r3, r2
 8009816:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800981c:	4b84      	ldr	r3, [pc, #528]	; (8009a30 <tcp_receive+0x26c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	db1b      	blt.n	800985e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800982a:	4b81      	ldr	r3, [pc, #516]	; (8009a30 <tcp_receive+0x26c>)
 800982c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800982e:	429a      	cmp	r2, r3
 8009830:	d106      	bne.n	8009840 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009836:	4b7f      	ldr	r3, [pc, #508]	; (8009a34 <tcp_receive+0x270>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	db0e      	blt.n	800985e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009844:	4b7b      	ldr	r3, [pc, #492]	; (8009a34 <tcp_receive+0x270>)
 8009846:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009848:	429a      	cmp	r2, r3
 800984a:	d125      	bne.n	8009898 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800984c:	4b7a      	ldr	r3, [pc, #488]	; (8009a38 <tcp_receive+0x274>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	89db      	ldrh	r3, [r3, #14]
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800985a:	429a      	cmp	r2, r3
 800985c:	d91c      	bls.n	8009898 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800985e:	4b76      	ldr	r3, [pc, #472]	; (8009a38 <tcp_receive+0x274>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	89db      	ldrh	r3, [r3, #14]
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009878:	429a      	cmp	r2, r3
 800987a:	d205      	bcs.n	8009888 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009888:	4b69      	ldr	r3, [pc, #420]	; (8009a30 <tcp_receive+0x26c>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009890:	4b68      	ldr	r3, [pc, #416]	; (8009a34 <tcp_receive+0x270>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009898:	4b66      	ldr	r3, [pc, #408]	; (8009a34 <tcp_receive+0x270>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc58      	bgt.n	8009958 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80098a6:	4b65      	ldr	r3, [pc, #404]	; (8009a3c <tcp_receive+0x278>)
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d14b      	bne.n	8009946 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80098b8:	4413      	add	r3, r2
 80098ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098bc:	429a      	cmp	r2, r3
 80098be:	d142      	bne.n	8009946 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	db3d      	blt.n	8009946 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ce:	4b59      	ldr	r3, [pc, #356]	; (8009a34 <tcp_receive+0x270>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d137      	bne.n	8009946 <tcp_receive+0x182>
              found_dupack = 1;
 80098d6:	2301      	movs	r3, #1
 80098d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098e0:	2bff      	cmp	r3, #255	; 0xff
 80098e2:	d007      	beq.n	80098f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098ea:	3301      	adds	r3, #1
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d91b      	bls.n	8009936 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009908:	4413      	add	r3, r2
 800990a:	b29a      	uxth	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009912:	429a      	cmp	r2, r3
 8009914:	d30a      	bcc.n	800992c <tcp_receive+0x168>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009920:	4413      	add	r3, r2
 8009922:	b29a      	uxth	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800992a:	e004      	b.n	8009936 <tcp_receive+0x172>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009932:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800993c:	2b02      	cmp	r3, #2
 800993e:	d902      	bls.n	8009946 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f002 fb43 	bl	800bfcc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009948:	2b00      	cmp	r3, #0
 800994a:	f040 8161 	bne.w	8009c10 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009956:	e15b      	b.n	8009c10 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009958:	4b36      	ldr	r3, [pc, #216]	; (8009a34 <tcp_receive+0x270>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	f2c0 814e 	blt.w	8009c06 <tcp_receive+0x442>
 800996a:	4b32      	ldr	r3, [pc, #200]	; (8009a34 <tcp_receive+0x270>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	f300 8146 	bgt.w	8009c06 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	8b5b      	ldrh	r3, [r3, #26]
 800997e:	f003 0304 	and.w	r3, r3, #4
 8009982:	2b00      	cmp	r3, #0
 8009984:	d010      	beq.n	80099a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	8b5b      	ldrh	r3, [r3, #26]
 800998a:	f023 0304 	bic.w	r3, r3, #4
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099b6:	10db      	asrs	r3, r3, #3
 80099b8:	b21b      	sxth	r3, r3
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4413      	add	r3, r2
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	b21a      	sxth	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80099d0:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <tcp_receive+0x270>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	b29b      	uxth	r3, r3
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80099e8:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <tcp_receive+0x270>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7d1b      	ldrb	r3, [r3, #20]
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	f240 8097 	bls.w	8009b28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d245      	bcs.n	8009a96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	8b5b      	ldrh	r3, [r3, #26]
 8009a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d014      	beq.n	8009a40 <tcp_receive+0x27c>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e013      	b.n	8009a42 <tcp_receive+0x27e>
 8009a1a:	bf00      	nop
 8009a1c:	08011ac8 	.word	0x08011ac8
 8009a20:	08011df8 	.word	0x08011df8
 8009a24:	08011b14 	.word	0x08011b14
 8009a28:	08011e14 	.word	0x08011e14
 8009a2c:	2000a49c 	.word	0x2000a49c
 8009a30:	2000a490 	.word	0x2000a490
 8009a34:	2000a494 	.word	0x2000a494
 8009a38:	2000a480 	.word	0x2000a480
 8009a3c:	2000a49a 	.word	0x2000a49a
 8009a40:	2302      	movs	r3, #2
 8009a42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009a46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a50:	fb12 f303 	smulbb	r3, r2, r3
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	bf28      	it	cs
 8009a5c:	4613      	movcs	r3, r2
 8009a5e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a68:	4413      	add	r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d309      	bcc.n	8009a8a <tcp_receive+0x2c6>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a7e:	4413      	add	r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a88:	e04e      	b.n	8009b28 <tcp_receive+0x364>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a94:	e048      	b.n	8009b28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009a9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a9e:	4413      	add	r3, r2
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d309      	bcc.n	8009ac0 <tcp_receive+0x2fc>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ab4:	4413      	add	r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009abe:	e004      	b.n	8009aca <tcp_receive+0x306>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d326      	bcc.n	8009b28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009afa:	4413      	add	r3, r2
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d30a      	bcc.n	8009b1e <tcp_receive+0x35a>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b12:	4413      	add	r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b1c:	e004      	b.n	8009b28 <tcp_receive+0x364>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b30:	4a98      	ldr	r2, [pc, #608]	; (8009d94 <tcp_receive+0x5d0>)
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff fdca 	bl	80096cc <tcp_free_acked_segments>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b46:	4a94      	ldr	r2, [pc, #592]	; (8009d98 <tcp_receive+0x5d4>)
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fdbf 	bl	80096cc <tcp_free_acked_segments>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d104      	bne.n	8009b66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b62:	861a      	strh	r2, [r3, #48]	; 0x30
 8009b64:	e002      	b.n	8009b6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d103      	bne.n	8009b82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009b88:	4b84      	ldr	r3, [pc, #528]	; (8009d9c <tcp_receive+0x5d8>)
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8b5b      	ldrh	r3, [r3, #26]
 8009b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d035      	beq.n	8009c0e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d118      	bne.n	8009bdc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00c      	beq.n	8009bcc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fa ff37 	bl	8004a32 <lwip_htonl>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dc20      	bgt.n	8009c0e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8b5b      	ldrh	r3, [r3, #26]
 8009bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009bda:	e018      	b.n	8009c0e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fa ff22 	bl	8004a32 <lwip_htonl>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	1ae3      	subs	r3, r4, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	dc0b      	bgt.n	8009c0e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	8b5b      	ldrh	r3, [r3, #26]
 8009bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c04:	e003      	b.n	8009c0e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f002 fbce 	bl	800c3a8 <tcp_send_empty_ack>
 8009c0c:	e000      	b.n	8009c10 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c0e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d05b      	beq.n	8009cd0 <tcp_receive+0x50c>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1c:	4b60      	ldr	r3, [pc, #384]	; (8009da0 <tcp_receive+0x5dc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da54      	bge.n	8009cd0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009c26:	4b5f      	ldr	r3, [pc, #380]	; (8009da4 <tcp_receive+0x5e0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009c3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c44:	10db      	asrs	r3, r3, #3
 8009c46:	b21b      	sxth	r3, r3
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c5e:	4413      	add	r3, r2
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	b21a      	sxth	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009c68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da05      	bge.n	8009c7c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009c70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c74:	425b      	negs	r3, r3
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009c7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c86:	109b      	asrs	r3, r3, #2
 8009c88:	b21b      	sxth	r3, r3
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ca0:	4413      	add	r3, r2
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	b21a      	sxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009cb0:	10db      	asrs	r3, r3, #3
 8009cb2:	b21b      	sxth	r3, r3
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	b21a      	sxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009cd0:	4b35      	ldr	r3, [pc, #212]	; (8009da8 <tcp_receive+0x5e4>)
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 84e2 	beq.w	800a69e <tcp_receive+0xeda>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	7d1b      	ldrb	r3, [r3, #20]
 8009cde:	2b06      	cmp	r3, #6
 8009ce0:	f200 84dd 	bhi.w	800a69e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ce8:	4b30      	ldr	r3, [pc, #192]	; (8009dac <tcp_receive+0x5e8>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f2c0 808f 	blt.w	8009e14 <tcp_receive+0x650>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cfa:	4b2b      	ldr	r3, [pc, #172]	; (8009da8 <tcp_receive+0x5e4>)
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	4b2a      	ldr	r3, [pc, #168]	; (8009dac <tcp_receive+0x5e8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	440b      	add	r3, r1
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	3301      	adds	r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f300 8082 	bgt.w	8009e14 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <tcp_receive+0x5ec>)
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d1a:	4b24      	ldr	r3, [pc, #144]	; (8009dac <tcp_receive+0x5e8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009d22:	4b23      	ldr	r3, [pc, #140]	; (8009db0 <tcp_receive+0x5ec>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <tcp_receive+0x574>
 8009d2a:	4b22      	ldr	r3, [pc, #136]	; (8009db4 <tcp_receive+0x5f0>)
 8009d2c:	f240 5294 	movw	r2, #1428	; 0x594
 8009d30:	4921      	ldr	r1, [pc, #132]	; (8009db8 <tcp_receive+0x5f4>)
 8009d32:	4822      	ldr	r0, [pc, #136]	; (8009dbc <tcp_receive+0x5f8>)
 8009d34:	f005 fb66 	bl	800f404 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d906      	bls.n	8009d50 <tcp_receive+0x58c>
 8009d42:	4b1c      	ldr	r3, [pc, #112]	; (8009db4 <tcp_receive+0x5f0>)
 8009d44:	f240 5295 	movw	r2, #1429	; 0x595
 8009d48:	491d      	ldr	r1, [pc, #116]	; (8009dc0 <tcp_receive+0x5fc>)
 8009d4a:	481c      	ldr	r0, [pc, #112]	; (8009dbc <tcp_receive+0x5f8>)
 8009d4c:	f005 fb5a 	bl	800f404 <iprintf>
      off = (u16_t)off32;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009d56:	4b16      	ldr	r3, [pc, #88]	; (8009db0 <tcp_receive+0x5ec>)
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	891b      	ldrh	r3, [r3, #8]
 8009d5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d906      	bls.n	8009d72 <tcp_receive+0x5ae>
 8009d64:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <tcp_receive+0x5f0>)
 8009d66:	f240 5297 	movw	r2, #1431	; 0x597
 8009d6a:	4916      	ldr	r1, [pc, #88]	; (8009dc4 <tcp_receive+0x600>)
 8009d6c:	4813      	ldr	r0, [pc, #76]	; (8009dbc <tcp_receive+0x5f8>)
 8009d6e:	f005 fb49 	bl	800f404 <iprintf>
      inseg.len -= off;
 8009d72:	4b0f      	ldr	r3, [pc, #60]	; (8009db0 <tcp_receive+0x5ec>)
 8009d74:	891a      	ldrh	r2, [r3, #8]
 8009d76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	4b0c      	ldr	r3, [pc, #48]	; (8009db0 <tcp_receive+0x5ec>)
 8009d80:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009d82:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <tcp_receive+0x5ec>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	891a      	ldrh	r2, [r3, #8]
 8009d88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009d90:	e02a      	b.n	8009de8 <tcp_receive+0x624>
 8009d92:	bf00      	nop
 8009d94:	08011e30 	.word	0x08011e30
 8009d98:	08011e38 	.word	0x08011e38
 8009d9c:	2000a498 	.word	0x2000a498
 8009da0:	2000a494 	.word	0x2000a494
 8009da4:	2000a458 	.word	0x2000a458
 8009da8:	2000a49a 	.word	0x2000a49a
 8009dac:	2000a490 	.word	0x2000a490
 8009db0:	2000a470 	.word	0x2000a470
 8009db4:	08011ac8 	.word	0x08011ac8
 8009db8:	08011e40 	.word	0x08011e40
 8009dbc:	08011b14 	.word	0x08011b14
 8009dc0:	08011e50 	.word	0x08011e50
 8009dc4:	08011e60 	.word	0x08011e60
        off -= p->len;
 8009dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dca:	895b      	ldrh	r3, [r3, #10]
 8009dcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009dda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dde:	2200      	movs	r2, #0
 8009de0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dea:	895b      	ldrh	r3, [r3, #10]
 8009dec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d8e9      	bhi.n	8009dc8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009dfc:	f7fc f8dc 	bl	8005fb8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	4a91      	ldr	r2, [pc, #580]	; (800a04c <tcp_receive+0x888>)
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	4b91      	ldr	r3, [pc, #580]	; (800a050 <tcp_receive+0x88c>)
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	4a8f      	ldr	r2, [pc, #572]	; (800a04c <tcp_receive+0x888>)
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e12:	e00d      	b.n	8009e30 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009e14:	4b8d      	ldr	r3, [pc, #564]	; (800a04c <tcp_receive+0x888>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	da06      	bge.n	8009e30 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	8b5b      	ldrh	r3, [r3, #26]
 8009e26:	f043 0302 	orr.w	r3, r3, #2
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e30:	4b86      	ldr	r3, [pc, #536]	; (800a04c <tcp_receive+0x888>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f2c0 842a 	blt.w	800a694 <tcp_receive+0xed0>
 8009e40:	4b82      	ldr	r3, [pc, #520]	; (800a04c <tcp_receive+0x888>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e4c:	440b      	add	r3, r1
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	3301      	adds	r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f300 841e 	bgt.w	800a694 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e5c:	4b7b      	ldr	r3, [pc, #492]	; (800a04c <tcp_receive+0x888>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	f040 829a 	bne.w	800a39a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009e66:	4b7a      	ldr	r3, [pc, #488]	; (800a050 <tcp_receive+0x88c>)
 8009e68:	891c      	ldrh	r4, [r3, #8]
 8009e6a:	4b79      	ldr	r3, [pc, #484]	; (800a050 <tcp_receive+0x88c>)
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	899b      	ldrh	r3, [r3, #12]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fa fdc8 	bl	8004a08 <lwip_htons>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0303 	and.w	r3, r3, #3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <tcp_receive+0x6c4>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e000      	b.n	8009e8a <tcp_receive+0x6c6>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4423      	add	r3, r4
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	4b71      	ldr	r3, [pc, #452]	; (800a054 <tcp_receive+0x890>)
 8009e90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e96:	4b6f      	ldr	r3, [pc, #444]	; (800a054 <tcp_receive+0x890>)
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d275      	bcs.n	8009f8a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e9e:	4b6c      	ldr	r3, [pc, #432]	; (800a050 <tcp_receive+0x88c>)
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	899b      	ldrh	r3, [r3, #12]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fa fdae 	bl	8004a08 <lwip_htons>
 8009eac:	4603      	mov	r3, r0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01f      	beq.n	8009ef8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009eb8:	4b65      	ldr	r3, [pc, #404]	; (800a050 <tcp_receive+0x88c>)
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	899b      	ldrh	r3, [r3, #12]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	b21b      	sxth	r3, r3
 8009ec2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ec6:	b21c      	sxth	r4, r3
 8009ec8:	4b61      	ldr	r3, [pc, #388]	; (800a050 <tcp_receive+0x88c>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	899b      	ldrh	r3, [r3, #12]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fa fd99 	bl	8004a08 <lwip_htons>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fa fd90 	bl	8004a08 <lwip_htons>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	b21b      	sxth	r3, r3
 8009eec:	4323      	orrs	r3, r4
 8009eee:	b21a      	sxth	r2, r3
 8009ef0:	4b57      	ldr	r3, [pc, #348]	; (800a050 <tcp_receive+0x88c>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009efc:	4b54      	ldr	r3, [pc, #336]	; (800a050 <tcp_receive+0x88c>)
 8009efe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f00:	4b53      	ldr	r3, [pc, #332]	; (800a050 <tcp_receive+0x88c>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	899b      	ldrh	r3, [r3, #12]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fa fd7d 	bl	8004a08 <lwip_htons>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <tcp_receive+0x762>
            inseg.len -= 1;
 8009f1a:	4b4d      	ldr	r3, [pc, #308]	; (800a050 <tcp_receive+0x88c>)
 8009f1c:	891b      	ldrh	r3, [r3, #8]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	4b4b      	ldr	r3, [pc, #300]	; (800a050 <tcp_receive+0x88c>)
 8009f24:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009f26:	4b4a      	ldr	r3, [pc, #296]	; (800a050 <tcp_receive+0x88c>)
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4a49      	ldr	r2, [pc, #292]	; (800a050 <tcp_receive+0x88c>)
 8009f2c:	8912      	ldrh	r2, [r2, #8]
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fb ff41 	bl	8005db8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009f36:	4b46      	ldr	r3, [pc, #280]	; (800a050 <tcp_receive+0x88c>)
 8009f38:	891c      	ldrh	r4, [r3, #8]
 8009f3a:	4b45      	ldr	r3, [pc, #276]	; (800a050 <tcp_receive+0x88c>)
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	899b      	ldrh	r3, [r3, #12]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fa fd60 	bl	8004a08 <lwip_htons>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <tcp_receive+0x794>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <tcp_receive+0x796>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4423      	add	r3, r4
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	4b3d      	ldr	r3, [pc, #244]	; (800a054 <tcp_receive+0x890>)
 8009f60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f62:	4b3c      	ldr	r3, [pc, #240]	; (800a054 <tcp_receive+0x890>)
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	4b38      	ldr	r3, [pc, #224]	; (800a04c <tcp_receive+0x888>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	441a      	add	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f76:	440b      	add	r3, r1
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d006      	beq.n	8009f8a <tcp_receive+0x7c6>
 8009f7c:	4b36      	ldr	r3, [pc, #216]	; (800a058 <tcp_receive+0x894>)
 8009f7e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009f82:	4936      	ldr	r1, [pc, #216]	; (800a05c <tcp_receive+0x898>)
 8009f84:	4836      	ldr	r0, [pc, #216]	; (800a060 <tcp_receive+0x89c>)
 8009f86:	f005 fa3d 	bl	800f404 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 80e7 	beq.w	800a162 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f94:	4b2e      	ldr	r3, [pc, #184]	; (800a050 <tcp_receive+0x88c>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	899b      	ldrh	r3, [r3, #12]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fa fd33 	bl	8004a08 <lwip_htons>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d010      	beq.n	8009fd0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009fae:	e00a      	b.n	8009fc6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fb4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7fd fce2 	bl	800798a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <tcp_receive+0x7ec>
 8009fce:	e0c8      	b.n	800a162 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009fd6:	e052      	b.n	800a07e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	899b      	ldrh	r3, [r3, #12]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fa fd11 	bl	8004a08 <lwip_htons>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d03d      	beq.n	800a06e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009ff2:	4b17      	ldr	r3, [pc, #92]	; (800a050 <tcp_receive+0x88c>)
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	899b      	ldrh	r3, [r3, #12]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fa fd04 	bl	8004a08 <lwip_htons>
 800a000:	4603      	mov	r3, r0
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d130      	bne.n	800a06e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a00c:	4b10      	ldr	r3, [pc, #64]	; (800a050 <tcp_receive+0x88c>)
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	899b      	ldrh	r3, [r3, #12]
 800a012:	b29c      	uxth	r4, r3
 800a014:	2001      	movs	r0, #1
 800a016:	f7fa fcf7 	bl	8004a08 <lwip_htons>
 800a01a:	4603      	mov	r3, r0
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b0c      	ldr	r3, [pc, #48]	; (800a050 <tcp_receive+0x88c>)
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	4322      	orrs	r2, r4
 800a024:	b292      	uxth	r2, r2
 800a026:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a028:	4b09      	ldr	r3, [pc, #36]	; (800a050 <tcp_receive+0x88c>)
 800a02a:	891c      	ldrh	r4, [r3, #8]
 800a02c:	4b08      	ldr	r3, [pc, #32]	; (800a050 <tcp_receive+0x88c>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	899b      	ldrh	r3, [r3, #12]
 800a032:	b29b      	uxth	r3, r3
 800a034:	4618      	mov	r0, r3
 800a036:	f7fa fce7 	bl	8004a08 <lwip_htons>
 800a03a:	4603      	mov	r3, r0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <tcp_receive+0x8a0>
 800a046:	2301      	movs	r3, #1
 800a048:	e00d      	b.n	800a066 <tcp_receive+0x8a2>
 800a04a:	bf00      	nop
 800a04c:	2000a490 	.word	0x2000a490
 800a050:	2000a470 	.word	0x2000a470
 800a054:	2000a49a 	.word	0x2000a49a
 800a058:	08011ac8 	.word	0x08011ac8
 800a05c:	08011e70 	.word	0x08011e70
 800a060:	08011b14 	.word	0x08011b14
 800a064:	2300      	movs	r3, #0
 800a066:	4423      	add	r3, r4
 800a068:	b29a      	uxth	r2, r3
 800a06a:	4b98      	ldr	r3, [pc, #608]	; (800a2cc <tcp_receive+0xb08>)
 800a06c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a070:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a078:	6938      	ldr	r0, [r7, #16]
 800a07a:	f7fd fc86 	bl	800798a <tcp_seg_free>
            while (next &&
 800a07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a084:	4b91      	ldr	r3, [pc, #580]	; (800a2cc <tcp_receive+0xb08>)
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	4b91      	ldr	r3, [pc, #580]	; (800a2d0 <tcp_receive+0xb0c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	441a      	add	r2, r3
 800a090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a098:	8909      	ldrh	r1, [r1, #8]
 800a09a:	440b      	add	r3, r1
 800a09c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	da9a      	bge.n	8009fd8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d059      	beq.n	800a15c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a0a8:	4b88      	ldr	r3, [pc, #544]	; (800a2cc <tcp_receive+0xb08>)
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4b88      	ldr	r3, [pc, #544]	; (800a2d0 <tcp_receive+0xb0c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	441a      	add	r2, r3
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dd4d      	ble.n	800a15c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	4b81      	ldr	r3, [pc, #516]	; (800a2d0 <tcp_receive+0xb0c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	4b80      	ldr	r3, [pc, #512]	; (800a2d4 <tcp_receive+0xb10>)
 800a0d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a0d6:	4b7f      	ldr	r3, [pc, #508]	; (800a2d4 <tcp_receive+0xb10>)
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	899b      	ldrh	r3, [r3, #12]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fa fc92 	bl	8004a08 <lwip_htons>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 0302 	and.w	r3, r3, #2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d005      	beq.n	800a0fc <tcp_receive+0x938>
                inseg.len -= 1;
 800a0f0:	4b78      	ldr	r3, [pc, #480]	; (800a2d4 <tcp_receive+0xb10>)
 800a0f2:	891b      	ldrh	r3, [r3, #8]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	4b76      	ldr	r3, [pc, #472]	; (800a2d4 <tcp_receive+0xb10>)
 800a0fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a0fc:	4b75      	ldr	r3, [pc, #468]	; (800a2d4 <tcp_receive+0xb10>)
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4a74      	ldr	r2, [pc, #464]	; (800a2d4 <tcp_receive+0xb10>)
 800a102:	8912      	ldrh	r2, [r2, #8]
 800a104:	4611      	mov	r1, r2
 800a106:	4618      	mov	r0, r3
 800a108:	f7fb fe56 	bl	8005db8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a10c:	4b71      	ldr	r3, [pc, #452]	; (800a2d4 <tcp_receive+0xb10>)
 800a10e:	891c      	ldrh	r4, [r3, #8]
 800a110:	4b70      	ldr	r3, [pc, #448]	; (800a2d4 <tcp_receive+0xb10>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	899b      	ldrh	r3, [r3, #12]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fa fc75 	bl	8004a08 <lwip_htons>
 800a11e:	4603      	mov	r3, r0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <tcp_receive+0x96a>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <tcp_receive+0x96c>
 800a12e:	2300      	movs	r3, #0
 800a130:	4423      	add	r3, r4
 800a132:	b29a      	uxth	r2, r3
 800a134:	4b65      	ldr	r3, [pc, #404]	; (800a2cc <tcp_receive+0xb08>)
 800a136:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a138:	4b64      	ldr	r3, [pc, #400]	; (800a2cc <tcp_receive+0xb08>)
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	4b64      	ldr	r3, [pc, #400]	; (800a2d0 <tcp_receive+0xb0c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	441a      	add	r2, r3
 800a144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d006      	beq.n	800a15c <tcp_receive+0x998>
 800a14e:	4b62      	ldr	r3, [pc, #392]	; (800a2d8 <tcp_receive+0xb14>)
 800a150:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a154:	4961      	ldr	r1, [pc, #388]	; (800a2dc <tcp_receive+0xb18>)
 800a156:	4862      	ldr	r0, [pc, #392]	; (800a2e0 <tcp_receive+0xb1c>)
 800a158:	f005 f954 	bl	800f404 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a160:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a162:	4b5a      	ldr	r3, [pc, #360]	; (800a2cc <tcp_receive+0xb08>)
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	4b59      	ldr	r3, [pc, #356]	; (800a2d0 <tcp_receive+0xb0c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	441a      	add	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a176:	4b55      	ldr	r3, [pc, #340]	; (800a2cc <tcp_receive+0xb08>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d206      	bcs.n	800a18c <tcp_receive+0x9c8>
 800a17e:	4b56      	ldr	r3, [pc, #344]	; (800a2d8 <tcp_receive+0xb14>)
 800a180:	f240 6207 	movw	r2, #1543	; 0x607
 800a184:	4957      	ldr	r1, [pc, #348]	; (800a2e4 <tcp_receive+0xb20>)
 800a186:	4856      	ldr	r0, [pc, #344]	; (800a2e0 <tcp_receive+0xb1c>)
 800a188:	f005 f93c 	bl	800f404 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a190:	4b4e      	ldr	r3, [pc, #312]	; (800a2cc <tcp_receive+0xb08>)
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	b29a      	uxth	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fc fdb7 	bl	8006d10 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a1a2:	4b4c      	ldr	r3, [pc, #304]	; (800a2d4 <tcp_receive+0xb10>)
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	891b      	ldrh	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a1ac:	4b49      	ldr	r3, [pc, #292]	; (800a2d4 <tcp_receive+0xb10>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4a4d      	ldr	r2, [pc, #308]	; (800a2e8 <tcp_receive+0xb24>)
 800a1b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a1b4:	4b47      	ldr	r3, [pc, #284]	; (800a2d4 <tcp_receive+0xb10>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1ba:	4b46      	ldr	r3, [pc, #280]	; (800a2d4 <tcp_receive+0xb10>)
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	899b      	ldrh	r3, [r3, #12]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fa fc20 	bl	8004a08 <lwip_htons>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 80b8 	beq.w	800a346 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a1d6:	4b45      	ldr	r3, [pc, #276]	; (800a2ec <tcp_receive+0xb28>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f043 0320 	orr.w	r3, r3, #32
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	4b42      	ldr	r3, [pc, #264]	; (800a2ec <tcp_receive+0xb28>)
 800a1e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a1e4:	e0af      	b.n	800a346 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	4a36      	ldr	r2, [pc, #216]	; (800a2d0 <tcp_receive+0xb0c>)
 800a1f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	891b      	ldrh	r3, [r3, #8]
 800a1fc:	461c      	mov	r4, r3
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	899b      	ldrh	r3, [r3, #12]
 800a204:	b29b      	uxth	r3, r3
 800a206:	4618      	mov	r0, r3
 800a208:	f7fa fbfe 	bl	8004a08 <lwip_htons>
 800a20c:	4603      	mov	r3, r0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 0303 	and.w	r3, r3, #3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <tcp_receive+0xa58>
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <tcp_receive+0xa5a>
 800a21c:	2300      	movs	r3, #0
 800a21e:	191a      	adds	r2, r3, r4
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a22e:	461c      	mov	r4, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	891b      	ldrh	r3, [r3, #8]
 800a234:	461d      	mov	r5, r3
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	899b      	ldrh	r3, [r3, #12]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fa fbe2 	bl	8004a08 <lwip_htons>
 800a244:	4603      	mov	r3, r0
 800a246:	b2db      	uxtb	r3, r3
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <tcp_receive+0xa90>
 800a250:	2301      	movs	r3, #1
 800a252:	e000      	b.n	800a256 <tcp_receive+0xa92>
 800a254:	2300      	movs	r3, #0
 800a256:	442b      	add	r3, r5
 800a258:	429c      	cmp	r4, r3
 800a25a:	d206      	bcs.n	800a26a <tcp_receive+0xaa6>
 800a25c:	4b1e      	ldr	r3, [pc, #120]	; (800a2d8 <tcp_receive+0xb14>)
 800a25e:	f240 622b 	movw	r2, #1579	; 0x62b
 800a262:	4923      	ldr	r1, [pc, #140]	; (800a2f0 <tcp_receive+0xb2c>)
 800a264:	481e      	ldr	r0, [pc, #120]	; (800a2e0 <tcp_receive+0xb1c>)
 800a266:	f005 f8cd 	bl	800f404 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	891b      	ldrh	r3, [r3, #8]
 800a26e:	461c      	mov	r4, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	899b      	ldrh	r3, [r3, #12]
 800a276:	b29b      	uxth	r3, r3
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fa fbc5 	bl	8004a08 <lwip_htons>
 800a27e:	4603      	mov	r3, r0
 800a280:	b2db      	uxtb	r3, r3
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <tcp_receive+0xaca>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <tcp_receive+0xacc>
 800a28e:	2300      	movs	r3, #0
 800a290:	1919      	adds	r1, r3, r4
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a296:	b28b      	uxth	r3, r1
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7fc fd35 	bl	8006d10 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	891b      	ldrh	r3, [r3, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d028      	beq.n	800a302 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a2b0:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <tcp_receive+0xb24>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01d      	beq.n	800a2f4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a2b8:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <tcp_receive+0xb24>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f7fb ffc0 	bl	8006248 <pbuf_cat>
 800a2c8:	e018      	b.n	800a2fc <tcp_receive+0xb38>
 800a2ca:	bf00      	nop
 800a2cc:	2000a49a 	.word	0x2000a49a
 800a2d0:	2000a490 	.word	0x2000a490
 800a2d4:	2000a470 	.word	0x2000a470
 800a2d8:	08011ac8 	.word	0x08011ac8
 800a2dc:	08011ea8 	.word	0x08011ea8
 800a2e0:	08011b14 	.word	0x08011b14
 800a2e4:	08011ee4 	.word	0x08011ee4
 800a2e8:	2000a4a0 	.word	0x2000a4a0
 800a2ec:	2000a49d 	.word	0x2000a49d
 800a2f0:	08011f04 	.word	0x08011f04
            } else {
              recv_data = cseg->p;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	4a70      	ldr	r2, [pc, #448]	; (800a4bc <tcp_receive+0xcf8>)
 800a2fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2200      	movs	r2, #0
 800a300:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	899b      	ldrh	r3, [r3, #12]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fa fb7c 	bl	8004a08 <lwip_htons>
 800a310:	4603      	mov	r3, r0
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 0301 	and.w	r3, r3, #1
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00d      	beq.n	800a338 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a31c:	4b68      	ldr	r3, [pc, #416]	; (800a4c0 <tcp_receive+0xcfc>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	f043 0320 	orr.w	r3, r3, #32
 800a324:	b2da      	uxtb	r2, r3
 800a326:	4b66      	ldr	r3, [pc, #408]	; (800a4c0 <tcp_receive+0xcfc>)
 800a328:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	7d1b      	ldrb	r3, [r3, #20]
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d102      	bne.n	800a338 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2207      	movs	r2, #7
 800a336:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a340:	68b8      	ldr	r0, [r7, #8]
 800a342:	f7fd fb22 	bl	800798a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d008      	beq.n	800a360 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a35a:	429a      	cmp	r2, r3
 800a35c:	f43f af43 	beq.w	800a1e6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	8b5b      	ldrh	r3, [r3, #26]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00e      	beq.n	800a38a <tcp_receive+0xbc6>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	8b5b      	ldrh	r3, [r3, #26]
 800a370:	f023 0301 	bic.w	r3, r3, #1
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	835a      	strh	r2, [r3, #26]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8b5b      	ldrh	r3, [r3, #26]
 800a37e:	f043 0302 	orr.w	r3, r3, #2
 800a382:	b29a      	uxth	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a388:	e188      	b.n	800a69c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	8b5b      	ldrh	r3, [r3, #26]
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a398:	e180      	b.n	800a69c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a3a2:	4848      	ldr	r0, [pc, #288]	; (800a4c4 <tcp_receive+0xd00>)
 800a3a4:	f7fd fb0a 	bl	80079bc <tcp_seg_copy>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	675a      	str	r2, [r3, #116]	; 0x74
 800a3ae:	e16d      	b.n	800a68c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ba:	e157      	b.n	800a66c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	4b41      	ldr	r3, [pc, #260]	; (800a4c8 <tcp_receive+0xd04>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d11d      	bne.n	800a406 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a3ca:	4b3e      	ldr	r3, [pc, #248]	; (800a4c4 <tcp_receive+0xd00>)
 800a3cc:	891a      	ldrh	r2, [r3, #8]
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	891b      	ldrh	r3, [r3, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	f240 814f 	bls.w	800a676 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a3d8:	483a      	ldr	r0, [pc, #232]	; (800a4c4 <tcp_receive+0xd00>)
 800a3da:	f7fd faef 	bl	80079bc <tcp_seg_copy>
 800a3de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 8149 	beq.w	800a67a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e002      	b.n	800a3fc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a3fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3fe:	6978      	ldr	r0, [r7, #20]
 800a400:	f7ff f8dc 	bl	80095bc <tcp_oos_insert_segment>
                }
                break;
 800a404:	e139      	b.n	800a67a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d117      	bne.n	800a43c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a40c:	4b2e      	ldr	r3, [pc, #184]	; (800a4c8 <tcp_receive+0xd04>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	da57      	bge.n	800a4cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a41c:	4829      	ldr	r0, [pc, #164]	; (800a4c4 <tcp_receive+0xd00>)
 800a41e:	f7fd facd 	bl	80079bc <tcp_seg_copy>
 800a422:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8129 	beq.w	800a67e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a434:	69b8      	ldr	r0, [r7, #24]
 800a436:	f7ff f8c1 	bl	80095bc <tcp_oos_insert_segment>
                  }
                  break;
 800a43a:	e120      	b.n	800a67e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a43c:	4b22      	ldr	r3, [pc, #136]	; (800a4c8 <tcp_receive+0xd04>)
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	db3e      	blt.n	800a4cc <tcp_receive+0xd08>
 800a44e:	4b1e      	ldr	r3, [pc, #120]	; (800a4c8 <tcp_receive+0xd04>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	3301      	adds	r3, #1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dc35      	bgt.n	800a4cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a460:	4818      	ldr	r0, [pc, #96]	; (800a4c4 <tcp_receive+0xd00>)
 800a462:	f7fd faab 	bl	80079bc <tcp_seg_copy>
 800a466:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 8109 	beq.w	800a682 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a478:	8912      	ldrh	r2, [r2, #8]
 800a47a:	441a      	add	r2, r3
 800a47c:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <tcp_receive+0xd04>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	dd12      	ble.n	800a4ac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a486:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <tcp_receive+0xd04>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	b29b      	uxth	r3, r3
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	b29a      	uxth	r2, r3
 800a498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	891b      	ldrh	r3, [r3, #8]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fb fc86 	bl	8005db8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a4b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4b4:	69f8      	ldr	r0, [r7, #28]
 800a4b6:	f7ff f881 	bl	80095bc <tcp_oos_insert_segment>
                  }
                  break;
 800a4ba:	e0e2      	b.n	800a682 <tcp_receive+0xebe>
 800a4bc:	2000a4a0 	.word	0x2000a4a0
 800a4c0:	2000a49d 	.word	0x2000a49d
 800a4c4:	2000a470 	.word	0x2000a470
 800a4c8:	2000a490 	.word	0x2000a490
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f040 80c6 	bne.w	800a666 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a4da:	4b80      	ldr	r3, [pc, #512]	; (800a6dc <tcp_receive+0xf18>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f340 80bd 	ble.w	800a666 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	899b      	ldrh	r3, [r3, #12]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fa fa87 	bl	8004a08 <lwip_htons>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	f040 80bf 	bne.w	800a686 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a508:	4875      	ldr	r0, [pc, #468]	; (800a6e0 <tcp_receive+0xf1c>)
 800a50a:	f7fd fa57 	bl	80079bc <tcp_seg_copy>
 800a50e:	4602      	mov	r2, r0
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80b6 	beq.w	800a68a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a526:	8912      	ldrh	r2, [r2, #8]
 800a528:	441a      	add	r2, r3
 800a52a:	4b6c      	ldr	r3, [pc, #432]	; (800a6dc <tcp_receive+0xf18>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	dd12      	ble.n	800a55a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a534:	4b69      	ldr	r3, [pc, #420]	; (800a6dc <tcp_receive+0xf18>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	b29a      	uxth	r2, r3
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	b29b      	uxth	r3, r3
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	b29a      	uxth	r2, r3
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	891b      	ldrh	r3, [r3, #8]
 800a552:	4619      	mov	r1, r3
 800a554:	4610      	mov	r0, r2
 800a556:	f7fb fc2f 	bl	8005db8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a55a:	4b62      	ldr	r3, [pc, #392]	; (800a6e4 <tcp_receive+0xf20>)
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	4b5e      	ldr	r3, [pc, #376]	; (800a6dc <tcp_receive+0xf18>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	441a      	add	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a56e:	440b      	add	r3, r1
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	f340 8089 	ble.w	800a68a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	899b      	ldrh	r3, [r3, #12]
 800a580:	b29b      	uxth	r3, r3
 800a582:	4618      	mov	r0, r3
 800a584:	f7fa fa40 	bl	8004a08 <lwip_htons>
 800a588:	4603      	mov	r3, r0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d022      	beq.n	800a5da <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	899b      	ldrh	r3, [r3, #12]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	b21b      	sxth	r3, r3
 800a5a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5a4:	b21c      	sxth	r4, r3
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	899b      	ldrh	r3, [r3, #12]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fa fa29 	bl	8004a08 <lwip_htons>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fa fa20 	bl	8004a08 <lwip_htons>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	b21b      	sxth	r3, r3
 800a5cc:	4323      	orrs	r3, r4
 800a5ce:	b21a      	sxth	r2, r3
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	b292      	uxth	r2, r2
 800a5d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e4:	4413      	add	r3, r2
 800a5e6:	b299      	uxth	r1, r3
 800a5e8:	4b3c      	ldr	r3, [pc, #240]	; (800a6dc <tcp_receive+0xf18>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	1a8a      	subs	r2, r1, r2
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	891b      	ldrh	r3, [r3, #8]
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f7fb fbd6 	bl	8005db8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	891c      	ldrh	r4, [r3, #8]
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	899b      	ldrh	r3, [r3, #12]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fa f9f3 	bl	8004a08 <lwip_htons>
 800a622:	4603      	mov	r3, r0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	f003 0303 	and.w	r3, r3, #3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <tcp_receive+0xe6e>
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <tcp_receive+0xe70>
 800a632:	2300      	movs	r3, #0
 800a634:	4423      	add	r3, r4
 800a636:	b29a      	uxth	r2, r3
 800a638:	4b2a      	ldr	r3, [pc, #168]	; (800a6e4 <tcp_receive+0xf20>)
 800a63a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a63c:	4b29      	ldr	r3, [pc, #164]	; (800a6e4 <tcp_receive+0xf20>)
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	461a      	mov	r2, r3
 800a642:	4b26      	ldr	r3, [pc, #152]	; (800a6dc <tcp_receive+0xf18>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	441a      	add	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	6879      	ldr	r1, [r7, #4]
 800a64e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a650:	440b      	add	r3, r1
 800a652:	429a      	cmp	r2, r3
 800a654:	d019      	beq.n	800a68a <tcp_receive+0xec6>
 800a656:	4b24      	ldr	r3, [pc, #144]	; (800a6e8 <tcp_receive+0xf24>)
 800a658:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a65c:	4923      	ldr	r1, [pc, #140]	; (800a6ec <tcp_receive+0xf28>)
 800a65e:	4824      	ldr	r0, [pc, #144]	; (800a6f0 <tcp_receive+0xf2c>)
 800a660:	f004 fed0 	bl	800f404 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a664:	e011      	b.n	800a68a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f47f aea4 	bne.w	800a3bc <tcp_receive+0xbf8>
 800a674:	e00a      	b.n	800a68c <tcp_receive+0xec8>
                break;
 800a676:	bf00      	nop
 800a678:	e008      	b.n	800a68c <tcp_receive+0xec8>
                break;
 800a67a:	bf00      	nop
 800a67c:	e006      	b.n	800a68c <tcp_receive+0xec8>
                  break;
 800a67e:	bf00      	nop
 800a680:	e004      	b.n	800a68c <tcp_receive+0xec8>
                  break;
 800a682:	bf00      	nop
 800a684:	e002      	b.n	800a68c <tcp_receive+0xec8>
                  break;
 800a686:	bf00      	nop
 800a688:	e000      	b.n	800a68c <tcp_receive+0xec8>
                break;
 800a68a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 fe8b 	bl	800c3a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a692:	e003      	b.n	800a69c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f001 fe87 	bl	800c3a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a69a:	e01a      	b.n	800a6d2 <tcp_receive+0xf0e>
 800a69c:	e019      	b.n	800a6d2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a69e:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <tcp_receive+0xf18>)
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	db0a      	blt.n	800a6c2 <tcp_receive+0xefe>
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <tcp_receive+0xf18>)
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6b8:	440b      	add	r3, r1
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	3301      	adds	r3, #1
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dd07      	ble.n	800a6d2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	8b5b      	ldrh	r3, [r3, #26]
 800a6c6:	f043 0302 	orr.w	r3, r3, #2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a6d0:	e7ff      	b.n	800a6d2 <tcp_receive+0xf0e>
 800a6d2:	bf00      	nop
 800a6d4:	3750      	adds	r7, #80	; 0x50
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	2000a490 	.word	0x2000a490
 800a6e0:	2000a470 	.word	0x2000a470
 800a6e4:	2000a49a 	.word	0x2000a49a
 800a6e8:	08011ac8 	.word	0x08011ac8
 800a6ec:	08011e70 	.word	0x08011e70
 800a6f0:	08011b14 	.word	0x08011b14

0800a6f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a6fa:	4b15      	ldr	r3, [pc, #84]	; (800a750 <tcp_get_next_optbyte+0x5c>)
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	b291      	uxth	r1, r2
 800a702:	4a13      	ldr	r2, [pc, #76]	; (800a750 <tcp_get_next_optbyte+0x5c>)
 800a704:	8011      	strh	r1, [r2, #0]
 800a706:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a708:	4b12      	ldr	r3, [pc, #72]	; (800a754 <tcp_get_next_optbyte+0x60>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <tcp_get_next_optbyte+0x26>
 800a710:	4b11      	ldr	r3, [pc, #68]	; (800a758 <tcp_get_next_optbyte+0x64>)
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	88fa      	ldrh	r2, [r7, #6]
 800a716:	429a      	cmp	r2, r3
 800a718:	d208      	bcs.n	800a72c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a71a:	4b10      	ldr	r3, [pc, #64]	; (800a75c <tcp_get_next_optbyte+0x68>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3314      	adds	r3, #20
 800a720:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a722:	88fb      	ldrh	r3, [r7, #6]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	4413      	add	r3, r2
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	e00b      	b.n	800a744 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <tcp_get_next_optbyte+0x64>)
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a73a:	4b06      	ldr	r3, [pc, #24]	; (800a754 <tcp_get_next_optbyte+0x60>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	797b      	ldrb	r3, [r7, #5]
 800a740:	4413      	add	r3, r2
 800a742:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	2000a48c 	.word	0x2000a48c
 800a754:	2000a488 	.word	0x2000a488
 800a758:	2000a486 	.word	0x2000a486
 800a75c:	2000a480 	.word	0x2000a480

0800a760 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <tcp_parseopt+0x1c>
 800a76e:	4b32      	ldr	r3, [pc, #200]	; (800a838 <tcp_parseopt+0xd8>)
 800a770:	f240 727d 	movw	r2, #1917	; 0x77d
 800a774:	4931      	ldr	r1, [pc, #196]	; (800a83c <tcp_parseopt+0xdc>)
 800a776:	4832      	ldr	r0, [pc, #200]	; (800a840 <tcp_parseopt+0xe0>)
 800a778:	f004 fe44 	bl	800f404 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a77c:	4b31      	ldr	r3, [pc, #196]	; (800a844 <tcp_parseopt+0xe4>)
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d055      	beq.n	800a830 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a784:	4b30      	ldr	r3, [pc, #192]	; (800a848 <tcp_parseopt+0xe8>)
 800a786:	2200      	movs	r2, #0
 800a788:	801a      	strh	r2, [r3, #0]
 800a78a:	e045      	b.n	800a818 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a78c:	f7ff ffb2 	bl	800a6f4 <tcp_get_next_optbyte>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d006      	beq.n	800a7a8 <tcp_parseopt+0x48>
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	dc2b      	bgt.n	800a7f6 <tcp_parseopt+0x96>
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d041      	beq.n	800a826 <tcp_parseopt+0xc6>
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d127      	bne.n	800a7f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a7a6:	e037      	b.n	800a818 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a7a8:	f7ff ffa4 	bl	800a6f4 <tcp_get_next_optbyte>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d13b      	bne.n	800a82a <tcp_parseopt+0xca>
 800a7b2:	4b25      	ldr	r3, [pc, #148]	; (800a848 <tcp_parseopt+0xe8>)
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	4a22      	ldr	r2, [pc, #136]	; (800a844 <tcp_parseopt+0xe4>)
 800a7ba:	8812      	ldrh	r2, [r2, #0]
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	da34      	bge.n	800a82a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a7c0:	f7ff ff98 	bl	800a6f4 <tcp_get_next_optbyte>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a7cc:	f7ff ff92 	bl	800a6f4 <tcp_get_next_optbyte>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	89bb      	ldrh	r3, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a7da:	89bb      	ldrh	r3, [r7, #12]
 800a7dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a7e0:	d804      	bhi.n	800a7ec <tcp_parseopt+0x8c>
 800a7e2:	89bb      	ldrh	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <tcp_parseopt+0x8c>
 800a7e8:	89ba      	ldrh	r2, [r7, #12]
 800a7ea:	e001      	b.n	800a7f0 <tcp_parseopt+0x90>
 800a7ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a7f4:	e010      	b.n	800a818 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a7f6:	f7ff ff7d 	bl	800a6f4 <tcp_get_next_optbyte>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a7fe:	7afb      	ldrb	r3, [r7, #11]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d914      	bls.n	800a82e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a804:	7afb      	ldrb	r3, [r7, #11]
 800a806:	b29a      	uxth	r2, r3
 800a808:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <tcp_parseopt+0xe8>)
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	4413      	add	r3, r2
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3b02      	subs	r3, #2
 800a812:	b29a      	uxth	r2, r3
 800a814:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <tcp_parseopt+0xe8>)
 800a816:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a818:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <tcp_parseopt+0xe8>)
 800a81a:	881a      	ldrh	r2, [r3, #0]
 800a81c:	4b09      	ldr	r3, [pc, #36]	; (800a844 <tcp_parseopt+0xe4>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d3b3      	bcc.n	800a78c <tcp_parseopt+0x2c>
 800a824:	e004      	b.n	800a830 <tcp_parseopt+0xd0>
          return;
 800a826:	bf00      	nop
 800a828:	e002      	b.n	800a830 <tcp_parseopt+0xd0>
            return;
 800a82a:	bf00      	nop
 800a82c:	e000      	b.n	800a830 <tcp_parseopt+0xd0>
            return;
 800a82e:	bf00      	nop
      }
    }
  }
}
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	08011ac8 	.word	0x08011ac8
 800a83c:	08011f2c 	.word	0x08011f2c
 800a840:	08011b14 	.word	0x08011b14
 800a844:	2000a484 	.word	0x2000a484
 800a848:	2000a48c 	.word	0x2000a48c

0800a84c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <tcp_trigger_input_pcb_close+0x1c>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f043 0310 	orr.w	r3, r3, #16
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b03      	ldr	r3, [pc, #12]	; (800a868 <tcp_trigger_input_pcb_close+0x1c>)
 800a85c:	701a      	strb	r2, [r3, #0]
}
 800a85e:	bf00      	nop
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	2000a49d 	.word	0x2000a49d

0800a86c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <tcp_route+0x28>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	7a1b      	ldrb	r3, [r3, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d006      	beq.n	800a894 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	7a1b      	ldrb	r3, [r3, #8]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fb f8ba 	bl	8005a04 <netif_get_by_index>
 800a890:	4603      	mov	r3, r0
 800a892:	e003      	b.n	800a89c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f003 fad5 	bl	800de44 <ip4_route>
 800a89a:	4603      	mov	r3, r0
  }
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <tcp_create_segment+0x22>
 800a8ba:	4b44      	ldr	r3, [pc, #272]	; (800a9cc <tcp_create_segment+0x128>)
 800a8bc:	22a3      	movs	r2, #163	; 0xa3
 800a8be:	4944      	ldr	r1, [pc, #272]	; (800a9d0 <tcp_create_segment+0x12c>)
 800a8c0:	4844      	ldr	r0, [pc, #272]	; (800a9d4 <tcp_create_segment+0x130>)
 800a8c2:	f004 fd9f 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <tcp_create_segment+0x34>
 800a8cc:	4b3f      	ldr	r3, [pc, #252]	; (800a9cc <tcp_create_segment+0x128>)
 800a8ce:	22a4      	movs	r2, #164	; 0xa4
 800a8d0:	4941      	ldr	r1, [pc, #260]	; (800a9d8 <tcp_create_segment+0x134>)
 800a8d2:	4840      	ldr	r0, [pc, #256]	; (800a9d4 <tcp_create_segment+0x130>)
 800a8d4:	f004 fd96 	bl	800f404 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a8d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a8e6:	2003      	movs	r0, #3
 800a8e8:	f7fa fd06 	bl	80052f8 <memp_malloc>
 800a8ec:	6138      	str	r0, [r7, #16]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d104      	bne.n	800a8fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a8f4:	68b8      	ldr	r0, [r7, #8]
 800a8f6:	f7fb fbe5 	bl	80060c4 <pbuf_free>
    return NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e061      	b.n	800a9c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a904:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	891a      	ldrh	r2, [r3, #8]
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d205      	bcs.n	800a92a <tcp_create_segment+0x86>
 800a91e:	4b2b      	ldr	r3, [pc, #172]	; (800a9cc <tcp_create_segment+0x128>)
 800a920:	22b0      	movs	r2, #176	; 0xb0
 800a922:	492e      	ldr	r1, [pc, #184]	; (800a9dc <tcp_create_segment+0x138>)
 800a924:	482b      	ldr	r0, [pc, #172]	; (800a9d4 <tcp_create_segment+0x130>)
 800a926:	f004 fd6d 	bl	800f404 <iprintf>
  seg->len = p->tot_len - optlen;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	891a      	ldrh	r2, [r3, #8]
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	b29b      	uxth	r3, r3
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	b29a      	uxth	r2, r3
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a93a:	2114      	movs	r1, #20
 800a93c:	68b8      	ldr	r0, [r7, #8]
 800a93e:	f7fb fb2b 	bl	8005f98 <pbuf_add_header>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d004      	beq.n	800a952 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a948:	6938      	ldr	r0, [r7, #16]
 800a94a:	f7fd f81e 	bl	800798a <tcp_seg_free>
    return NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	e037      	b.n	800a9c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	8ada      	ldrh	r2, [r3, #22]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	68dc      	ldr	r4, [r3, #12]
 800a964:	4610      	mov	r0, r2
 800a966:	f7fa f84f 	bl	8004a08 <lwip_htons>
 800a96a:	4603      	mov	r3, r0
 800a96c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	8b1a      	ldrh	r2, [r3, #24]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	68dc      	ldr	r4, [r3, #12]
 800a976:	4610      	mov	r0, r2
 800a978:	f7fa f846 	bl	8004a08 <lwip_htons>
 800a97c:	4603      	mov	r3, r0
 800a97e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	68dc      	ldr	r4, [r3, #12]
 800a984:	6838      	ldr	r0, [r7, #0]
 800a986:	f7fa f854 	bl	8004a32 <lwip_htonl>
 800a98a:	4603      	mov	r3, r0
 800a98c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	089b      	lsrs	r3, r3, #2
 800a992:	b2db      	uxtb	r3, r3
 800a994:	b29b      	uxth	r3, r3
 800a996:	3305      	adds	r3, #5
 800a998:	b29b      	uxth	r3, r3
 800a99a:	031b      	lsls	r3, r3, #12
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	68dc      	ldr	r4, [r3, #12]
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7fa f82c 	bl	8004a08 <lwip_htons>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	749a      	strb	r2, [r3, #18]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	74da      	strb	r2, [r3, #19]
  return seg;
 800a9c0:	693b      	ldr	r3, [r7, #16]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd90      	pop	{r4, r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	08011f48 	.word	0x08011f48
 800a9d0:	08011f7c 	.word	0x08011f7c
 800a9d4:	08011f9c 	.word	0x08011f9c
 800a9d8:	08011fc4 	.word	0x08011fc4
 800a9dc:	08011fe8 	.word	0x08011fe8

0800a9e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	607b      	str	r3, [r7, #4]
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	81bb      	strh	r3, [r7, #12]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a9f4:	89bb      	ldrh	r3, [r7, #12]
 800a9f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d105      	bne.n	800aa0a <tcp_pbuf_prealloc+0x2a>
 800a9fe:	4b30      	ldr	r3, [pc, #192]	; (800aac0 <tcp_pbuf_prealloc+0xe0>)
 800aa00:	22e8      	movs	r2, #232	; 0xe8
 800aa02:	4930      	ldr	r1, [pc, #192]	; (800aac4 <tcp_pbuf_prealloc+0xe4>)
 800aa04:	4830      	ldr	r0, [pc, #192]	; (800aac8 <tcp_pbuf_prealloc+0xe8>)
 800aa06:	f004 fcfd 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d105      	bne.n	800aa1c <tcp_pbuf_prealloc+0x3c>
 800aa10:	4b2b      	ldr	r3, [pc, #172]	; (800aac0 <tcp_pbuf_prealloc+0xe0>)
 800aa12:	22e9      	movs	r2, #233	; 0xe9
 800aa14:	492d      	ldr	r1, [pc, #180]	; (800aacc <tcp_pbuf_prealloc+0xec>)
 800aa16:	482c      	ldr	r0, [pc, #176]	; (800aac8 <tcp_pbuf_prealloc+0xe8>)
 800aa18:	f004 fcf4 	bl	800f404 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800aa1c:	89ba      	ldrh	r2, [r7, #12]
 800aa1e:	897b      	ldrh	r3, [r7, #10]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d221      	bcs.n	800aa68 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aa24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d111      	bne.n	800aa54 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	8b5b      	ldrh	r3, [r3, #26]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d115      	bne.n	800aa68 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800aa3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d009      	beq.n	800aa68 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aa54:	89bb      	ldrh	r3, [r7, #12]
 800aa56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800aa5a:	f023 0203 	bic.w	r2, r3, #3
 800aa5e:	897b      	ldrh	r3, [r7, #10]
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bf28      	it	cs
 800aa64:	4613      	movcs	r3, r2
 800aa66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800aa68:	8af9      	ldrh	r1, [r7, #22]
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fb f843 	bl	8005afc <pbuf_alloc>
 800aa76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e019      	b.n	800aab6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d006      	beq.n	800aa98 <tcp_pbuf_prealloc+0xb8>
 800aa8a:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <tcp_pbuf_prealloc+0xe0>)
 800aa8c:	f240 120b 	movw	r2, #267	; 0x10b
 800aa90:	490f      	ldr	r1, [pc, #60]	; (800aad0 <tcp_pbuf_prealloc+0xf0>)
 800aa92:	480d      	ldr	r0, [pc, #52]	; (800aac8 <tcp_pbuf_prealloc+0xe8>)
 800aa94:	f004 fcb6 	bl	800f404 <iprintf>
  *oversize = p->len - length;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	895a      	ldrh	r2, [r3, #10]
 800aa9c:	89bb      	ldrh	r3, [r7, #12]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	89ba      	ldrh	r2, [r7, #12]
 800aaaa:	811a      	strh	r2, [r3, #8]
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	891a      	ldrh	r2, [r3, #8]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	815a      	strh	r2, [r3, #10]
  return p;
 800aab4:	693b      	ldr	r3, [r7, #16]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	08011f48 	.word	0x08011f48
 800aac4:	08012000 	.word	0x08012000
 800aac8:	08011f9c 	.word	0x08011f9c
 800aacc:	08012024 	.word	0x08012024
 800aad0:	08012044 	.word	0x08012044

0800aad4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <tcp_write_checks+0x20>
 800aae6:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <tcp_write_checks+0xe0>)
 800aae8:	f240 1233 	movw	r2, #307	; 0x133
 800aaec:	4932      	ldr	r1, [pc, #200]	; (800abb8 <tcp_write_checks+0xe4>)
 800aaee:	4833      	ldr	r0, [pc, #204]	; (800abbc <tcp_write_checks+0xe8>)
 800aaf0:	f004 fc88 	bl	800f404 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	7d1b      	ldrb	r3, [r3, #20]
 800aaf8:	2b04      	cmp	r3, #4
 800aafa:	d00e      	beq.n	800ab1a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ab00:	2b07      	cmp	r3, #7
 800ab02:	d00a      	beq.n	800ab1a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d006      	beq.n	800ab1a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d002      	beq.n	800ab1a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ab14:	f06f 030a 	mvn.w	r3, #10
 800ab18:	e048      	b.n	800abac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ab1a:	887b      	ldrh	r3, [r7, #2]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <tcp_write_checks+0x50>
    return ERR_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	e043      	b.n	800abac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab2a:	887a      	ldrh	r2, [r7, #2]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d909      	bls.n	800ab44 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	8b5b      	ldrh	r3, [r3, #26]
 800ab34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ab3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab42:	e033      	b.n	800abac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab4a:	2b08      	cmp	r3, #8
 800ab4c:	d909      	bls.n	800ab62 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8b5b      	ldrh	r3, [r3, #26]
 800ab52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab60:	e024      	b.n	800abac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00f      	beq.n	800ab8c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11a      	bne.n	800abaa <tcp_write_checks+0xd6>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d116      	bne.n	800abaa <tcp_write_checks+0xd6>
 800ab7c:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <tcp_write_checks+0xe0>)
 800ab7e:	f240 1255 	movw	r2, #341	; 0x155
 800ab82:	490f      	ldr	r1, [pc, #60]	; (800abc0 <tcp_write_checks+0xec>)
 800ab84:	480d      	ldr	r0, [pc, #52]	; (800abbc <tcp_write_checks+0xe8>)
 800ab86:	f004 fc3d 	bl	800f404 <iprintf>
 800ab8a:	e00e      	b.n	800abaa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d103      	bne.n	800ab9c <tcp_write_checks+0xc8>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d006      	beq.n	800abaa <tcp_write_checks+0xd6>
 800ab9c:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <tcp_write_checks+0xe0>)
 800ab9e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800aba2:	4908      	ldr	r1, [pc, #32]	; (800abc4 <tcp_write_checks+0xf0>)
 800aba4:	4805      	ldr	r0, [pc, #20]	; (800abbc <tcp_write_checks+0xe8>)
 800aba6:	f004 fc2d 	bl	800f404 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	08011f48 	.word	0x08011f48
 800abb8:	08012058 	.word	0x08012058
 800abbc:	08011f9c 	.word	0x08011f9c
 800abc0:	08012078 	.word	0x08012078
 800abc4:	080120b4 	.word	0x080120b4

0800abc8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b09b      	sub	sp, #108	; 0x6c
 800abcc:	af04      	add	r7, sp, #16
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4611      	mov	r1, r2
 800abd4:	461a      	mov	r2, r3
 800abd6:	460b      	mov	r3, r1
 800abd8:	80fb      	strh	r3, [r7, #6]
 800abda:	4613      	mov	r3, r2
 800abdc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	653b      	str	r3, [r7, #80]	; 0x50
 800abe6:	2300      	movs	r3, #0
 800abe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abea:	2300      	movs	r3, #0
 800abec:	64bb      	str	r3, [r7, #72]	; 0x48
 800abee:	2300      	movs	r3, #0
 800abf0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d109      	bne.n	800ac24 <tcp_write+0x5c>
 800ac10:	4ba4      	ldr	r3, [pc, #656]	; (800aea4 <tcp_write+0x2dc>)
 800ac12:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ac16:	49a4      	ldr	r1, [pc, #656]	; (800aea8 <tcp_write+0x2e0>)
 800ac18:	48a4      	ldr	r0, [pc, #656]	; (800aeac <tcp_write+0x2e4>)
 800ac1a:	f004 fbf3 	bl	800f404 <iprintf>
 800ac1e:	f06f 030f 	mvn.w	r3, #15
 800ac22:	e32a      	b.n	800b27a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac32:	4293      	cmp	r3, r2
 800ac34:	bf28      	it	cs
 800ac36:	4613      	movcs	r3, r2
 800ac38:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ac3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d102      	bne.n	800ac46 <tcp_write+0x7e>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac44:	e000      	b.n	800ac48 <tcp_write+0x80>
 800ac46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac48:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d109      	bne.n	800ac64 <tcp_write+0x9c>
 800ac50:	4b94      	ldr	r3, [pc, #592]	; (800aea4 <tcp_write+0x2dc>)
 800ac52:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ac56:	4996      	ldr	r1, [pc, #600]	; (800aeb0 <tcp_write+0x2e8>)
 800ac58:	4894      	ldr	r0, [pc, #592]	; (800aeac <tcp_write+0x2e4>)
 800ac5a:	f004 fbd3 	bl	800f404 <iprintf>
 800ac5e:	f06f 030f 	mvn.w	r3, #15
 800ac62:	e30a      	b.n	800b27a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ac64:	88fb      	ldrh	r3, [r7, #6]
 800ac66:	4619      	mov	r1, r3
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ff33 	bl	800aad4 <tcp_write_checks>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ac74:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <tcp_write+0xba>
    return err;
 800ac7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ac80:	e2fb      	b.n	800b27a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 80f6 	beq.w	800ae88 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca0:	653b      	str	r3, [r7, #80]	; 0x50
 800aca2:	e002      	b.n	800acaa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800aca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800acaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1f8      	bne.n	800aca4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800acb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb4:	7a9b      	ldrb	r3, [r3, #10]
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f003 0304 	and.w	r3, r3, #4
 800acbe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800acc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc4:	891b      	ldrh	r3, [r3, #8]
 800acc6:	4619      	mov	r1, r3
 800acc8:	8c3b      	ldrh	r3, [r7, #32]
 800acca:	440b      	add	r3, r1
 800accc:	429a      	cmp	r2, r3
 800acce:	da06      	bge.n	800acde <tcp_write+0x116>
 800acd0:	4b74      	ldr	r3, [pc, #464]	; (800aea4 <tcp_write+0x2dc>)
 800acd2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800acd6:	4977      	ldr	r1, [pc, #476]	; (800aeb4 <tcp_write+0x2ec>)
 800acd8:	4874      	ldr	r0, [pc, #464]	; (800aeac <tcp_write+0x2e4>)
 800acda:	f004 fb93 	bl	800f404 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800acde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace0:	891a      	ldrh	r2, [r3, #8]
 800ace2:	8c3b      	ldrh	r3, [r7, #32]
 800ace4:	4413      	add	r3, r2
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acf4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800acf6:	8a7b      	ldrh	r3, [r7, #18]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d026      	beq.n	800ad4a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800acfc:	8a7b      	ldrh	r3, [r7, #18]
 800acfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d206      	bcs.n	800ad12 <tcp_write+0x14a>
 800ad04:	4b67      	ldr	r3, [pc, #412]	; (800aea4 <tcp_write+0x2dc>)
 800ad06:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ad0a:	496b      	ldr	r1, [pc, #428]	; (800aeb8 <tcp_write+0x2f0>)
 800ad0c:	4867      	ldr	r0, [pc, #412]	; (800aeac <tcp_write+0x2e4>)
 800ad0e:	f004 fb79 	bl	800f404 <iprintf>
      seg = last_unsent;
 800ad12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad14:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ad16:	8a7b      	ldrh	r3, [r7, #18]
 800ad18:	88fa      	ldrh	r2, [r7, #6]
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	bf28      	it	cs
 800ad1e:	4613      	movcs	r3, r2
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad24:	4293      	cmp	r3, r2
 800ad26:	bf28      	it	cs
 800ad28:	4613      	movcs	r3, r2
 800ad2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ad2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad32:	4413      	add	r3, r2
 800ad34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ad38:	8a7a      	ldrh	r2, [r7, #18]
 800ad3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ad42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ad4a:	8a7b      	ldrh	r3, [r7, #18]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00b      	beq.n	800ad68 <tcp_write+0x1a0>
 800ad50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d006      	beq.n	800ad68 <tcp_write+0x1a0>
 800ad5a:	4b52      	ldr	r3, [pc, #328]	; (800aea4 <tcp_write+0x2dc>)
 800ad5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad60:	4956      	ldr	r1, [pc, #344]	; (800aebc <tcp_write+0x2f4>)
 800ad62:	4852      	ldr	r0, [pc, #328]	; (800aeac <tcp_write+0x2e4>)
 800ad64:	f004 fb4e 	bl	800f404 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ad68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad6c:	88fb      	ldrh	r3, [r7, #6]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	f080 8167 	bcs.w	800b042 <tcp_write+0x47a>
 800ad74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 8163 	beq.w	800b042 <tcp_write+0x47a>
 800ad7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad7e:	891b      	ldrh	r3, [r3, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 815e 	beq.w	800b042 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ad86:	88fa      	ldrh	r2, [r7, #6]
 800ad88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad8c:	1ad2      	subs	r2, r2, r3
 800ad8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad90:	4293      	cmp	r3, r2
 800ad92:	bfa8      	it	ge
 800ad94:	4613      	movge	r3, r2
 800ad96:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ad98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ad9c:	797b      	ldrb	r3, [r7, #5]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d027      	beq.n	800adf6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ada6:	f107 0012 	add.w	r0, r7, #18
 800adaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800adac:	8bf9      	ldrh	r1, [r7, #30]
 800adae:	2301      	movs	r3, #1
 800adb0:	9302      	str	r3, [sp, #8]
 800adb2:	797b      	ldrb	r3, [r7, #5]
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	4603      	mov	r3, r0
 800adbc:	2000      	movs	r0, #0
 800adbe:	f7ff fe0f 	bl	800a9e0 <tcp_pbuf_prealloc>
 800adc2:	6578      	str	r0, [r7, #84]	; 0x54
 800adc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8225 	beq.w	800b216 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800adcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adce:	6858      	ldr	r0, [r3, #4]
 800add0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	4413      	add	r3, r2
 800add8:	8bfa      	ldrh	r2, [r7, #30]
 800adda:	4619      	mov	r1, r3
 800addc:	f004 fae2 	bl	800f3a4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ade0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ade2:	f7fb f9f7 	bl	80061d4 <pbuf_clen>
 800ade6:	4603      	mov	r3, r0
 800ade8:	461a      	mov	r2, r3
 800adea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adee:	4413      	add	r3, r2
 800adf0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800adf4:	e041      	b.n	800ae7a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800adf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	637b      	str	r3, [r7, #52]	; 0x34
 800adfc:	e002      	b.n	800ae04 <tcp_write+0x23c>
 800adfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1f8      	bne.n	800adfe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0e:	7b1b      	ldrb	r3, [r3, #12]
 800ae10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d115      	bne.n	800ae44 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae1e:	8952      	ldrh	r2, [r2, #10]
 800ae20:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d10d      	bne.n	800ae44 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ae28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d006      	beq.n	800ae3e <tcp_write+0x276>
 800ae30:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <tcp_write+0x2dc>)
 800ae32:	f240 2231 	movw	r2, #561	; 0x231
 800ae36:	4922      	ldr	r1, [pc, #136]	; (800aec0 <tcp_write+0x2f8>)
 800ae38:	481c      	ldr	r0, [pc, #112]	; (800aeac <tcp_write+0x2e4>)
 800ae3a:	f004 fae3 	bl	800f404 <iprintf>
          extendlen = seglen;
 800ae3e:	8bfb      	ldrh	r3, [r7, #30]
 800ae40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae42:	e01a      	b.n	800ae7a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ae44:	8bfb      	ldrh	r3, [r7, #30]
 800ae46:	2201      	movs	r2, #1
 800ae48:	4619      	mov	r1, r3
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f7fa fe56 	bl	8005afc <pbuf_alloc>
 800ae50:	6578      	str	r0, [r7, #84]	; 0x54
 800ae52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 81e0 	beq.w	800b21a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ae5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	441a      	add	r2, r3
 800ae62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae64:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ae66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ae68:	f7fb f9b4 	bl	80061d4 <pbuf_clen>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae74:	4413      	add	r3, r2
 800ae76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ae7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae7e:	8bfb      	ldrh	r3, [r7, #30]
 800ae80:	4413      	add	r3, r2
 800ae82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ae86:	e0dc      	b.n	800b042 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 80d7 	beq.w	800b042 <tcp_write+0x47a>
 800ae94:	4b03      	ldr	r3, [pc, #12]	; (800aea4 <tcp_write+0x2dc>)
 800ae96:	f240 224a 	movw	r2, #586	; 0x24a
 800ae9a:	490a      	ldr	r1, [pc, #40]	; (800aec4 <tcp_write+0x2fc>)
 800ae9c:	4803      	ldr	r0, [pc, #12]	; (800aeac <tcp_write+0x2e4>)
 800ae9e:	f004 fab1 	bl	800f404 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800aea2:	e0ce      	b.n	800b042 <tcp_write+0x47a>
 800aea4:	08011f48 	.word	0x08011f48
 800aea8:	080120e8 	.word	0x080120e8
 800aeac:	08011f9c 	.word	0x08011f9c
 800aeb0:	08012100 	.word	0x08012100
 800aeb4:	08012134 	.word	0x08012134
 800aeb8:	0801214c 	.word	0x0801214c
 800aebc:	0801216c 	.word	0x0801216c
 800aec0:	0801218c 	.word	0x0801218c
 800aec4:	080121b8 	.word	0x080121b8
    struct pbuf *p;
    u16_t left = len - pos;
 800aec8:	88fa      	ldrh	r2, [r7, #6]
 800aeca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800aed2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800aede:	8b7a      	ldrh	r2, [r7, #26]
 800aee0:	8bbb      	ldrh	r3, [r7, #28]
 800aee2:	4293      	cmp	r3, r2
 800aee4:	bf28      	it	cs
 800aee6:	4613      	movcs	r3, r2
 800aee8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aeea:	797b      	ldrb	r3, [r7, #5]
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d036      	beq.n	800af62 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800aef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	8b3b      	ldrh	r3, [r7, #24]
 800aefc:	4413      	add	r3, r2
 800aefe:	b299      	uxth	r1, r3
 800af00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af02:	2b00      	cmp	r3, #0
 800af04:	bf0c      	ite	eq
 800af06:	2301      	moveq	r3, #1
 800af08:	2300      	movne	r3, #0
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	f107 0012 	add.w	r0, r7, #18
 800af10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af12:	9302      	str	r3, [sp, #8]
 800af14:	797b      	ldrb	r3, [r7, #5]
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	4603      	mov	r3, r0
 800af1e:	2036      	movs	r0, #54	; 0x36
 800af20:	f7ff fd5e 	bl	800a9e0 <tcp_pbuf_prealloc>
 800af24:	6338      	str	r0, [r7, #48]	; 0x30
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 8178 	beq.w	800b21e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	895b      	ldrh	r3, [r3, #10]
 800af32:	8b3a      	ldrh	r2, [r7, #24]
 800af34:	429a      	cmp	r2, r3
 800af36:	d906      	bls.n	800af46 <tcp_write+0x37e>
 800af38:	4b8c      	ldr	r3, [pc, #560]	; (800b16c <tcp_write+0x5a4>)
 800af3a:	f240 2266 	movw	r2, #614	; 0x266
 800af3e:	498c      	ldr	r1, [pc, #560]	; (800b170 <tcp_write+0x5a8>)
 800af40:	488c      	ldr	r0, [pc, #560]	; (800b174 <tcp_write+0x5ac>)
 800af42:	f004 fa5f 	bl	800f404 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af4e:	18d0      	adds	r0, r2, r3
 800af50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	4413      	add	r3, r2
 800af58:	8b3a      	ldrh	r2, [r7, #24]
 800af5a:	4619      	mov	r1, r3
 800af5c:	f004 fa22 	bl	800f3a4 <memcpy>
 800af60:	e02f      	b.n	800afc2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800af62:	8a7b      	ldrh	r3, [r7, #18]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <tcp_write+0x3ae>
 800af68:	4b80      	ldr	r3, [pc, #512]	; (800b16c <tcp_write+0x5a4>)
 800af6a:	f240 2271 	movw	r2, #625	; 0x271
 800af6e:	4982      	ldr	r1, [pc, #520]	; (800b178 <tcp_write+0x5b0>)
 800af70:	4880      	ldr	r0, [pc, #512]	; (800b174 <tcp_write+0x5ac>)
 800af72:	f004 fa47 	bl	800f404 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800af76:	8b3b      	ldrh	r3, [r7, #24]
 800af78:	2201      	movs	r2, #1
 800af7a:	4619      	mov	r1, r3
 800af7c:	2036      	movs	r0, #54	; 0x36
 800af7e:	f7fa fdbd 	bl	8005afc <pbuf_alloc>
 800af82:	6178      	str	r0, [r7, #20]
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 814b 	beq.w	800b222 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800af8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	441a      	add	r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800af98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afa2:	4619      	mov	r1, r3
 800afa4:	2036      	movs	r0, #54	; 0x36
 800afa6:	f7fa fda9 	bl	8005afc <pbuf_alloc>
 800afaa:	6338      	str	r0, [r7, #48]	; 0x30
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d103      	bne.n	800afba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800afb2:	6978      	ldr	r0, [r7, #20]
 800afb4:	f7fb f886 	bl	80060c4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800afb8:	e136      	b.n	800b228 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800afba:	6979      	ldr	r1, [r7, #20]
 800afbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbe:	f7fb f943 	bl	8006248 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800afc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afc4:	f7fb f906 	bl	80061d4 <pbuf_clen>
 800afc8:	4603      	mov	r3, r0
 800afca:	461a      	mov	r2, r3
 800afcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800afd0:	4413      	add	r3, r2
 800afd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800afd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800afda:	2b09      	cmp	r3, #9
 800afdc:	d903      	bls.n	800afe6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800afde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe0:	f7fb f870 	bl	80060c4 <pbuf_free>
      goto memerr;
 800afe4:	e120      	b.n	800b228 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800afea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800afee:	441a      	add	r2, r3
 800aff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	4613      	mov	r3, r2
 800aff8:	2200      	movs	r2, #0
 800affa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fc51 	bl	800a8a4 <tcp_create_segment>
 800b002:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 810d 	beq.w	800b226 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d102      	bne.n	800b018 <tcp_write+0x450>
      queue = seg;
 800b012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b014:	647b      	str	r3, [r7, #68]	; 0x44
 800b016:	e00c      	b.n	800b032 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <tcp_write+0x464>
 800b01e:	4b53      	ldr	r3, [pc, #332]	; (800b16c <tcp_write+0x5a4>)
 800b020:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b024:	4955      	ldr	r1, [pc, #340]	; (800b17c <tcp_write+0x5b4>)
 800b026:	4853      	ldr	r0, [pc, #332]	; (800b174 <tcp_write+0x5ac>)
 800b028:	f004 f9ec 	bl	800f404 <iprintf>
      prev_seg->next = seg;
 800b02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b030:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b034:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b036:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b03a:	8b3b      	ldrh	r3, [r7, #24]
 800b03c:	4413      	add	r3, r2
 800b03e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b042:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	429a      	cmp	r2, r3
 800b04a:	f4ff af3d 	bcc.w	800aec8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b04e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b050:	2b00      	cmp	r3, #0
 800b052:	d02c      	beq.n	800b0ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b05a:	e01e      	b.n	800b09a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	891a      	ldrh	r2, [r3, #8]
 800b060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b062:	4413      	add	r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b068:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d110      	bne.n	800b094 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b078:	8952      	ldrh	r2, [r2, #10]
 800b07a:	4413      	add	r3, r2
 800b07c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f004 f98f 	bl	800f3a4 <memcpy>
        p->len += oversize_used;
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	895a      	ldrh	r2, [r3, #10]
 800b08a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b08c:	4413      	add	r3, r2
 800b08e:	b29a      	uxth	r2, r3
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1dd      	bne.n	800b05c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a2:	891a      	ldrh	r2, [r3, #8]
 800b0a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0a6:	4413      	add	r3, r2
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b0ae:	8a7a      	ldrh	r2, [r7, #18]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d018      	beq.n	800b0ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <tcp_write+0x508>
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <tcp_write+0x5a4>)
 800b0c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b0c8:	492d      	ldr	r1, [pc, #180]	; (800b180 <tcp_write+0x5b8>)
 800b0ca:	482a      	ldr	r0, [pc, #168]	; (800b174 <tcp_write+0x5ac>)
 800b0cc:	f004 f99a 	bl	800f404 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fb f8b6 	bl	8006248 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0de:	891a      	ldrh	r2, [r3, #8]
 800b0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e2:	891b      	ldrh	r3, [r3, #8]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ea:	811a      	strh	r2, [r3, #8]
 800b0ec:	e037      	b.n	800b15e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b0ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d034      	beq.n	800b15e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <tcp_write+0x53a>
 800b0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <tcp_write+0x548>
 800b102:	4b1a      	ldr	r3, [pc, #104]	; (800b16c <tcp_write+0x5a4>)
 800b104:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b108:	491e      	ldr	r1, [pc, #120]	; (800b184 <tcp_write+0x5bc>)
 800b10a:	481a      	ldr	r0, [pc, #104]	; (800b174 <tcp_write+0x5ac>)
 800b10c:	f004 f97a 	bl	800f404 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	62bb      	str	r3, [r7, #40]	; 0x28
 800b116:	e009      	b.n	800b12c <tcp_write+0x564>
      p->tot_len += extendlen;
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	891a      	ldrh	r2, [r3, #8]
 800b11c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b11e:	4413      	add	r3, r2
 800b120:	b29a      	uxth	r2, r3
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1f1      	bne.n	800b118 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	891a      	ldrh	r2, [r3, #8]
 800b138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b13a:	4413      	add	r3, r2
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	895a      	ldrh	r2, [r3, #10]
 800b146:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b148:	4413      	add	r3, r2
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b152:	891a      	ldrh	r2, [r3, #8]
 800b154:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b156:	4413      	add	r3, r2
 800b158:	b29a      	uxth	r2, r3
 800b15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b15c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b160:	2b00      	cmp	r3, #0
 800b162:	d111      	bne.n	800b188 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b168:	66da      	str	r2, [r3, #108]	; 0x6c
 800b16a:	e010      	b.n	800b18e <tcp_write+0x5c6>
 800b16c:	08011f48 	.word	0x08011f48
 800b170:	080121e8 	.word	0x080121e8
 800b174:	08011f9c 	.word	0x08011f9c
 800b178:	08012228 	.word	0x08012228
 800b17c:	08012238 	.word	0x08012238
 800b180:	0801224c 	.word	0x0801224c
 800b184:	08012284 	.word	0x08012284
  } else {
    last_unsent->next = queue;
 800b188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b18c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b192:	88fb      	ldrh	r3, [r7, #6]
 800b194:	441a      	add	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b1b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00e      	beq.n	800b1de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <tcp_write+0x616>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <tcp_write+0x616>
 800b1d0:	4b2c      	ldr	r3, [pc, #176]	; (800b284 <tcp_write+0x6bc>)
 800b1d2:	f240 3212 	movw	r2, #786	; 0x312
 800b1d6:	492c      	ldr	r1, [pc, #176]	; (800b288 <tcp_write+0x6c0>)
 800b1d8:	482c      	ldr	r0, [pc, #176]	; (800b28c <tcp_write+0x6c4>)
 800b1da:	f004 f913 	bl	800f404 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d016      	beq.n	800b212 <tcp_write+0x64a>
 800b1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d012      	beq.n	800b212 <tcp_write+0x64a>
 800b1ec:	797b      	ldrb	r3, [r7, #5]
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10d      	bne.n	800b212 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	899b      	ldrh	r3, [r3, #12]
 800b1fc:	b29c      	uxth	r4, r3
 800b1fe:	2008      	movs	r0, #8
 800b200:	f7f9 fc02 	bl	8004a08 <lwip_htons>
 800b204:	4603      	mov	r3, r0
 800b206:	461a      	mov	r2, r3
 800b208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	4322      	orrs	r2, r4
 800b20e:	b292      	uxth	r2, r2
 800b210:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	e031      	b.n	800b27a <tcp_write+0x6b2>
          goto memerr;
 800b216:	bf00      	nop
 800b218:	e006      	b.n	800b228 <tcp_write+0x660>
            goto memerr;
 800b21a:	bf00      	nop
 800b21c:	e004      	b.n	800b228 <tcp_write+0x660>
        goto memerr;
 800b21e:	bf00      	nop
 800b220:	e002      	b.n	800b228 <tcp_write+0x660>
        goto memerr;
 800b222:	bf00      	nop
 800b224:	e000      	b.n	800b228 <tcp_write+0x660>
      goto memerr;
 800b226:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	8b5b      	ldrh	r3, [r3, #26]
 800b22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b23c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b23e:	f7fa ff41 	bl	80060c4 <pbuf_free>
  }
  if (queue != NULL) {
 800b242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <tcp_write+0x686>
    tcp_segs_free(queue);
 800b248:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b24a:	f7fc fb89 	bl	8007960 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00e      	beq.n	800b276 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <tcp_write+0x6ae>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <tcp_write+0x6ae>
 800b268:	4b06      	ldr	r3, [pc, #24]	; (800b284 <tcp_write+0x6bc>)
 800b26a:	f240 3227 	movw	r2, #807	; 0x327
 800b26e:	4906      	ldr	r1, [pc, #24]	; (800b288 <tcp_write+0x6c0>)
 800b270:	4806      	ldr	r0, [pc, #24]	; (800b28c <tcp_write+0x6c4>)
 800b272:	f004 f8c7 	bl	800f404 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	375c      	adds	r7, #92	; 0x5c
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}
 800b282:	bf00      	nop
 800b284:	08011f48 	.word	0x08011f48
 800b288:	080122bc 	.word	0x080122bc
 800b28c:	08011f9c 	.word	0x08011f9c

0800b290 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b08b      	sub	sp, #44	; 0x2c
 800b294:	af02      	add	r7, sp, #8
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	61fb      	str	r3, [r7, #28]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <tcp_split_unsent_seg+0x2c>
 800b2ae:	4b95      	ldr	r3, [pc, #596]	; (800b504 <tcp_split_unsent_seg+0x274>)
 800b2b0:	f240 324b 	movw	r2, #843	; 0x34b
 800b2b4:	4994      	ldr	r1, [pc, #592]	; (800b508 <tcp_split_unsent_seg+0x278>)
 800b2b6:	4895      	ldr	r0, [pc, #596]	; (800b50c <tcp_split_unsent_seg+0x27c>)
 800b2b8:	f004 f8a4 	bl	800f404 <iprintf>

  useg = pcb->unsent;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2cc:	e116      	b.n	800b4fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b2ce:	887b      	ldrh	r3, [r7, #2]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d109      	bne.n	800b2e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b2d4:	4b8b      	ldr	r3, [pc, #556]	; (800b504 <tcp_split_unsent_seg+0x274>)
 800b2d6:	f240 3253 	movw	r2, #851	; 0x353
 800b2da:	498d      	ldr	r1, [pc, #564]	; (800b510 <tcp_split_unsent_seg+0x280>)
 800b2dc:	488b      	ldr	r0, [pc, #556]	; (800b50c <tcp_split_unsent_seg+0x27c>)
 800b2de:	f004 f891 	bl	800f404 <iprintf>
    return ERR_VAL;
 800b2e2:	f06f 0305 	mvn.w	r3, #5
 800b2e6:	e109      	b.n	800b4fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	891b      	ldrh	r3, [r3, #8]
 800b2ec:	887a      	ldrh	r2, [r7, #2]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d301      	bcc.n	800b2f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e102      	b.n	800b4fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2fa:	887a      	ldrh	r2, [r7, #2]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d906      	bls.n	800b30e <tcp_split_unsent_seg+0x7e>
 800b300:	4b80      	ldr	r3, [pc, #512]	; (800b504 <tcp_split_unsent_seg+0x274>)
 800b302:	f240 325b 	movw	r2, #859	; 0x35b
 800b306:	4983      	ldr	r1, [pc, #524]	; (800b514 <tcp_split_unsent_seg+0x284>)
 800b308:	4880      	ldr	r0, [pc, #512]	; (800b50c <tcp_split_unsent_seg+0x27c>)
 800b30a:	f004 f87b 	bl	800f404 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	891b      	ldrh	r3, [r3, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <tcp_split_unsent_seg+0x94>
 800b316:	4b7b      	ldr	r3, [pc, #492]	; (800b504 <tcp_split_unsent_seg+0x274>)
 800b318:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b31c:	497e      	ldr	r1, [pc, #504]	; (800b518 <tcp_split_unsent_seg+0x288>)
 800b31e:	487b      	ldr	r0, [pc, #492]	; (800b50c <tcp_split_unsent_seg+0x27c>)
 800b320:	f004 f870 	bl	800f404 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	7a9b      	ldrb	r3, [r3, #10]
 800b328:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	891a      	ldrh	r2, [r3, #8]
 800b33a:	887b      	ldrh	r3, [r7, #2]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b340:	7bbb      	ldrb	r3, [r7, #14]
 800b342:	b29a      	uxth	r2, r3
 800b344:	89bb      	ldrh	r3, [r7, #12]
 800b346:	4413      	add	r3, r2
 800b348:	b29b      	uxth	r3, r3
 800b34a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b34e:	4619      	mov	r1, r3
 800b350:	2036      	movs	r0, #54	; 0x36
 800b352:	f7fa fbd3 	bl	8005afc <pbuf_alloc>
 800b356:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 80b7 	beq.w	800b4ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	891a      	ldrh	r2, [r3, #8]
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	891b      	ldrh	r3, [r3, #8]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	887b      	ldrh	r3, [r7, #2]
 800b370:	4413      	add	r3, r2
 800b372:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	6858      	ldr	r0, [r3, #4]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	18d1      	adds	r1, r2, r3
 800b380:	897b      	ldrh	r3, [r7, #10]
 800b382:	89ba      	ldrh	r2, [r7, #12]
 800b384:	f7fb f888 	bl	8006498 <pbuf_copy_partial>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	89bb      	ldrh	r3, [r7, #12]
 800b38e:	4293      	cmp	r3, r2
 800b390:	f040 809f 	bne.w	800b4d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	899b      	ldrh	r3, [r3, #12]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7f9 fb33 	bl	8004a08 <lwip_htons>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b3b0:	7efb      	ldrb	r3, [r7, #27]
 800b3b2:	f003 0308 	and.w	r3, r3, #8
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d007      	beq.n	800b3ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b3ba:	7efb      	ldrb	r3, [r7, #27]
 800b3bc:	f023 0308 	bic.w	r3, r3, #8
 800b3c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b3c2:	7ebb      	ldrb	r3, [r7, #26]
 800b3c4:	f043 0308 	orr.w	r3, r3, #8
 800b3c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b3ca:	7efb      	ldrb	r3, [r7, #27]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d007      	beq.n	800b3e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b3d4:	7efb      	ldrb	r3, [r7, #27]
 800b3d6:	f023 0301 	bic.w	r3, r3, #1
 800b3da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b3dc:	7ebb      	ldrb	r3, [r7, #26]
 800b3de:	f043 0301 	orr.w	r3, r3, #1
 800b3e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f9 fb21 	bl	8004a32 <lwip_htonl>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	887b      	ldrh	r3, [r7, #2]
 800b3f4:	18d1      	adds	r1, r2, r3
 800b3f6:	7eba      	ldrb	r2, [r7, #26]
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	6939      	ldr	r1, [r7, #16]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff fa4f 	bl	800a8a4 <tcp_create_segment>
 800b406:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d063      	beq.n	800b4d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4618      	mov	r0, r3
 800b414:	f7fa fede 	bl	80061d4 <pbuf_clen>
 800b418:	4603      	mov	r3, r0
 800b41a:	461a      	mov	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b422:	1a9b      	subs	r3, r3, r2
 800b424:	b29a      	uxth	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	6858      	ldr	r0, [r3, #4]
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	891a      	ldrh	r2, [r3, #8]
 800b436:	89bb      	ldrh	r3, [r7, #12]
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4619      	mov	r1, r3
 800b43e:	f7fa fcbb 	bl	8005db8 <pbuf_realloc>
  useg->len -= remainder;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	891a      	ldrh	r2, [r3, #8]
 800b446:	89bb      	ldrh	r3, [r7, #12]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	899b      	ldrh	r3, [r3, #12]
 800b456:	b29c      	uxth	r4, r3
 800b458:	7efb      	ldrb	r3, [r7, #27]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f9 fad3 	bl	8004a08 <lwip_htons>
 800b462:	4603      	mov	r3, r0
 800b464:	461a      	mov	r2, r3
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	4322      	orrs	r2, r4
 800b46c:	b292      	uxth	r2, r2
 800b46e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f7fa fead 	bl	80061d4 <pbuf_clen>
 800b47a:	4603      	mov	r3, r0
 800b47c:	461a      	mov	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b484:	4413      	add	r3, r2
 800b486:	b29a      	uxth	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4618      	mov	r0, r3
 800b494:	f7fa fe9e 	bl	80061d4 <pbuf_clen>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4a2:	4413      	add	r3, r2
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d103      	bne.n	800b4ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e016      	b.n	800b4fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b4ce:	bf00      	nop
 800b4d0:	e002      	b.n	800b4d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b4d2:	bf00      	nop
 800b4d4:	e000      	b.n	800b4d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b4d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d006      	beq.n	800b4ec <tcp_split_unsent_seg+0x25c>
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <tcp_split_unsent_seg+0x274>)
 800b4e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b4e4:	490d      	ldr	r1, [pc, #52]	; (800b51c <tcp_split_unsent_seg+0x28c>)
 800b4e6:	4809      	ldr	r0, [pc, #36]	; (800b50c <tcp_split_unsent_seg+0x27c>)
 800b4e8:	f003 ff8c 	bl	800f404 <iprintf>
  if (p != NULL) {
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b4f2:	6938      	ldr	r0, [r7, #16]
 800b4f4:	f7fa fde6 	bl	80060c4 <pbuf_free>
  }

  return ERR_MEM;
 800b4f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3724      	adds	r7, #36	; 0x24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}
 800b504:	08011f48 	.word	0x08011f48
 800b508:	080122dc 	.word	0x080122dc
 800b50c:	08011f9c 	.word	0x08011f9c
 800b510:	08012300 	.word	0x08012300
 800b514:	08012324 	.word	0x08012324
 800b518:	08012334 	.word	0x08012334
 800b51c:	08012344 	.word	0x08012344

0800b520 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b520:	b590      	push	{r4, r7, lr}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <tcp_send_fin+0x1c>
 800b52e:	4b21      	ldr	r3, [pc, #132]	; (800b5b4 <tcp_send_fin+0x94>)
 800b530:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b534:	4920      	ldr	r1, [pc, #128]	; (800b5b8 <tcp_send_fin+0x98>)
 800b536:	4821      	ldr	r0, [pc, #132]	; (800b5bc <tcp_send_fin+0x9c>)
 800b538:	f003 ff64 	bl	800f404 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b540:	2b00      	cmp	r3, #0
 800b542:	d02e      	beq.n	800b5a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	e002      	b.n	800b552 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1f8      	bne.n	800b54c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	899b      	ldrh	r3, [r3, #12]
 800b560:	b29b      	uxth	r3, r3
 800b562:	4618      	mov	r0, r3
 800b564:	f7f9 fa50 	bl	8004a08 <lwip_htons>
 800b568:	4603      	mov	r3, r0
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	f003 0307 	and.w	r3, r3, #7
 800b570:	2b00      	cmp	r3, #0
 800b572:	d116      	bne.n	800b5a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	899b      	ldrh	r3, [r3, #12]
 800b57a:	b29c      	uxth	r4, r3
 800b57c:	2001      	movs	r0, #1
 800b57e:	f7f9 fa43 	bl	8004a08 <lwip_htons>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	4322      	orrs	r2, r4
 800b58c:	b292      	uxth	r2, r2
 800b58e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8b5b      	ldrh	r3, [r3, #26]
 800b594:	f043 0320 	orr.w	r3, r3, #32
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e004      	b.n	800b5ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f80b 	bl	800b5c0 <tcp_enqueue_flags>
 800b5aa:	4603      	mov	r3, r0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd90      	pop	{r4, r7, pc}
 800b5b4:	08011f48 	.word	0x08011f48
 800b5b8:	08012350 	.word	0x08012350
 800b5bc:	08011f9c 	.word	0x08011f9c

0800b5c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	af02      	add	r7, sp, #8
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b5d4:	78fb      	ldrb	r3, [r7, #3]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d106      	bne.n	800b5ec <tcp_enqueue_flags+0x2c>
 800b5de:	4b67      	ldr	r3, [pc, #412]	; (800b77c <tcp_enqueue_flags+0x1bc>)
 800b5e0:	f240 4211 	movw	r2, #1041	; 0x411
 800b5e4:	4966      	ldr	r1, [pc, #408]	; (800b780 <tcp_enqueue_flags+0x1c0>)
 800b5e6:	4867      	ldr	r0, [pc, #412]	; (800b784 <tcp_enqueue_flags+0x1c4>)
 800b5e8:	f003 ff0c 	bl	800f404 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <tcp_enqueue_flags+0x40>
 800b5f2:	4b62      	ldr	r3, [pc, #392]	; (800b77c <tcp_enqueue_flags+0x1bc>)
 800b5f4:	f240 4213 	movw	r2, #1043	; 0x413
 800b5f8:	4963      	ldr	r1, [pc, #396]	; (800b788 <tcp_enqueue_flags+0x1c8>)
 800b5fa:	4862      	ldr	r0, [pc, #392]	; (800b784 <tcp_enqueue_flags+0x1c4>)
 800b5fc:	f003 ff02 	bl	800f404 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b60a:	2301      	movs	r3, #1
 800b60c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b60e:	7ffb      	ldrb	r3, [r7, #31]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 0304 	and.w	r3, r3, #4
 800b618:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b622:	4619      	mov	r1, r3
 800b624:	2036      	movs	r0, #54	; 0x36
 800b626:	f7fa fa69 	bl	8005afc <pbuf_alloc>
 800b62a:	6138      	str	r0, [r7, #16]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d109      	bne.n	800b646 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8b5b      	ldrh	r3, [r3, #26]
 800b636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b640:	f04f 33ff 	mov.w	r3, #4294967295
 800b644:	e095      	b.n	800b772 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	895a      	ldrh	r2, [r3, #10]
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	429a      	cmp	r2, r3
 800b650:	d206      	bcs.n	800b660 <tcp_enqueue_flags+0xa0>
 800b652:	4b4a      	ldr	r3, [pc, #296]	; (800b77c <tcp_enqueue_flags+0x1bc>)
 800b654:	f240 4239 	movw	r2, #1081	; 0x439
 800b658:	494c      	ldr	r1, [pc, #304]	; (800b78c <tcp_enqueue_flags+0x1cc>)
 800b65a:	484a      	ldr	r0, [pc, #296]	; (800b784 <tcp_enqueue_flags+0x1c4>)
 800b65c:	f003 fed2 	bl	800f404 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	7ffb      	ldrb	r3, [r7, #31]
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	460b      	mov	r3, r1
 800b66c:	6939      	ldr	r1, [r7, #16]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff f918 	bl	800a8a4 <tcp_create_segment>
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	8b5b      	ldrh	r3, [r3, #26]
 800b680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b684:	b29a      	uxth	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295
 800b68e:	e070      	b.n	800b772 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d006      	beq.n	800b6aa <tcp_enqueue_flags+0xea>
 800b69c:	4b37      	ldr	r3, [pc, #220]	; (800b77c <tcp_enqueue_flags+0x1bc>)
 800b69e:	f240 4242 	movw	r2, #1090	; 0x442
 800b6a2:	493b      	ldr	r1, [pc, #236]	; (800b790 <tcp_enqueue_flags+0x1d0>)
 800b6a4:	4837      	ldr	r0, [pc, #220]	; (800b784 <tcp_enqueue_flags+0x1c4>)
 800b6a6:	f003 fead 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	891b      	ldrh	r3, [r3, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d006      	beq.n	800b6c0 <tcp_enqueue_flags+0x100>
 800b6b2:	4b32      	ldr	r3, [pc, #200]	; (800b77c <tcp_enqueue_flags+0x1bc>)
 800b6b4:	f240 4243 	movw	r2, #1091	; 0x443
 800b6b8:	4936      	ldr	r1, [pc, #216]	; (800b794 <tcp_enqueue_flags+0x1d4>)
 800b6ba:	4832      	ldr	r0, [pc, #200]	; (800b784 <tcp_enqueue_flags+0x1c4>)
 800b6bc:	f003 fea2 	bl	800f404 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6ce:	e00d      	b.n	800b6ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d4:	61bb      	str	r3, [r7, #24]
 800b6d6:	e002      	b.n	800b6de <tcp_enqueue_flags+0x11e>
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	61bb      	str	r3, [r7, #24]
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1f8      	bne.n	800b6d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d104      	bne.n	800b708 <tcp_enqueue_flags+0x148>
 800b6fe:	78fb      	ldrb	r3, [r7, #3]
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	d004      	beq.n	800b712 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b712:	78fb      	ldrb	r3, [r7, #3]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d006      	beq.n	800b72a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8b5b      	ldrh	r3, [r3, #26]
 800b720:	f043 0320 	orr.w	r3, r3, #32
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fa fd50 	bl	80061d4 <pbuf_clen>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b73e:	4413      	add	r3, r2
 800b740:	b29a      	uxth	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00e      	beq.n	800b770 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <tcp_enqueue_flags+0x1b0>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d106      	bne.n	800b770 <tcp_enqueue_flags+0x1b0>
 800b762:	4b06      	ldr	r3, [pc, #24]	; (800b77c <tcp_enqueue_flags+0x1bc>)
 800b764:	f240 4265 	movw	r2, #1125	; 0x465
 800b768:	490b      	ldr	r1, [pc, #44]	; (800b798 <tcp_enqueue_flags+0x1d8>)
 800b76a:	4806      	ldr	r0, [pc, #24]	; (800b784 <tcp_enqueue_flags+0x1c4>)
 800b76c:	f003 fe4a 	bl	800f404 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3720      	adds	r7, #32
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	08011f48 	.word	0x08011f48
 800b780:	0801236c 	.word	0x0801236c
 800b784:	08011f9c 	.word	0x08011f9c
 800b788:	080123c4 	.word	0x080123c4
 800b78c:	080123e4 	.word	0x080123e4
 800b790:	08012420 	.word	0x08012420
 800b794:	08012438 	.word	0x08012438
 800b798:	08012464 	.word	0x08012464

0800b79c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b79c:	b5b0      	push	{r4, r5, r7, lr}
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <tcp_output+0x1c>
 800b7aa:	4b8a      	ldr	r3, [pc, #552]	; (800b9d4 <tcp_output+0x238>)
 800b7ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b7b0:	4989      	ldr	r1, [pc, #548]	; (800b9d8 <tcp_output+0x23c>)
 800b7b2:	488a      	ldr	r0, [pc, #552]	; (800b9dc <tcp_output+0x240>)
 800b7b4:	f003 fe26 	bl	800f404 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	7d1b      	ldrb	r3, [r3, #20]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d106      	bne.n	800b7ce <tcp_output+0x32>
 800b7c0:	4b84      	ldr	r3, [pc, #528]	; (800b9d4 <tcp_output+0x238>)
 800b7c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b7c6:	4986      	ldr	r1, [pc, #536]	; (800b9e0 <tcp_output+0x244>)
 800b7c8:	4884      	ldr	r0, [pc, #528]	; (800b9dc <tcp_output+0x240>)
 800b7ca:	f003 fe1b 	bl	800f404 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b7ce:	4b85      	ldr	r3, [pc, #532]	; (800b9e4 <tcp_output+0x248>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d101      	bne.n	800b7dc <tcp_output+0x40>
    return ERR_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e1ce      	b.n	800bb7a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	bf28      	it	cs
 800b7ec:	4613      	movcs	r3, r2
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10b      	bne.n	800b816 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8b5b      	ldrh	r3, [r3, #26]
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 81aa 	beq.w	800bb60 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fdcb 	bl	800c3a8 <tcp_send_empty_ack>
 800b812:	4603      	mov	r3, r0
 800b814:	e1b1      	b.n	800bb7a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3304      	adds	r3, #4
 800b81c:	461a      	mov	r2, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff f824 	bl	800a86c <tcp_route>
 800b824:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d102      	bne.n	800b832 <tcp_output+0x96>
    return ERR_RTE;
 800b82c:	f06f 0303 	mvn.w	r3, #3
 800b830:	e1a3      	b.n	800bb7a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <tcp_output+0xa4>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d111      	bne.n	800b864 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d002      	beq.n	800b84c <tcp_output+0xb0>
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	3304      	adds	r3, #4
 800b84a:	e000      	b.n	800b84e <tcp_output+0xb2>
 800b84c:	2300      	movs	r3, #0
 800b84e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <tcp_output+0xc0>
      return ERR_RTE;
 800b856:	f06f 0303 	mvn.w	r3, #3
 800b85a:	e18e      	b.n	800bb7a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f9 f8e1 	bl	8004a32 <lwip_htonl>
 800b870:	4602      	mov	r2, r0
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87a:	8912      	ldrh	r2, [r2, #8]
 800b87c:	4413      	add	r3, r2
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	429a      	cmp	r2, r3
 800b882:	d227      	bcs.n	800b8d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b88a:	461a      	mov	r2, r3
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	4293      	cmp	r3, r2
 800b890:	d114      	bne.n	800b8bc <tcp_output+0x120>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b896:	2b00      	cmp	r3, #0
 800b898:	d110      	bne.n	800b8bc <tcp_output+0x120>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10b      	bne.n	800b8bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8b5b      	ldrh	r3, [r3, #26]
 800b8c0:	f003 0302 	and.w	r3, r3, #2
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 814d 	beq.w	800bb64 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fd6c 	bl	800c3a8 <tcp_send_empty_ack>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	e152      	b.n	800bb7a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 811c 	beq.w	800bb22 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b8ea:	e002      	b.n	800b8f2 <tcp_output+0x156>
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	623b      	str	r3, [r7, #32]
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1f8      	bne.n	800b8ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b8fa:	e112      	b.n	800bb22 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	899b      	ldrh	r3, [r3, #12]
 800b902:	b29b      	uxth	r3, r3
 800b904:	4618      	mov	r0, r3
 800b906:	f7f9 f87f 	bl	8004a08 <lwip_htons>
 800b90a:	4603      	mov	r3, r0
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d006      	beq.n	800b924 <tcp_output+0x188>
 800b916:	4b2f      	ldr	r3, [pc, #188]	; (800b9d4 <tcp_output+0x238>)
 800b918:	f240 5236 	movw	r2, #1334	; 0x536
 800b91c:	4932      	ldr	r1, [pc, #200]	; (800b9e8 <tcp_output+0x24c>)
 800b91e:	482f      	ldr	r0, [pc, #188]	; (800b9dc <tcp_output+0x240>)
 800b920:	f003 fd70 	bl	800f404 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01f      	beq.n	800b96c <tcp_output+0x1d0>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8b5b      	ldrh	r3, [r3, #26]
 800b930:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b934:	2b00      	cmp	r3, #0
 800b936:	d119      	bne.n	800b96c <tcp_output+0x1d0>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <tcp_output+0x1bc>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d110      	bne.n	800b96c <tcp_output+0x1d0>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b94e:	891a      	ldrh	r2, [r3, #8]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b954:	429a      	cmp	r2, r3
 800b956:	d209      	bcs.n	800b96c <tcp_output+0x1d0>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <tcp_output+0x1d0>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b968:	2b08      	cmp	r3, #8
 800b96a:	d901      	bls.n	800b970 <tcp_output+0x1d4>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <tcp_output+0x1d6>
 800b970:	2300      	movs	r3, #0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	8b5b      	ldrh	r3, [r3, #26]
 800b97a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 80e4 	beq.w	800bb4c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	7d1b      	ldrb	r3, [r3, #20]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d00d      	beq.n	800b9a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	899b      	ldrh	r3, [r3, #12]
 800b992:	b29c      	uxth	r4, r3
 800b994:	2010      	movs	r0, #16
 800b996:	f7f9 f837 	bl	8004a08 <lwip_htons>
 800b99a:	4603      	mov	r3, r0
 800b99c:	461a      	mov	r2, r3
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	4322      	orrs	r2, r4
 800b9a4:	b292      	uxth	r2, r2
 800b9a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9ae:	f000 f909 	bl	800bbc4 <tcp_output_segment>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d016      	beq.n	800b9ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	8b5b      	ldrh	r3, [r3, #26]
 800b9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	835a      	strh	r2, [r3, #26]
      return err;
 800b9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d0:	e0d3      	b.n	800bb7a <tcp_output+0x3de>
 800b9d2:	bf00      	nop
 800b9d4:	08011f48 	.word	0x08011f48
 800b9d8:	0801248c 	.word	0x0801248c
 800b9dc:	08011f9c 	.word	0x08011f9c
 800b9e0:	080124a4 	.word	0x080124a4
 800b9e4:	2000a4a4 	.word	0x2000a4a4
 800b9e8:	080124cc 	.word	0x080124cc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7d1b      	ldrb	r3, [r3, #20]
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d006      	beq.n	800ba0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	8b5b      	ldrh	r3, [r3, #26]
 800ba00:	f023 0303 	bic.w	r3, r3, #3
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7f9 f80e 	bl	8004a32 <lwip_htonl>
 800ba16:	4604      	mov	r4, r0
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	891b      	ldrh	r3, [r3, #8]
 800ba1c:	461d      	mov	r5, r3
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	899b      	ldrh	r3, [r3, #12]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7f8 ffee 	bl	8004a08 <lwip_htons>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	f003 0303 	and.w	r3, r3, #3
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <tcp_output+0x2a0>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e000      	b.n	800ba3e <tcp_output+0x2a2>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	442b      	add	r3, r5
 800ba40:	4423      	add	r3, r4
 800ba42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da02      	bge.n	800ba56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	891b      	ldrh	r3, [r3, #8]
 800ba5a:	461c      	mov	r4, r3
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	899b      	ldrh	r3, [r3, #12]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7f8 ffcf 	bl	8004a08 <lwip_htons>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <tcp_output+0x2de>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e000      	b.n	800ba7c <tcp_output+0x2e0>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	4423      	add	r3, r4
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d049      	beq.n	800bb16 <tcp_output+0x37a>
      seg->next = NULL;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	2200      	movs	r2, #0
 800ba86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d105      	bne.n	800ba9c <tcp_output+0x300>
        pcb->unacked = seg;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	623b      	str	r3, [r7, #32]
 800ba9a:	e03f      	b.n	800bb1c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f8 ffc5 	bl	8004a32 <lwip_htonl>
 800baa8:	4604      	mov	r4, r0
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f8 ffbe 	bl	8004a32 <lwip_htonl>
 800bab6:	4603      	mov	r3, r0
 800bab8:	1ae3      	subs	r3, r4, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	da24      	bge.n	800bb08 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3370      	adds	r3, #112	; 0x70
 800bac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bac4:	e002      	b.n	800bacc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d011      	beq.n	800baf8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4618      	mov	r0, r3
 800bade:	f7f8 ffa8 	bl	8004a32 <lwip_htonl>
 800bae2:	4604      	mov	r4, r0
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	4618      	mov	r0, r3
 800baec:	f7f8 ffa1 	bl	8004a32 <lwip_htonl>
 800baf0:	4603      	mov	r3, r0
 800baf2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dbe6      	blt.n	800bac6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	e009      	b.n	800bb1c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	623b      	str	r3, [r7, #32]
 800bb14:	e002      	b.n	800bb1c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bb16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb18:	f7fb ff37 	bl	800798a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d012      	beq.n	800bb4e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f8 ff7f 	bl	8004a32 <lwip_htonl>
 800bb34:	4602      	mov	r2, r0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3e:	8912      	ldrh	r2, [r2, #8]
 800bb40:	4413      	add	r3, r2
  while (seg != NULL &&
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	f4bf aed9 	bcs.w	800b8fc <tcp_output+0x160>
 800bb4a:	e000      	b.n	800bb4e <tcp_output+0x3b2>
      break;
 800bb4c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d108      	bne.n	800bb68 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bb5e:	e004      	b.n	800bb6a <tcp_output+0x3ce>
    goto output_done;
 800bb60:	bf00      	nop
 800bb62:	e002      	b.n	800bb6a <tcp_output+0x3ce>
    goto output_done;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bb68:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	8b5b      	ldrh	r3, [r3, #26]
 800bb6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3728      	adds	r7, #40	; 0x28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bdb0      	pop	{r4, r5, r7, pc}
 800bb82:	bf00      	nop

0800bb84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <tcp_output_segment_busy+0x1c>
 800bb92:	4b09      	ldr	r3, [pc, #36]	; (800bbb8 <tcp_output_segment_busy+0x34>)
 800bb94:	f240 529a 	movw	r2, #1434	; 0x59a
 800bb98:	4908      	ldr	r1, [pc, #32]	; (800bbbc <tcp_output_segment_busy+0x38>)
 800bb9a:	4809      	ldr	r0, [pc, #36]	; (800bbc0 <tcp_output_segment_busy+0x3c>)
 800bb9c:	f003 fc32 	bl	800f404 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	7b9b      	ldrb	r3, [r3, #14]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d001      	beq.n	800bbae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e000      	b.n	800bbb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	08011f48 	.word	0x08011f48
 800bbbc:	080124e4 	.word	0x080124e4
 800bbc0:	08011f9c 	.word	0x08011f9c

0800bbc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bbc4:	b5b0      	push	{r4, r5, r7, lr}
 800bbc6:	b08c      	sub	sp, #48	; 0x30
 800bbc8:	af04      	add	r7, sp, #16
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <tcp_output_segment+0x20>
 800bbd6:	4b63      	ldr	r3, [pc, #396]	; (800bd64 <tcp_output_segment+0x1a0>)
 800bbd8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bbdc:	4962      	ldr	r1, [pc, #392]	; (800bd68 <tcp_output_segment+0x1a4>)
 800bbde:	4863      	ldr	r0, [pc, #396]	; (800bd6c <tcp_output_segment+0x1a8>)
 800bbe0:	f003 fc10 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <tcp_output_segment+0x34>
 800bbea:	4b5e      	ldr	r3, [pc, #376]	; (800bd64 <tcp_output_segment+0x1a0>)
 800bbec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bbf0:	495f      	ldr	r1, [pc, #380]	; (800bd70 <tcp_output_segment+0x1ac>)
 800bbf2:	485e      	ldr	r0, [pc, #376]	; (800bd6c <tcp_output_segment+0x1a8>)
 800bbf4:	f003 fc06 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <tcp_output_segment+0x48>
 800bbfe:	4b59      	ldr	r3, [pc, #356]	; (800bd64 <tcp_output_segment+0x1a0>)
 800bc00:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bc04:	495b      	ldr	r1, [pc, #364]	; (800bd74 <tcp_output_segment+0x1b0>)
 800bc06:	4859      	ldr	r0, [pc, #356]	; (800bd6c <tcp_output_segment+0x1a8>)
 800bc08:	f003 fbfc 	bl	800f404 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f7ff ffb9 	bl	800bb84 <tcp_output_segment_busy>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e09f      	b.n	800bd5c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	68dc      	ldr	r4, [r3, #12]
 800bc24:	4610      	mov	r0, r2
 800bc26:	f7f8 ff04 	bl	8004a32 <lwip_htonl>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68dc      	ldr	r4, [r3, #12]
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7f8 fee6 	bl	8004a08 <lwip_htons>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bc48:	441a      	add	r2, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	3314      	adds	r3, #20
 800bc54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	7a9b      	ldrb	r3, [r3, #10]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d015      	beq.n	800bc8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	3304      	adds	r3, #4
 800bc66:	461a      	mov	r2, r3
 800bc68:	6879      	ldr	r1, [r7, #4]
 800bc6a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bc6e:	f7fc fa33 	bl	80080d8 <tcp_eff_send_mss_netif>
 800bc72:	4603      	mov	r3, r0
 800bc74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bc76:	8b7b      	ldrh	r3, [r7, #26]
 800bc78:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7f8 fed8 	bl	8004a32 <lwip_htonl>
 800bc82:	4602      	mov	r2, r0
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	da02      	bge.n	800bc9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10c      	bne.n	800bcc0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bca6:	4b34      	ldr	r3, [pc, #208]	; (800bd78 <tcp_output_segment+0x1b4>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f8 febc 	bl	8004a32 <lwip_htonl>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68da      	ldr	r2, [r3, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	8959      	ldrh	r1, [r3, #10]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	8b3a      	ldrh	r2, [r7, #24]
 800bcda:	1a8a      	subs	r2, r1, r2
 800bcdc:	b292      	uxth	r2, r2
 800bcde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	8919      	ldrh	r1, [r3, #8]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	8b3a      	ldrh	r2, [r7, #24]
 800bcec:	1a8a      	subs	r2, r1, r2
 800bcee:	b292      	uxth	r2, r2
 800bcf0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	68d2      	ldr	r2, [r2, #12]
 800bcfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	741a      	strb	r2, [r3, #16]
 800bd04:	2200      	movs	r2, #0
 800bd06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	f103 0214 	add.w	r2, r3, #20
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	7a9b      	ldrb	r3, [r3, #10]
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	f003 0304 	and.w	r3, r3, #4
 800bd1a:	4413      	add	r3, r2
 800bd1c:	69fa      	ldr	r2, [r7, #28]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d006      	beq.n	800bd30 <tcp_output_segment+0x16c>
 800bd22:	4b10      	ldr	r3, [pc, #64]	; (800bd64 <tcp_output_segment+0x1a0>)
 800bd24:	f240 621c 	movw	r2, #1564	; 0x61c
 800bd28:	4914      	ldr	r1, [pc, #80]	; (800bd7c <tcp_output_segment+0x1b8>)
 800bd2a:	4810      	ldr	r0, [pc, #64]	; (800bd6c <tcp_output_segment+0x1a8>)
 800bd2c:	f003 fb6a 	bl	800f404 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6858      	ldr	r0, [r3, #4]
 800bd34:	68b9      	ldr	r1, [r7, #8]
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	1d1c      	adds	r4, r3, #4
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	7add      	ldrb	r5, [r3, #11]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	7a9b      	ldrb	r3, [r3, #10]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	9202      	str	r2, [sp, #8]
 800bd46:	2206      	movs	r2, #6
 800bd48:	9201      	str	r2, [sp, #4]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	4622      	mov	r2, r4
 800bd50:	f002 fa36 	bl	800e1c0 <ip4_output_if>
 800bd54:	4603      	mov	r3, r0
 800bd56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bd58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bdb0      	pop	{r4, r5, r7, pc}
 800bd64:	08011f48 	.word	0x08011f48
 800bd68:	0801250c 	.word	0x0801250c
 800bd6c:	08011f9c 	.word	0x08011f9c
 800bd70:	0801252c 	.word	0x0801252c
 800bd74:	0801254c 	.word	0x0801254c
 800bd78:	2000a458 	.word	0x2000a458
 800bd7c:	08012570 	.word	0x08012570

0800bd80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bd80:	b5b0      	push	{r4, r5, r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <tcp_rexmit_rto_prepare+0x1c>
 800bd8e:	4b31      	ldr	r3, [pc, #196]	; (800be54 <tcp_rexmit_rto_prepare+0xd4>)
 800bd90:	f240 6263 	movw	r2, #1635	; 0x663
 800bd94:	4930      	ldr	r1, [pc, #192]	; (800be58 <tcp_rexmit_rto_prepare+0xd8>)
 800bd96:	4831      	ldr	r0, [pc, #196]	; (800be5c <tcp_rexmit_rto_prepare+0xdc>)
 800bd98:	f003 fb34 	bl	800f404 <iprintf>

  if (pcb->unacked == NULL) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d102      	bne.n	800bdaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bda4:	f06f 0305 	mvn.w	r3, #5
 800bda8:	e050      	b.n	800be4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	e00b      	b.n	800bdca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7ff fee6 	bl	800bb84 <tcp_output_segment_busy>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bdbe:	f06f 0305 	mvn.w	r3, #5
 800bdc2:	e043      	b.n	800be4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	60fb      	str	r3, [r7, #12]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1ef      	bne.n	800bdb2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7ff fed6 	bl	800bb84 <tcp_output_segment_busy>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bdde:	f06f 0305 	mvn.w	r3, #5
 800bde2:	e033      	b.n	800be4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	8b5b      	ldrh	r3, [r3, #26]
 800bdfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be02:	b29a      	uxth	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f8 fe0f 	bl	8004a32 <lwip_htonl>
 800be14:	4604      	mov	r4, r0
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	891b      	ldrh	r3, [r3, #8]
 800be1a:	461d      	mov	r5, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	899b      	ldrh	r3, [r3, #12]
 800be22:	b29b      	uxth	r3, r3
 800be24:	4618      	mov	r0, r3
 800be26:	f7f8 fdef 	bl	8004a08 <lwip_htons>
 800be2a:	4603      	mov	r3, r0
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <tcp_rexmit_rto_prepare+0xba>
 800be36:	2301      	movs	r3, #1
 800be38:	e000      	b.n	800be3c <tcp_rexmit_rto_prepare+0xbc>
 800be3a:	2300      	movs	r3, #0
 800be3c:	442b      	add	r3, r5
 800be3e:	18e2      	adds	r2, r4, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bdb0      	pop	{r4, r5, r7, pc}
 800be54:	08011f48 	.word	0x08011f48
 800be58:	08012584 	.word	0x08012584
 800be5c:	08011f9c 	.word	0x08011f9c

0800be60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <tcp_rexmit_rto_commit+0x1c>
 800be6e:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <tcp_rexmit_rto_commit+0x44>)
 800be70:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800be74:	490c      	ldr	r1, [pc, #48]	; (800bea8 <tcp_rexmit_rto_commit+0x48>)
 800be76:	480d      	ldr	r0, [pc, #52]	; (800beac <tcp_rexmit_rto_commit+0x4c>)
 800be78:	f003 fac4 	bl	800f404 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be82:	2bff      	cmp	r3, #255	; 0xff
 800be84:	d007      	beq.n	800be96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be8c:	3301      	adds	r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fc80 	bl	800b79c <tcp_output>
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	08011f48 	.word	0x08011f48
 800bea8:	080125a8 	.word	0x080125a8
 800beac:	08011f9c 	.word	0x08011f9c

0800beb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <tcp_rexmit_rto+0x1c>
 800bebe:	4b0a      	ldr	r3, [pc, #40]	; (800bee8 <tcp_rexmit_rto+0x38>)
 800bec0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bec4:	4909      	ldr	r1, [pc, #36]	; (800beec <tcp_rexmit_rto+0x3c>)
 800bec6:	480a      	ldr	r0, [pc, #40]	; (800bef0 <tcp_rexmit_rto+0x40>)
 800bec8:	f003 fa9c 	bl	800f404 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff57 	bl	800bd80 <tcp_rexmit_rto_prepare>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d102      	bne.n	800bede <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ffc1 	bl	800be60 <tcp_rexmit_rto_commit>
  }
}
 800bede:	bf00      	nop
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	08011f48 	.word	0x08011f48
 800beec:	080125cc 	.word	0x080125cc
 800bef0:	08011f9c 	.word	0x08011f9c

0800bef4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bef4:	b590      	push	{r4, r7, lr}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d106      	bne.n	800bf10 <tcp_rexmit+0x1c>
 800bf02:	4b2f      	ldr	r3, [pc, #188]	; (800bfc0 <tcp_rexmit+0xcc>)
 800bf04:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bf08:	492e      	ldr	r1, [pc, #184]	; (800bfc4 <tcp_rexmit+0xd0>)
 800bf0a:	482f      	ldr	r0, [pc, #188]	; (800bfc8 <tcp_rexmit+0xd4>)
 800bf0c:	f003 fa7a 	bl	800f404 <iprintf>

  if (pcb->unacked == NULL) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bf18:	f06f 0305 	mvn.w	r3, #5
 800bf1c:	e04c      	b.n	800bfb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bf24:	68b8      	ldr	r0, [r7, #8]
 800bf26:	f7ff fe2d 	bl	800bb84 <tcp_output_segment_busy>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bf30:	f06f 0305 	mvn.w	r3, #5
 800bf34:	e040      	b.n	800bfb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	336c      	adds	r3, #108	; 0x6c
 800bf42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bf44:	e002      	b.n	800bf4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d011      	beq.n	800bf78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7f8 fd68 	bl	8004a32 <lwip_htonl>
 800bf62:	4604      	mov	r4, r0
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f8 fd61 	bl	8004a32 <lwip_htonl>
 800bf70:	4603      	mov	r3, r0
 800bf72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dbe6      	blt.n	800bf46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d103      	bne.n	800bf96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf9c:	2bff      	cmp	r3, #255	; 0xff
 800bf9e:	d007      	beq.n	800bfb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd90      	pop	{r4, r7, pc}
 800bfc0:	08011f48 	.word	0x08011f48
 800bfc4:	080125e8 	.word	0x080125e8
 800bfc8:	08011f9c 	.word	0x08011f9c

0800bfcc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <tcp_rexmit_fast+0x1c>
 800bfda:	4b2a      	ldr	r3, [pc, #168]	; (800c084 <tcp_rexmit_fast+0xb8>)
 800bfdc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bfe0:	4929      	ldr	r1, [pc, #164]	; (800c088 <tcp_rexmit_fast+0xbc>)
 800bfe2:	482a      	ldr	r0, [pc, #168]	; (800c08c <tcp_rexmit_fast+0xc0>)
 800bfe4:	f003 fa0e 	bl	800f404 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d044      	beq.n	800c07a <tcp_rexmit_fast+0xae>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8b5b      	ldrh	r3, [r3, #26]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d13e      	bne.n	800c07a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ff79 	bl	800bef4 <tcp_rexmit>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d138      	bne.n	800c07a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c014:	4293      	cmp	r3, r2
 800c016:	bf28      	it	cs
 800c018:	4613      	movcs	r3, r2
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	0fda      	lsrs	r2, r3, #31
 800c01e:	4413      	add	r3, r2
 800c020:	105b      	asrs	r3, r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c030:	461a      	mov	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	429a      	cmp	r2, r3
 800c03a:	d206      	bcs.n	800c04a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	b29a      	uxth	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c054:	4619      	mov	r1, r3
 800c056:	0049      	lsls	r1, r1, #1
 800c058:	440b      	add	r3, r1
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4413      	add	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	8b5b      	ldrh	r3, [r3, #26]
 800c06a:	f043 0304 	orr.w	r3, r3, #4
 800c06e:	b29a      	uxth	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	08011f48 	.word	0x08011f48
 800c088:	08012600 	.word	0x08012600
 800c08c:	08011f9c 	.word	0x08011f9c

0800c090 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	817b      	strh	r3, [r7, #10]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c0a2:	897a      	ldrh	r2, [r7, #10]
 800c0a4:	893b      	ldrh	r3, [r7, #8]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3314      	adds	r3, #20
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	2022      	movs	r0, #34	; 0x22
 800c0b6:	f7f9 fd21 	bl	8005afc <pbuf_alloc>
 800c0ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d04d      	beq.n	800c15e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c0c2:	897b      	ldrh	r3, [r7, #10]
 800c0c4:	3313      	adds	r3, #19
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	8952      	ldrh	r2, [r2, #10]
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	db06      	blt.n	800c0dc <tcp_output_alloc_header_common+0x4c>
 800c0ce:	4b26      	ldr	r3, [pc, #152]	; (800c168 <tcp_output_alloc_header_common+0xd8>)
 800c0d0:	f240 7223 	movw	r2, #1827	; 0x723
 800c0d4:	4925      	ldr	r1, [pc, #148]	; (800c16c <tcp_output_alloc_header_common+0xdc>)
 800c0d6:	4826      	ldr	r0, [pc, #152]	; (800c170 <tcp_output_alloc_header_common+0xe0>)
 800c0d8:	f003 f994 	bl	800f404 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c0e2:	8c3b      	ldrh	r3, [r7, #32]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7f8 fc8f 	bl	8004a08 <lwip_htons>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f8 fc87 	bl	8004a08 <lwip_htons>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7f8 fc92 	bl	8004a32 <lwip_htonl>
 800c10e:	4602      	mov	r2, r0
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c114:	897b      	ldrh	r3, [r7, #10]
 800c116:	089b      	lsrs	r3, r3, #2
 800c118:	b29b      	uxth	r3, r3
 800c11a:	3305      	adds	r3, #5
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	031b      	lsls	r3, r3, #12
 800c120:	b29a      	uxth	r2, r3
 800c122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c126:	b29b      	uxth	r3, r3
 800c128:	4313      	orrs	r3, r2
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f8 fc6b 	bl	8004a08 <lwip_htons>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c13a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7f8 fc63 	bl	8004a08 <lwip_htons>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2200      	movs	r2, #0
 800c14e:	741a      	strb	r2, [r3, #16]
 800c150:	2200      	movs	r2, #0
 800c152:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	2200      	movs	r2, #0
 800c158:	749a      	strb	r2, [r3, #18]
 800c15a:	2200      	movs	r2, #0
 800c15c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c15e:	697b      	ldr	r3, [r7, #20]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	08011f48 	.word	0x08011f48
 800c16c:	08012620 	.word	0x08012620
 800c170:	08011f9c 	.word	0x08011f9c

0800c174 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c174:	b5b0      	push	{r4, r5, r7, lr}
 800c176:	b08a      	sub	sp, #40	; 0x28
 800c178:	af04      	add	r7, sp, #16
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	607b      	str	r3, [r7, #4]
 800c17e:	460b      	mov	r3, r1
 800c180:	817b      	strh	r3, [r7, #10]
 800c182:	4613      	mov	r3, r2
 800c184:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d106      	bne.n	800c19a <tcp_output_alloc_header+0x26>
 800c18c:	4b15      	ldr	r3, [pc, #84]	; (800c1e4 <tcp_output_alloc_header+0x70>)
 800c18e:	f240 7242 	movw	r2, #1858	; 0x742
 800c192:	4915      	ldr	r1, [pc, #84]	; (800c1e8 <tcp_output_alloc_header+0x74>)
 800c194:	4815      	ldr	r0, [pc, #84]	; (800c1ec <tcp_output_alloc_header+0x78>)
 800c196:	f003 f935 	bl	800f404 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	8adb      	ldrh	r3, [r3, #22]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	8b12      	ldrh	r2, [r2, #24]
 800c1a6:	68f9      	ldr	r1, [r7, #12]
 800c1a8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c1aa:	893d      	ldrh	r5, [r7, #8]
 800c1ac:	897c      	ldrh	r4, [r7, #10]
 800c1ae:	9103      	str	r1, [sp, #12]
 800c1b0:	2110      	movs	r1, #16
 800c1b2:	9102      	str	r1, [sp, #8]
 800c1b4:	9201      	str	r2, [sp, #4]
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	462a      	mov	r2, r5
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f7ff ff67 	bl	800c090 <tcp_output_alloc_header_common>
 800c1c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d006      	beq.n	800c1d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c1d2:	441a      	add	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c1d8:	697b      	ldr	r3, [r7, #20]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	08011f48 	.word	0x08011f48
 800c1e8:	08012650 	.word	0x08012650
 800c1ec:	08011f9c 	.word	0x08011f9c

0800c1f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	460b      	mov	r3, r1
 800c200:	71fb      	strb	r3, [r7, #7]
 800c202:	4613      	mov	r3, r2
 800c204:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <tcp_output_fill_options+0x2e>
 800c210:	4b13      	ldr	r3, [pc, #76]	; (800c260 <tcp_output_fill_options+0x70>)
 800c212:	f240 7256 	movw	r2, #1878	; 0x756
 800c216:	4913      	ldr	r1, [pc, #76]	; (800c264 <tcp_output_fill_options+0x74>)
 800c218:	4813      	ldr	r0, [pc, #76]	; (800c268 <tcp_output_fill_options+0x78>)
 800c21a:	f003 f8f3 	bl	800f404 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	3314      	adds	r3, #20
 800c228:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	f103 0214 	add.w	r2, r3, #20
 800c230:	8bfb      	ldrh	r3, [r7, #30]
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4619      	mov	r1, r3
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	f003 0304 	and.w	r3, r3, #4
 800c23e:	440b      	add	r3, r1
 800c240:	4413      	add	r3, r2
 800c242:	697a      	ldr	r2, [r7, #20]
 800c244:	429a      	cmp	r2, r3
 800c246:	d006      	beq.n	800c256 <tcp_output_fill_options+0x66>
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <tcp_output_fill_options+0x70>)
 800c24a:	f240 7275 	movw	r2, #1909	; 0x775
 800c24e:	4907      	ldr	r1, [pc, #28]	; (800c26c <tcp_output_fill_options+0x7c>)
 800c250:	4805      	ldr	r0, [pc, #20]	; (800c268 <tcp_output_fill_options+0x78>)
 800c252:	f003 f8d7 	bl	800f404 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c256:	bf00      	nop
 800c258:	3720      	adds	r7, #32
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	08011f48 	.word	0x08011f48
 800c264:	08012678 	.word	0x08012678
 800c268:	08011f9c 	.word	0x08011f9c
 800c26c:	08012570 	.word	0x08012570

0800c270 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08a      	sub	sp, #40	; 0x28
 800c274:	af04      	add	r7, sp, #16
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d106      	bne.n	800c292 <tcp_output_control_segment+0x22>
 800c284:	4b1c      	ldr	r3, [pc, #112]	; (800c2f8 <tcp_output_control_segment+0x88>)
 800c286:	f240 7287 	movw	r2, #1927	; 0x787
 800c28a:	491c      	ldr	r1, [pc, #112]	; (800c2fc <tcp_output_control_segment+0x8c>)
 800c28c:	481c      	ldr	r0, [pc, #112]	; (800c300 <tcp_output_control_segment+0x90>)
 800c28e:	f003 f8b9 	bl	800f404 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	6879      	ldr	r1, [r7, #4]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7fe fae8 	bl	800a86c <tcp_route>
 800c29c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c2a4:	23fc      	movs	r3, #252	; 0xfc
 800c2a6:	75fb      	strb	r3, [r7, #23]
 800c2a8:	e01c      	b.n	800c2e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d006      	beq.n	800c2be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	7adb      	ldrb	r3, [r3, #11]
 800c2b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	7a9b      	ldrb	r3, [r3, #10]
 800c2ba:	757b      	strb	r3, [r7, #21]
 800c2bc:	e003      	b.n	800c2c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c2be:	23ff      	movs	r3, #255	; 0xff
 800c2c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c2c6:	7dba      	ldrb	r2, [r7, #22]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	9302      	str	r3, [sp, #8]
 800c2cc:	2306      	movs	r3, #6
 800c2ce:	9301      	str	r3, [sp, #4]
 800c2d0:	7d7b      	ldrb	r3, [r7, #21]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	6879      	ldr	r1, [r7, #4]
 800c2da:	68b8      	ldr	r0, [r7, #8]
 800c2dc:	f001 ff70 	bl	800e1c0 <ip4_output_if>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f7f9 feed 	bl	80060c4 <pbuf_free>
  return err;
 800c2ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	08011f48 	.word	0x08011f48
 800c2fc:	080126a0 	.word	0x080126a0
 800c300:	08011f9c 	.word	0x08011f9c

0800c304 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c304:	b590      	push	{r4, r7, lr}
 800c306:	b08b      	sub	sp, #44	; 0x2c
 800c308:	af04      	add	r7, sp, #16
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d106      	bne.n	800c326 <tcp_rst+0x22>
 800c318:	4b1f      	ldr	r3, [pc, #124]	; (800c398 <tcp_rst+0x94>)
 800c31a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c31e:	491f      	ldr	r1, [pc, #124]	; (800c39c <tcp_rst+0x98>)
 800c320:	481f      	ldr	r0, [pc, #124]	; (800c3a0 <tcp_rst+0x9c>)
 800c322:	f003 f86f 	bl	800f404 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <tcp_rst+0x36>
 800c32c:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <tcp_rst+0x94>)
 800c32e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c332:	491c      	ldr	r1, [pc, #112]	; (800c3a4 <tcp_rst+0xa0>)
 800c334:	481a      	ldr	r0, [pc, #104]	; (800c3a0 <tcp_rst+0x9c>)
 800c336:	f003 f865 	bl	800f404 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c33a:	2300      	movs	r3, #0
 800c33c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c33e:	f246 0308 	movw	r3, #24584	; 0x6008
 800c342:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c344:	7dfb      	ldrb	r3, [r7, #23]
 800c346:	b29c      	uxth	r4, r3
 800c348:	68b8      	ldr	r0, [r7, #8]
 800c34a:	f7f8 fb72 	bl	8004a32 <lwip_htonl>
 800c34e:	4602      	mov	r2, r0
 800c350:	8abb      	ldrh	r3, [r7, #20]
 800c352:	9303      	str	r3, [sp, #12]
 800c354:	2314      	movs	r3, #20
 800c356:	9302      	str	r3, [sp, #8]
 800c358:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c35a:	9301      	str	r3, [sp, #4]
 800c35c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	4613      	mov	r3, r2
 800c362:	2200      	movs	r2, #0
 800c364:	4621      	mov	r1, r4
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fe92 	bl	800c090 <tcp_output_alloc_header_common>
 800c36c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00c      	beq.n	800c38e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	2200      	movs	r2, #0
 800c378:	6939      	ldr	r1, [r7, #16]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff ff38 	bl	800c1f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	6939      	ldr	r1, [r7, #16]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff ff72 	bl	800c270 <tcp_output_control_segment>
 800c38c:	e000      	b.n	800c390 <tcp_rst+0x8c>
    return;
 800c38e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	bd90      	pop	{r4, r7, pc}
 800c396:	bf00      	nop
 800c398:	08011f48 	.word	0x08011f48
 800c39c:	080126cc 	.word	0x080126cc
 800c3a0:	08011f9c 	.word	0x08011f9c
 800c3a4:	080126e8 	.word	0x080126e8

0800c3a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c3a8:	b590      	push	{r4, r7, lr}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <tcp_send_empty_ack+0x24>
 800c3be:	4b28      	ldr	r3, [pc, #160]	; (800c460 <tcp_send_empty_ack+0xb8>)
 800c3c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c3c4:	4927      	ldr	r1, [pc, #156]	; (800c464 <tcp_send_empty_ack+0xbc>)
 800c3c6:	4828      	ldr	r0, [pc, #160]	; (800c468 <tcp_send_empty_ack+0xc0>)
 800c3c8:	f003 f81c 	bl	800f404 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f003 0304 	and.w	r3, r3, #4
 800c3d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c3d8:	7d7b      	ldrb	r3, [r7, #21]
 800c3da:	b29c      	uxth	r4, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f8 fb26 	bl	8004a32 <lwip_htonl>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7ff fec1 	bl	800c174 <tcp_output_alloc_header>
 800c3f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d109      	bne.n	800c40e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	8b5b      	ldrh	r3, [r3, #26]
 800c3fe:	f043 0303 	orr.w	r3, r3, #3
 800c402:	b29a      	uxth	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c408:	f06f 0301 	mvn.w	r3, #1
 800c40c:	e023      	b.n	800c456 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c40e:	7dbb      	ldrb	r3, [r7, #22]
 800c410:	7dfa      	ldrb	r2, [r7, #23]
 800c412:	6939      	ldr	r1, [r7, #16]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff feeb 	bl	800c1f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3304      	adds	r3, #4
 800c420:	6939      	ldr	r1, [r7, #16]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff ff24 	bl	800c270 <tcp_output_control_segment>
 800c428:	4603      	mov	r3, r0
 800c42a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d007      	beq.n	800c444 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	8b5b      	ldrh	r3, [r3, #26]
 800c438:	f043 0303 	orr.w	r3, r3, #3
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	835a      	strh	r2, [r3, #26]
 800c442:	e006      	b.n	800c452 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	8b5b      	ldrh	r3, [r3, #26]
 800c448:	f023 0303 	bic.w	r3, r3, #3
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	371c      	adds	r7, #28
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd90      	pop	{r4, r7, pc}
 800c45e:	bf00      	nop
 800c460:	08011f48 	.word	0x08011f48
 800c464:	08012704 	.word	0x08012704
 800c468:	08011f9c 	.word	0x08011f9c

0800c46c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c46c:	b590      	push	{r4, r7, lr}
 800c46e:	b087      	sub	sp, #28
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c474:	2300      	movs	r3, #0
 800c476:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d106      	bne.n	800c48c <tcp_keepalive+0x20>
 800c47e:	4b18      	ldr	r3, [pc, #96]	; (800c4e0 <tcp_keepalive+0x74>)
 800c480:	f640 0224 	movw	r2, #2084	; 0x824
 800c484:	4917      	ldr	r1, [pc, #92]	; (800c4e4 <tcp_keepalive+0x78>)
 800c486:	4818      	ldr	r0, [pc, #96]	; (800c4e8 <tcp_keepalive+0x7c>)
 800c488:	f002 ffbc 	bl	800f404 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	b29c      	uxth	r4, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c494:	3b01      	subs	r3, #1
 800c496:	4618      	mov	r0, r3
 800c498:	f7f8 facb 	bl	8004a32 <lwip_htonl>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2200      	movs	r2, #0
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff fe66 	bl	800c174 <tcp_output_alloc_header>
 800c4a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b4:	e010      	b.n	800c4d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	6939      	ldr	r1, [r7, #16]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff fe97 	bl	800c1f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	6939      	ldr	r1, [r7, #16]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff fed0 	bl	800c270 <tcp_output_control_segment>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	371c      	adds	r7, #28
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd90      	pop	{r4, r7, pc}
 800c4e0:	08011f48 	.word	0x08011f48
 800c4e4:	08012724 	.word	0x08012724
 800c4e8:	08011f9c 	.word	0x08011f9c

0800c4ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c4ec:	b590      	push	{r4, r7, lr}
 800c4ee:	b08b      	sub	sp, #44	; 0x2c
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d106      	bne.n	800c50e <tcp_zero_window_probe+0x22>
 800c500:	4b4c      	ldr	r3, [pc, #304]	; (800c634 <tcp_zero_window_probe+0x148>)
 800c502:	f640 024f 	movw	r2, #2127	; 0x84f
 800c506:	494c      	ldr	r1, [pc, #304]	; (800c638 <tcp_zero_window_probe+0x14c>)
 800c508:	484c      	ldr	r0, [pc, #304]	; (800c63c <tcp_zero_window_probe+0x150>)
 800c50a:	f002 ff7b 	bl	800f404 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c512:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e086      	b.n	800c62c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c524:	2bff      	cmp	r3, #255	; 0xff
 800c526:	d007      	beq.n	800c538 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c52e:	3301      	adds	r3, #1
 800c530:	b2da      	uxtb	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	899b      	ldrh	r3, [r3, #12]
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4618      	mov	r0, r3
 800c542:	f7f8 fa61 	bl	8004a08 <lwip_htons>
 800c546:	4603      	mov	r3, r0
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <tcp_zero_window_probe+0x72>
 800c552:	6a3b      	ldr	r3, [r7, #32]
 800c554:	891b      	ldrh	r3, [r3, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <tcp_zero_window_probe+0x72>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e000      	b.n	800c560 <tcp_zero_window_probe+0x74>
 800c55e:	2300      	movs	r3, #0
 800c560:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c562:	7ffb      	ldrb	r3, [r7, #31]
 800c564:	2b00      	cmp	r3, #0
 800c566:	bf0c      	ite	eq
 800c568:	2301      	moveq	r3, #1
 800c56a:	2300      	movne	r3, #0
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c574:	b299      	uxth	r1, r3
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	8bba      	ldrh	r2, [r7, #28]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff fdf8 	bl	800c174 <tcp_output_alloc_header>
 800c584:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d102      	bne.n	800c592 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c58c:	f04f 33ff 	mov.w	r3, #4294967295
 800c590:	e04c      	b.n	800c62c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c598:	7ffb      	ldrb	r3, [r7, #31]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d011      	beq.n	800c5c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	899b      	ldrh	r3, [r3, #12]
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	b21b      	sxth	r3, r3
 800c5a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5aa:	b21c      	sxth	r4, r3
 800c5ac:	2011      	movs	r0, #17
 800c5ae:	f7f8 fa2b 	bl	8004a08 <lwip_htons>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	b21b      	sxth	r3, r3
 800c5b6:	4323      	orrs	r3, r4
 800c5b8:	b21b      	sxth	r3, r3
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	819a      	strh	r2, [r3, #12]
 800c5c0:	e010      	b.n	800c5e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	3314      	adds	r3, #20
 800c5c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	6858      	ldr	r0, [r3, #4]
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	891a      	ldrh	r2, [r3, #8]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	891b      	ldrh	r3, [r3, #8]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	2201      	movs	r2, #1
 800c5de:	6939      	ldr	r1, [r7, #16]
 800c5e0:	f7f9 ff5a 	bl	8006498 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f8 fa21 	bl	8004a32 <lwip_htonl>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da02      	bge.n	800c608 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c60c:	2200      	movs	r2, #0
 800c60e:	69b9      	ldr	r1, [r7, #24]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff fded 	bl	800c1f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3304      	adds	r3, #4
 800c61c:	69b9      	ldr	r1, [r7, #24]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff fe26 	bl	800c270 <tcp_output_control_segment>
 800c624:	4603      	mov	r3, r0
 800c626:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c628:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	372c      	adds	r7, #44	; 0x2c
 800c630:	46bd      	mov	sp, r7
 800c632:	bd90      	pop	{r4, r7, pc}
 800c634:	08011f48 	.word	0x08011f48
 800c638:	08012740 	.word	0x08012740
 800c63c:	08011f9c 	.word	0x08011f9c

0800c640 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c648:	f7fa f8a6 	bl	8006798 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <tcpip_tcp_timer+0x38>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d103      	bne.n	800c65c <tcpip_tcp_timer+0x1c>
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <tcpip_tcp_timer+0x3c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c65c:	2200      	movs	r2, #0
 800c65e:	4908      	ldr	r1, [pc, #32]	; (800c680 <tcpip_tcp_timer+0x40>)
 800c660:	20fa      	movs	r0, #250	; 0xfa
 800c662:	f000 f8f3 	bl	800c84c <sys_timeout>
 800c666:	e003      	b.n	800c670 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c668:	4b06      	ldr	r3, [pc, #24]	; (800c684 <tcpip_tcp_timer+0x44>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
  }
}
 800c66e:	bf00      	nop
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	2000a464 	.word	0x2000a464
 800c67c:	2000a468 	.word	0x2000a468
 800c680:	0800c641 	.word	0x0800c641
 800c684:	2000a4b0 	.word	0x2000a4b0

0800c688 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c68c:	4b0a      	ldr	r3, [pc, #40]	; (800c6b8 <tcp_timer_needed+0x30>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10f      	bne.n	800c6b4 <tcp_timer_needed+0x2c>
 800c694:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <tcp_timer_needed+0x34>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d103      	bne.n	800c6a4 <tcp_timer_needed+0x1c>
 800c69c:	4b08      	ldr	r3, [pc, #32]	; (800c6c0 <tcp_timer_needed+0x38>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d007      	beq.n	800c6b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c6a4:	4b04      	ldr	r3, [pc, #16]	; (800c6b8 <tcp_timer_needed+0x30>)
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	4905      	ldr	r1, [pc, #20]	; (800c6c4 <tcp_timer_needed+0x3c>)
 800c6ae:	20fa      	movs	r0, #250	; 0xfa
 800c6b0:	f000 f8cc 	bl	800c84c <sys_timeout>
  }
}
 800c6b4:	bf00      	nop
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	2000a4b0 	.word	0x2000a4b0
 800c6bc:	2000a464 	.word	0x2000a464
 800c6c0:	2000a468 	.word	0x2000a468
 800c6c4:	0800c641 	.word	0x0800c641

0800c6c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c6d4:	2006      	movs	r0, #6
 800c6d6:	f7f8 fe0f 	bl	80052f8 <memp_malloc>
 800c6da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d151      	bne.n	800c78c <sys_timeout_abs+0xc4>
 800c6e8:	4b2a      	ldr	r3, [pc, #168]	; (800c794 <sys_timeout_abs+0xcc>)
 800c6ea:	22be      	movs	r2, #190	; 0xbe
 800c6ec:	492a      	ldr	r1, [pc, #168]	; (800c798 <sys_timeout_abs+0xd0>)
 800c6ee:	482b      	ldr	r0, [pc, #172]	; (800c79c <sys_timeout_abs+0xd4>)
 800c6f0:	f002 fe88 	bl	800f404 <iprintf>
    return;
 800c6f4:	e04a      	b.n	800c78c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c70e:	4b24      	ldr	r3, [pc, #144]	; (800c7a0 <sys_timeout_abs+0xd8>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d103      	bne.n	800c71e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c716:	4a22      	ldr	r2, [pc, #136]	; (800c7a0 <sys_timeout_abs+0xd8>)
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	6013      	str	r3, [r2, #0]
    return;
 800c71c:	e037      	b.n	800c78e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	4b1f      	ldr	r3, [pc, #124]	; (800c7a0 <sys_timeout_abs+0xd8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	0fdb      	lsrs	r3, r3, #31
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d007      	beq.n	800c746 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <sys_timeout_abs+0xd8>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c73e:	4a18      	ldr	r2, [pc, #96]	; (800c7a0 <sys_timeout_abs+0xd8>)
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	6013      	str	r3, [r2, #0]
 800c744:	e023      	b.n	800c78e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c746:	4b16      	ldr	r3, [pc, #88]	; (800c7a0 <sys_timeout_abs+0xd8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	e01a      	b.n	800c784 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00b      	beq.n	800c76e <sys_timeout_abs+0xa6>
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	0fdb      	lsrs	r3, r3, #31
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d007      	beq.n	800c77e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	601a      	str	r2, [r3, #0]
        break;
 800c77c:	e007      	b.n	800c78e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e1      	bne.n	800c74e <sys_timeout_abs+0x86>
 800c78a:	e000      	b.n	800c78e <sys_timeout_abs+0xc6>
    return;
 800c78c:	bf00      	nop
      }
    }
  }
}
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	08012764 	.word	0x08012764
 800c798:	08012798 	.word	0x08012798
 800c79c:	080127d8 	.word	0x080127d8
 800c7a0:	2000a4a8 	.word	0x2000a4a8

0800c7a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	4798      	blx	r3

  now = sys_now();
 800c7b6:	f7f7 ff07 	bl	80045c8 <sys_now>
 800c7ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <lwip_cyclic_timer+0x5c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	0fdb      	lsrs	r3, r3, #31
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d009      	beq.n	800c7ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	4907      	ldr	r1, [pc, #28]	; (800c804 <lwip_cyclic_timer+0x60>)
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff ff6e 	bl	800c6c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c7ec:	e004      	b.n	800c7f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4904      	ldr	r1, [pc, #16]	; (800c804 <lwip_cyclic_timer+0x60>)
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff ff68 	bl	800c6c8 <sys_timeout_abs>
}
 800c7f8:	bf00      	nop
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	2000a4ac 	.word	0x2000a4ac
 800c804:	0800c7a5 	.word	0x0800c7a5

0800c808 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c80e:	2301      	movs	r3, #1
 800c810:	607b      	str	r3, [r7, #4]
 800c812:	e00e      	b.n	800c832 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c814:	4a0b      	ldr	r2, [pc, #44]	; (800c844 <sys_timeouts_init+0x3c>)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	4a08      	ldr	r2, [pc, #32]	; (800c844 <sys_timeouts_init+0x3c>)
 800c822:	4413      	add	r3, r2
 800c824:	461a      	mov	r2, r3
 800c826:	4908      	ldr	r1, [pc, #32]	; (800c848 <sys_timeouts_init+0x40>)
 800c828:	f000 f810 	bl	800c84c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3301      	adds	r3, #1
 800c830:	607b      	str	r3, [r7, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b02      	cmp	r3, #2
 800c836:	d9ed      	bls.n	800c814 <sys_timeouts_init+0xc>
  }
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	08013348 	.word	0x08013348
 800c848:	0800c7a5 	.word	0x0800c7a5

0800c84c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c85e:	d306      	bcc.n	800c86e <sys_timeout+0x22>
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <sys_timeout+0x40>)
 800c862:	f240 1229 	movw	r2, #297	; 0x129
 800c866:	490a      	ldr	r1, [pc, #40]	; (800c890 <sys_timeout+0x44>)
 800c868:	480a      	ldr	r0, [pc, #40]	; (800c894 <sys_timeout+0x48>)
 800c86a:	f002 fdcb 	bl	800f404 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c86e:	f7f7 feab 	bl	80045c8 <sys_now>
 800c872:	4602      	mov	r2, r0
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	4413      	add	r3, r2
 800c878:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	68b9      	ldr	r1, [r7, #8]
 800c87e:	6978      	ldr	r0, [r7, #20]
 800c880:	f7ff ff22 	bl	800c6c8 <sys_timeout_abs>
#endif
}
 800c884:	bf00      	nop
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	08012764 	.word	0x08012764
 800c890:	08012800 	.word	0x08012800
 800c894:	080127d8 	.word	0x080127d8

0800c898 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c89e:	f7f7 fe93 	bl	80045c8 <sys_now>
 800c8a2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c8a4:	4b1a      	ldr	r3, [pc, #104]	; (800c910 <sys_check_timeouts+0x78>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <sys_check_timeouts+0x1a>
 800c8ae:	f7f9 f8cf 	bl	8005a50 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c8b2:	4b18      	ldr	r3, [pc, #96]	; (800c914 <sys_check_timeouts+0x7c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d022      	beq.n	800c904 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	0fdb      	lsrs	r3, r3, #31
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d11a      	bne.n	800c908 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a0f      	ldr	r2, [pc, #60]	; (800c914 <sys_check_timeouts+0x7c>)
 800c8d8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	4a0b      	ldr	r2, [pc, #44]	; (800c918 <sys_check_timeouts+0x80>)
 800c8ec:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	2006      	movs	r0, #6
 800c8f2:	f7f8 fd71 	bl	80053d8 <memp_free>
    if (handler != NULL) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0d3      	beq.n	800c8a4 <sys_check_timeouts+0xc>
      handler(arg);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6838      	ldr	r0, [r7, #0]
 800c900:	4798      	blx	r3
  do {
 800c902:	e7cf      	b.n	800c8a4 <sys_check_timeouts+0xc>
      return;
 800c904:	bf00      	nop
 800c906:	e000      	b.n	800c90a <sys_check_timeouts+0x72>
      return;
 800c908:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	2000a455 	.word	0x2000a455
 800c914:	2000a4a8 	.word	0x2000a4a8
 800c918:	2000a4ac 	.word	0x2000a4ac

0800c91c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c920:	f002 fd88 	bl	800f434 <rand>
 800c924:	4603      	mov	r3, r0
 800c926:	b29b      	uxth	r3, r3
 800c928:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c932:	b29a      	uxth	r2, r3
 800c934:	4b01      	ldr	r3, [pc, #4]	; (800c93c <udp_init+0x20>)
 800c936:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c938:	bf00      	nop
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000028 	.word	0x20000028

0800c940 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	4613      	mov	r3, r2
 800c94c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d105      	bne.n	800c960 <udp_input_local_match+0x20>
 800c954:	4b27      	ldr	r3, [pc, #156]	; (800c9f4 <udp_input_local_match+0xb4>)
 800c956:	2287      	movs	r2, #135	; 0x87
 800c958:	4927      	ldr	r1, [pc, #156]	; (800c9f8 <udp_input_local_match+0xb8>)
 800c95a:	4828      	ldr	r0, [pc, #160]	; (800c9fc <udp_input_local_match+0xbc>)
 800c95c:	f002 fd52 	bl	800f404 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d105      	bne.n	800c972 <udp_input_local_match+0x32>
 800c966:	4b23      	ldr	r3, [pc, #140]	; (800c9f4 <udp_input_local_match+0xb4>)
 800c968:	2288      	movs	r2, #136	; 0x88
 800c96a:	4925      	ldr	r1, [pc, #148]	; (800ca00 <udp_input_local_match+0xc0>)
 800c96c:	4823      	ldr	r0, [pc, #140]	; (800c9fc <udp_input_local_match+0xbc>)
 800c96e:	f002 fd49 	bl	800f404 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	7a1b      	ldrb	r3, [r3, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00b      	beq.n	800c992 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	7a1a      	ldrb	r2, [r3, #8]
 800c97e:	4b21      	ldr	r3, [pc, #132]	; (800ca04 <udp_input_local_match+0xc4>)
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c986:	3301      	adds	r3, #1
 800c988:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d001      	beq.n	800c992 <udp_input_local_match+0x52>
    return 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	e02b      	b.n	800c9ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d018      	beq.n	800c9ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d013      	beq.n	800c9c6 <udp_input_local_match+0x86>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00f      	beq.n	800c9c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9a6:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <udp_input_local_match+0xc4>)
 800c9a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ae:	d00a      	beq.n	800c9c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <udp_input_local_match+0xc4>)
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	405a      	eors	r2, r3
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d110      	bne.n	800c9e8 <udp_input_local_match+0xa8>
          return 1;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e00f      	b.n	800c9ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d009      	beq.n	800c9e4 <udp_input_local_match+0xa4>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <udp_input_local_match+0xa4>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b09      	ldr	r3, [pc, #36]	; (800ca04 <udp_input_local_match+0xc4>)
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d101      	bne.n	800c9e8 <udp_input_local_match+0xa8>
        return 1;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e000      	b.n	800c9ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	0801284c 	.word	0x0801284c
 800c9f8:	0801287c 	.word	0x0801287c
 800c9fc:	080128a0 	.word	0x080128a0
 800ca00:	080128c8 	.word	0x080128c8
 800ca04:	20004d28 	.word	0x20004d28

0800ca08 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca08:	b590      	push	{r4, r7, lr}
 800ca0a:	b08d      	sub	sp, #52	; 0x34
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d105      	bne.n	800ca28 <udp_input+0x20>
 800ca1c:	4b7c      	ldr	r3, [pc, #496]	; (800cc10 <udp_input+0x208>)
 800ca1e:	22cf      	movs	r2, #207	; 0xcf
 800ca20:	497c      	ldr	r1, [pc, #496]	; (800cc14 <udp_input+0x20c>)
 800ca22:	487d      	ldr	r0, [pc, #500]	; (800cc18 <udp_input+0x210>)
 800ca24:	f002 fcee 	bl	800f404 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d105      	bne.n	800ca3a <udp_input+0x32>
 800ca2e:	4b78      	ldr	r3, [pc, #480]	; (800cc10 <udp_input+0x208>)
 800ca30:	22d0      	movs	r2, #208	; 0xd0
 800ca32:	497a      	ldr	r1, [pc, #488]	; (800cc1c <udp_input+0x214>)
 800ca34:	4878      	ldr	r0, [pc, #480]	; (800cc18 <udp_input+0x210>)
 800ca36:	f002 fce5 	bl	800f404 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	895b      	ldrh	r3, [r3, #10]
 800ca3e:	2b07      	cmp	r3, #7
 800ca40:	d803      	bhi.n	800ca4a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7f9 fb3e 	bl	80060c4 <pbuf_free>
    goto end;
 800ca48:	e0de      	b.n	800cc08 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ca50:	4b73      	ldr	r3, [pc, #460]	; (800cc20 <udp_input+0x218>)
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	4a72      	ldr	r2, [pc, #456]	; (800cc20 <udp_input+0x218>)
 800ca56:	6812      	ldr	r2, [r2, #0]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f001 fc88 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800ca60:	4603      	mov	r3, r0
 800ca62:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	881b      	ldrh	r3, [r3, #0]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f7 ffcc 	bl	8004a08 <lwip_htons>
 800ca70:	4603      	mov	r3, r0
 800ca72:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	885b      	ldrh	r3, [r3, #2]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7f7 ffc4 	bl	8004a08 <lwip_htons>
 800ca80:	4603      	mov	r3, r0
 800ca82:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca90:	4b64      	ldr	r3, [pc, #400]	; (800cc24 <udp_input+0x21c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
 800ca96:	e054      	b.n	800cb42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	8a5b      	ldrh	r3, [r3, #18]
 800ca9c:	89fa      	ldrh	r2, [r7, #14]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d14a      	bne.n	800cb38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800caa2:	7cfb      	ldrb	r3, [r7, #19]
 800caa4:	461a      	mov	r2, r3
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caaa:	f7ff ff49 	bl	800c940 <udp_input_local_match>
 800caae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d041      	beq.n	800cb38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	7c1b      	ldrb	r3, [r3, #16]
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d11d      	bne.n	800cafc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	61fb      	str	r3, [r7, #28]
 800caca:	e017      	b.n	800cafc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cacc:	7cfb      	ldrb	r3, [r7, #19]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d014      	beq.n	800cafc <udp_input+0xf4>
 800cad2:	4b53      	ldr	r3, [pc, #332]	; (800cc20 <udp_input+0x218>)
 800cad4:	695b      	ldr	r3, [r3, #20]
 800cad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cada:	d10f      	bne.n	800cafc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	3304      	adds	r3, #4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d008      	beq.n	800cafc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	3304      	adds	r3, #4
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d101      	bne.n	800cafc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	8a9b      	ldrh	r3, [r3, #20]
 800cb00:	8a3a      	ldrh	r2, [r7, #16]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d118      	bne.n	800cb38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d005      	beq.n	800cb1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	4b43      	ldr	r3, [pc, #268]	; (800cc20 <udp_input+0x218>)
 800cb14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d10e      	bne.n	800cb38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d014      	beq.n	800cb4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	68da      	ldr	r2, [r3, #12]
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cb28:	4b3e      	ldr	r3, [pc, #248]	; (800cc24 <udp_input+0x21c>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cb30:	4a3c      	ldr	r2, [pc, #240]	; (800cc24 <udp_input+0x21c>)
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cb36:	e008      	b.n	800cb4a <udp_input+0x142>
      }
    }

    prev = pcb;
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1a7      	bne.n	800ca98 <udp_input+0x90>
 800cb48:	e000      	b.n	800cb4c <udp_input+0x144>
        break;
 800cb4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <udp_input+0x15a>
    for_us = 1;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	76fb      	strb	r3, [r7, #27]
 800cb60:	e00a      	b.n	800cb78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	3304      	adds	r3, #4
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	4b2d      	ldr	r3, [pc, #180]	; (800cc20 <udp_input+0x218>)
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	bf0c      	ite	eq
 800cb70:	2301      	moveq	r3, #1
 800cb72:	2300      	movne	r3, #0
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cb78:	7efb      	ldrb	r3, [r7, #27]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d041      	beq.n	800cc02 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cb7e:	2108      	movs	r1, #8
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7f9 fa19 	bl	8005fb8 <pbuf_remove_header>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cb8c:	4b20      	ldr	r3, [pc, #128]	; (800cc10 <udp_input+0x208>)
 800cb8e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cb92:	4925      	ldr	r1, [pc, #148]	; (800cc28 <udp_input+0x220>)
 800cb94:	4820      	ldr	r0, [pc, #128]	; (800cc18 <udp_input+0x210>)
 800cb96:	f002 fc35 	bl	800f404 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7f9 fa92 	bl	80060c4 <pbuf_free>
      goto end;
 800cba0:	e032      	b.n	800cc08 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d012      	beq.n	800cbce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00a      	beq.n	800cbc6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	699c      	ldr	r4, [r3, #24]
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	69d8      	ldr	r0, [r3, #28]
 800cbb8:	8a3b      	ldrh	r3, [r7, #16]
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	4b1b      	ldr	r3, [pc, #108]	; (800cc2c <udp_input+0x224>)
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbc2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cbc4:	e021      	b.n	800cc0a <udp_input+0x202>
        pbuf_free(p);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7f9 fa7c 	bl	80060c4 <pbuf_free>
        goto end;
 800cbcc:	e01c      	b.n	800cc08 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbce:	7cfb      	ldrb	r3, [r7, #19]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d112      	bne.n	800cbfa <udp_input+0x1f2>
 800cbd4:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <udp_input+0x218>)
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbdc:	2be0      	cmp	r3, #224	; 0xe0
 800cbde:	d00c      	beq.n	800cbfa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cbe0:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <udp_input+0x218>)
 800cbe2:	899b      	ldrh	r3, [r3, #12]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	b21b      	sxth	r3, r3
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7f9 fa56 	bl	800609e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cbf2:	2103      	movs	r1, #3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 f89b 	bl	800dd30 <icmp_dest_unreach>
      pbuf_free(p);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7f9 fa62 	bl	80060c4 <pbuf_free>
  return;
 800cc00:	e003      	b.n	800cc0a <udp_input+0x202>
    pbuf_free(p);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7f9 fa5e 	bl	80060c4 <pbuf_free>
  return;
 800cc08:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc0a:	372c      	adds	r7, #44	; 0x2c
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd90      	pop	{r4, r7, pc}
 800cc10:	0801284c 	.word	0x0801284c
 800cc14:	080128f0 	.word	0x080128f0
 800cc18:	080128a0 	.word	0x080128a0
 800cc1c:	08012908 	.word	0x08012908
 800cc20:	20004d28 	.word	0x20004d28
 800cc24:	2000a4b4 	.word	0x2000a4b4
 800cc28:	08012924 	.word	0x08012924
 800cc2c:	20004d38 	.word	0x20004d38

0800cc30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d01e      	beq.n	800cc7e <udp_netif_ip_addr_changed+0x4e>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d01a      	beq.n	800cc7e <udp_netif_ip_addr_changed+0x4e>
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d017      	beq.n	800cc7e <udp_netif_ip_addr_changed+0x4e>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d013      	beq.n	800cc7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc56:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <udp_netif_ip_addr_changed+0x5c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e00c      	b.n	800cc78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d103      	bne.n	800cc72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1ef      	bne.n	800cc5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cc7e:	bf00      	nop
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	2000a4b4 	.word	0x2000a4b4

0800cc90 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cc98:	4915      	ldr	r1, [pc, #84]	; (800ccf0 <etharp_free_entry+0x60>)
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	4413      	add	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	440b      	add	r3, r1
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d013      	beq.n	800ccd4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ccac:	4910      	ldr	r1, [pc, #64]	; (800ccf0 <etharp_free_entry+0x60>)
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f9 fa01 	bl	80060c4 <pbuf_free>
    arp_table[i].q = NULL;
 800ccc2:	490b      	ldr	r1, [pc, #44]	; (800ccf0 <etharp_free_entry+0x60>)
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	4413      	add	r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	440b      	add	r3, r1
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ccd4:	4906      	ldr	r1, [pc, #24]	; (800ccf0 <etharp_free_entry+0x60>)
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	4613      	mov	r3, r2
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	440b      	add	r3, r1
 800cce2:	3314      	adds	r3, #20
 800cce4:	2200      	movs	r2, #0
 800cce6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	2000a4b8 	.word	0x2000a4b8

0800ccf4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	607b      	str	r3, [r7, #4]
 800ccfe:	e096      	b.n	800ce2e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cd00:	494f      	ldr	r1, [pc, #316]	; (800ce40 <etharp_tmr+0x14c>)
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	4613      	mov	r3, r2
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	4413      	add	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	440b      	add	r3, r1
 800cd0e:	3314      	adds	r3, #20
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 8086 	beq.w	800ce28 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd1c:	4948      	ldr	r1, [pc, #288]	; (800ce40 <etharp_tmr+0x14c>)
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	4613      	mov	r3, r2
 800cd22:	005b      	lsls	r3, r3, #1
 800cd24:	4413      	add	r3, r2
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	440b      	add	r3, r1
 800cd2a:	3312      	adds	r3, #18
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	b298      	uxth	r0, r3
 800cd32:	4943      	ldr	r1, [pc, #268]	; (800ce40 <etharp_tmr+0x14c>)
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	4613      	mov	r3, r2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	440b      	add	r3, r1
 800cd40:	3312      	adds	r3, #18
 800cd42:	4602      	mov	r2, r0
 800cd44:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd46:	493e      	ldr	r1, [pc, #248]	; (800ce40 <etharp_tmr+0x14c>)
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	440b      	add	r3, r1
 800cd54:	3312      	adds	r3, #18
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cd5c:	d215      	bcs.n	800cd8a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd5e:	4938      	ldr	r1, [pc, #224]	; (800ce40 <etharp_tmr+0x14c>)
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4613      	mov	r3, r2
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	4413      	add	r3, r2
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3314      	adds	r3, #20
 800cd6e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d10e      	bne.n	800cd92 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cd74:	4932      	ldr	r1, [pc, #200]	; (800ce40 <etharp_tmr+0x14c>)
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	005b      	lsls	r3, r3, #1
 800cd7c:	4413      	add	r3, r2
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	440b      	add	r3, r1
 800cd82:	3312      	adds	r3, #18
 800cd84:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d903      	bls.n	800cd92 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff ff80 	bl	800cc90 <etharp_free_entry>
 800cd90:	e04a      	b.n	800ce28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cd92:	492b      	ldr	r1, [pc, #172]	; (800ce40 <etharp_tmr+0x14c>)
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4613      	mov	r3, r2
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	3314      	adds	r3, #20
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d10a      	bne.n	800cdbe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cda8:	4925      	ldr	r1, [pc, #148]	; (800ce40 <etharp_tmr+0x14c>)
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	4613      	mov	r3, r2
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	4413      	add	r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	440b      	add	r3, r1
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	2204      	movs	r2, #4
 800cdba:	701a      	strb	r2, [r3, #0]
 800cdbc:	e034      	b.n	800ce28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cdbe:	4920      	ldr	r1, [pc, #128]	; (800ce40 <etharp_tmr+0x14c>)
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	4413      	add	r3, r2
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	440b      	add	r3, r1
 800cdcc:	3314      	adds	r3, #20
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b04      	cmp	r3, #4
 800cdd2:	d10a      	bne.n	800cdea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cdd4:	491a      	ldr	r1, [pc, #104]	; (800ce40 <etharp_tmr+0x14c>)
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	4413      	add	r3, r2
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	440b      	add	r3, r1
 800cde2:	3314      	adds	r3, #20
 800cde4:	2202      	movs	r2, #2
 800cde6:	701a      	strb	r2, [r3, #0]
 800cde8:	e01e      	b.n	800ce28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdea:	4915      	ldr	r1, [pc, #84]	; (800ce40 <etharp_tmr+0x14c>)
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	4413      	add	r3, r2
 800cdf4:	00db      	lsls	r3, r3, #3
 800cdf6:	440b      	add	r3, r1
 800cdf8:	3314      	adds	r3, #20
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d113      	bne.n	800ce28 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ce00:	490f      	ldr	r1, [pc, #60]	; (800ce40 <etharp_tmr+0x14c>)
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3308      	adds	r3, #8
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	4a08      	ldr	r2, [pc, #32]	; (800ce40 <etharp_tmr+0x14c>)
 800ce1e:	4413      	add	r3, r2
 800ce20:	3304      	adds	r3, #4
 800ce22:	4619      	mov	r1, r3
 800ce24:	f000 fe6e 	bl	800db04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	607b      	str	r3, [r7, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b09      	cmp	r3, #9
 800ce32:	f77f af65 	ble.w	800cd00 <etharp_tmr+0xc>
      }
    }
  }
}
 800ce36:	bf00      	nop
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	2000a4b8 	.word	0x2000a4b8

0800ce44 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08a      	sub	sp, #40	; 0x28
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	607a      	str	r2, [r7, #4]
 800ce50:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ce52:	230a      	movs	r3, #10
 800ce54:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ce56:	230a      	movs	r3, #10
 800ce58:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ce5a:	230a      	movs	r3, #10
 800ce5c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ce62:	230a      	movs	r3, #10
 800ce64:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	83bb      	strh	r3, [r7, #28]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	837b      	strh	r3, [r7, #26]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce72:	2300      	movs	r3, #0
 800ce74:	843b      	strh	r3, [r7, #32]
 800ce76:	e0ae      	b.n	800cfd6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ce78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce7c:	49a6      	ldr	r1, [pc, #664]	; (800d118 <etharp_find_entry+0x2d4>)
 800ce7e:	4613      	mov	r3, r2
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	4413      	add	r3, r2
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	440b      	add	r3, r1
 800ce88:	3314      	adds	r3, #20
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ce8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ce92:	2b0a      	cmp	r3, #10
 800ce94:	d105      	bne.n	800cea2 <etharp_find_entry+0x5e>
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ce9c:	8c3b      	ldrh	r3, [r7, #32]
 800ce9e:	847b      	strh	r3, [r7, #34]	; 0x22
 800cea0:	e095      	b.n	800cfce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 8092 	beq.w	800cfce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d009      	beq.n	800cec4 <etharp_find_entry+0x80>
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d806      	bhi.n	800cec4 <etharp_find_entry+0x80>
 800ceb6:	4b99      	ldr	r3, [pc, #612]	; (800d11c <etharp_find_entry+0x2d8>)
 800ceb8:	f240 1223 	movw	r2, #291	; 0x123
 800cebc:	4998      	ldr	r1, [pc, #608]	; (800d120 <etharp_find_entry+0x2dc>)
 800cebe:	4899      	ldr	r0, [pc, #612]	; (800d124 <etharp_find_entry+0x2e0>)
 800cec0:	f002 faa0 	bl	800f404 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d020      	beq.n	800cf0c <etharp_find_entry+0xc8>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6819      	ldr	r1, [r3, #0]
 800cece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ced2:	4891      	ldr	r0, [pc, #580]	; (800d118 <etharp_find_entry+0x2d4>)
 800ced4:	4613      	mov	r3, r2
 800ced6:	005b      	lsls	r3, r3, #1
 800ced8:	4413      	add	r3, r2
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	4403      	add	r3, r0
 800cede:	3304      	adds	r3, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4299      	cmp	r1, r3
 800cee4:	d112      	bne.n	800cf0c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00c      	beq.n	800cf06 <etharp_find_entry+0xc2>
 800ceec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cef0:	4989      	ldr	r1, [pc, #548]	; (800d118 <etharp_find_entry+0x2d4>)
 800cef2:	4613      	mov	r3, r2
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	4413      	add	r3, r2
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	440b      	add	r3, r1
 800cefc:	3308      	adds	r3, #8
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d102      	bne.n	800cf0c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cf06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf0a:	e100      	b.n	800d10e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d140      	bne.n	800cf94 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf16:	4980      	ldr	r1, [pc, #512]	; (800d118 <etharp_find_entry+0x2d4>)
 800cf18:	4613      	mov	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	4413      	add	r3, r2
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	440b      	add	r3, r1
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01a      	beq.n	800cf5e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cf28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf2c:	497a      	ldr	r1, [pc, #488]	; (800d118 <etharp_find_entry+0x2d4>)
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	440b      	add	r3, r1
 800cf38:	3312      	adds	r3, #18
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	8bba      	ldrh	r2, [r7, #28]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d845      	bhi.n	800cfce <etharp_find_entry+0x18a>
            old_queue = i;
 800cf42:	8c3b      	ldrh	r3, [r7, #32]
 800cf44:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cf46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf4a:	4973      	ldr	r1, [pc, #460]	; (800d118 <etharp_find_entry+0x2d4>)
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	4413      	add	r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	440b      	add	r3, r1
 800cf56:	3312      	adds	r3, #18
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	83bb      	strh	r3, [r7, #28]
 800cf5c:	e037      	b.n	800cfce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cf5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf62:	496d      	ldr	r1, [pc, #436]	; (800d118 <etharp_find_entry+0x2d4>)
 800cf64:	4613      	mov	r3, r2
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	4413      	add	r3, r2
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	440b      	add	r3, r1
 800cf6e:	3312      	adds	r3, #18
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	8b7a      	ldrh	r2, [r7, #26]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d82a      	bhi.n	800cfce <etharp_find_entry+0x18a>
            old_pending = i;
 800cf78:	8c3b      	ldrh	r3, [r7, #32]
 800cf7a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cf7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf80:	4965      	ldr	r1, [pc, #404]	; (800d118 <etharp_find_entry+0x2d4>)
 800cf82:	4613      	mov	r3, r2
 800cf84:	005b      	lsls	r3, r3, #1
 800cf86:	4413      	add	r3, r2
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	440b      	add	r3, r1
 800cf8c:	3312      	adds	r3, #18
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	837b      	strh	r3, [r7, #26]
 800cf92:	e01c      	b.n	800cfce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d919      	bls.n	800cfce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cf9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf9e:	495e      	ldr	r1, [pc, #376]	; (800d118 <etharp_find_entry+0x2d4>)
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	4413      	add	r3, r2
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	440b      	add	r3, r1
 800cfaa:	3312      	adds	r3, #18
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	8b3a      	ldrh	r2, [r7, #24]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d80c      	bhi.n	800cfce <etharp_find_entry+0x18a>
            old_stable = i;
 800cfb4:	8c3b      	ldrh	r3, [r7, #32]
 800cfb6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cfb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfbc:	4956      	ldr	r1, [pc, #344]	; (800d118 <etharp_find_entry+0x2d4>)
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	4413      	add	r3, r2
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3312      	adds	r3, #18
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfce:	8c3b      	ldrh	r3, [r7, #32]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	843b      	strh	r3, [r7, #32]
 800cfd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfda:	2b09      	cmp	r3, #9
 800cfdc:	f77f af4c 	ble.w	800ce78 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	f003 0302 	and.w	r3, r3, #2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d108      	bne.n	800cffc <etharp_find_entry+0x1b8>
 800cfea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cfee:	2b0a      	cmp	r3, #10
 800cff0:	d107      	bne.n	800d002 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cff2:	7afb      	ldrb	r3, [r7, #11]
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cffc:	f04f 33ff 	mov.w	r3, #4294967295
 800d000:	e085      	b.n	800d10e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d002:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d006:	2b09      	cmp	r3, #9
 800d008:	dc02      	bgt.n	800d010 <etharp_find_entry+0x1cc>
    i = empty;
 800d00a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d00c:	843b      	strh	r3, [r7, #32]
 800d00e:	e039      	b.n	800d084 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d010:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d014:	2b09      	cmp	r3, #9
 800d016:	dc14      	bgt.n	800d042 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d01a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d01c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d020:	493d      	ldr	r1, [pc, #244]	; (800d118 <etharp_find_entry+0x2d4>)
 800d022:	4613      	mov	r3, r2
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	4413      	add	r3, r2
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	440b      	add	r3, r1
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d018      	beq.n	800d064 <etharp_find_entry+0x220>
 800d032:	4b3a      	ldr	r3, [pc, #232]	; (800d11c <etharp_find_entry+0x2d8>)
 800d034:	f240 126d 	movw	r2, #365	; 0x16d
 800d038:	493b      	ldr	r1, [pc, #236]	; (800d128 <etharp_find_entry+0x2e4>)
 800d03a:	483a      	ldr	r0, [pc, #232]	; (800d124 <etharp_find_entry+0x2e0>)
 800d03c:	f002 f9e2 	bl	800f404 <iprintf>
 800d040:	e010      	b.n	800d064 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d042:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d046:	2b09      	cmp	r3, #9
 800d048:	dc02      	bgt.n	800d050 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d04c:	843b      	strh	r3, [r7, #32]
 800d04e:	e009      	b.n	800d064 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d050:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d054:	2b09      	cmp	r3, #9
 800d056:	dc02      	bgt.n	800d05e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d058:	8bfb      	ldrh	r3, [r7, #30]
 800d05a:	843b      	strh	r3, [r7, #32]
 800d05c:	e002      	b.n	800d064 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d05e:	f04f 33ff 	mov.w	r3, #4294967295
 800d062:	e054      	b.n	800d10e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d064:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d068:	2b09      	cmp	r3, #9
 800d06a:	dd06      	ble.n	800d07a <etharp_find_entry+0x236>
 800d06c:	4b2b      	ldr	r3, [pc, #172]	; (800d11c <etharp_find_entry+0x2d8>)
 800d06e:	f240 127f 	movw	r2, #383	; 0x17f
 800d072:	492e      	ldr	r1, [pc, #184]	; (800d12c <etharp_find_entry+0x2e8>)
 800d074:	482b      	ldr	r0, [pc, #172]	; (800d124 <etharp_find_entry+0x2e0>)
 800d076:	f002 f9c5 	bl	800f404 <iprintf>
    etharp_free_entry(i);
 800d07a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fe06 	bl	800cc90 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d084:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d088:	2b09      	cmp	r3, #9
 800d08a:	dd06      	ble.n	800d09a <etharp_find_entry+0x256>
 800d08c:	4b23      	ldr	r3, [pc, #140]	; (800d11c <etharp_find_entry+0x2d8>)
 800d08e:	f240 1283 	movw	r2, #387	; 0x183
 800d092:	4926      	ldr	r1, [pc, #152]	; (800d12c <etharp_find_entry+0x2e8>)
 800d094:	4823      	ldr	r0, [pc, #140]	; (800d124 <etharp_find_entry+0x2e0>)
 800d096:	f002 f9b5 	bl	800f404 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d09a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d09e:	491e      	ldr	r1, [pc, #120]	; (800d118 <etharp_find_entry+0x2d4>)
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	4413      	add	r3, r2
 800d0a6:	00db      	lsls	r3, r3, #3
 800d0a8:	440b      	add	r3, r1
 800d0aa:	3314      	adds	r3, #20
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d006      	beq.n	800d0c0 <etharp_find_entry+0x27c>
 800d0b2:	4b1a      	ldr	r3, [pc, #104]	; (800d11c <etharp_find_entry+0x2d8>)
 800d0b4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d0b8:	491d      	ldr	r1, [pc, #116]	; (800d130 <etharp_find_entry+0x2ec>)
 800d0ba:	481a      	ldr	r0, [pc, #104]	; (800d124 <etharp_find_entry+0x2e0>)
 800d0bc:	f002 f9a2 	bl	800f404 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00b      	beq.n	800d0de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d0c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6819      	ldr	r1, [r3, #0]
 800d0ce:	4812      	ldr	r0, [pc, #72]	; (800d118 <etharp_find_entry+0x2d4>)
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	4413      	add	r3, r2
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	4403      	add	r3, r0
 800d0da:	3304      	adds	r3, #4
 800d0dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d0de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0e2:	490d      	ldr	r1, [pc, #52]	; (800d118 <etharp_find_entry+0x2d4>)
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	005b      	lsls	r3, r3, #1
 800d0e8:	4413      	add	r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	440b      	add	r3, r1
 800d0ee:	3312      	adds	r3, #18
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d0f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0f8:	4907      	ldr	r1, [pc, #28]	; (800d118 <etharp_find_entry+0x2d4>)
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	4413      	add	r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	440b      	add	r3, r1
 800d104:	3308      	adds	r3, #8
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d10a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3728      	adds	r7, #40	; 0x28
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	2000a4b8 	.word	0x2000a4b8
 800d11c:	08012bb0 	.word	0x08012bb0
 800d120:	08012be8 	.word	0x08012be8
 800d124:	08012c28 	.word	0x08012c28
 800d128:	08012c50 	.word	0x08012c50
 800d12c:	08012c68 	.word	0x08012c68
 800d130:	08012c7c 	.word	0x08012c7c

0800d134 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b088      	sub	sp, #32
 800d138:	af02      	add	r7, sp, #8
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d148:	2b06      	cmp	r3, #6
 800d14a:	d006      	beq.n	800d15a <etharp_update_arp_entry+0x26>
 800d14c:	4b48      	ldr	r3, [pc, #288]	; (800d270 <etharp_update_arp_entry+0x13c>)
 800d14e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d152:	4948      	ldr	r1, [pc, #288]	; (800d274 <etharp_update_arp_entry+0x140>)
 800d154:	4848      	ldr	r0, [pc, #288]	; (800d278 <etharp_update_arp_entry+0x144>)
 800d156:	f002 f955 	bl	800f404 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d012      	beq.n	800d186 <etharp_update_arp_entry+0x52>
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00e      	beq.n	800d186 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68f9      	ldr	r1, [r7, #12]
 800d16e:	4618      	mov	r0, r3
 800d170:	f001 f8fe 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800d174:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d176:	2b00      	cmp	r3, #0
 800d178:	d105      	bne.n	800d186 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d182:	2be0      	cmp	r3, #224	; 0xe0
 800d184:	d102      	bne.n	800d18c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d186:	f06f 030f 	mvn.w	r3, #15
 800d18a:	e06c      	b.n	800d266 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d18c:	78fb      	ldrb	r3, [r7, #3]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	4619      	mov	r1, r3
 800d192:	68b8      	ldr	r0, [r7, #8]
 800d194:	f7ff fe56 	bl	800ce44 <etharp_find_entry>
 800d198:	4603      	mov	r3, r0
 800d19a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d19c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	da02      	bge.n	800d1aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d1a4:	8afb      	ldrh	r3, [r7, #22]
 800d1a6:	b25b      	sxtb	r3, r3
 800d1a8:	e05d      	b.n	800d266 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d1aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1ae:	4933      	ldr	r1, [pc, #204]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	4413      	add	r3, r2
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	440b      	add	r3, r1
 800d1ba:	3314      	adds	r3, #20
 800d1bc:	2202      	movs	r2, #2
 800d1be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d1c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1c4:	492d      	ldr	r1, [pc, #180]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	4413      	add	r3, r2
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	440b      	add	r3, r1
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d1d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	4413      	add	r3, r2
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	4a25      	ldr	r2, [pc, #148]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d1e6:	4413      	add	r3, r2
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	2206      	movs	r2, #6
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f002 f8d8 	bl	800f3a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d1f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1f8:	4920      	ldr	r1, [pc, #128]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	4413      	add	r3, r2
 800d200:	00db      	lsls	r3, r3, #3
 800d202:	440b      	add	r3, r1
 800d204:	3312      	adds	r3, #18
 800d206:	2200      	movs	r2, #0
 800d208:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d20a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d20e:	491b      	ldr	r1, [pc, #108]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d210:	4613      	mov	r3, r2
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	4413      	add	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	440b      	add	r3, r1
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d021      	beq.n	800d264 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d224:	4915      	ldr	r1, [pc, #84]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d226:	4613      	mov	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	440b      	add	r3, r1
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d238:	4910      	ldr	r1, [pc, #64]	; (800d27c <etharp_update_arp_entry+0x148>)
 800d23a:	4613      	mov	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	4413      	add	r3, r2
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	440b      	add	r3, r1
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d24e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6939      	ldr	r1, [r7, #16]
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f002 f827 	bl	800f2ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d25e:	6938      	ldr	r0, [r7, #16]
 800d260:	f7f8 ff30 	bl	80060c4 <pbuf_free>
  }
  return ERR_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3718      	adds	r7, #24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	08012bb0 	.word	0x08012bb0
 800d274:	08012ca8 	.word	0x08012ca8
 800d278:	08012c28 	.word	0x08012c28
 800d27c:	2000a4b8 	.word	0x2000a4b8

0800d280 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d288:	2300      	movs	r3, #0
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	e01e      	b.n	800d2cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d28e:	4913      	ldr	r1, [pc, #76]	; (800d2dc <etharp_cleanup_netif+0x5c>)
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	4613      	mov	r3, r2
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	4413      	add	r3, r2
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	440b      	add	r3, r1
 800d29c:	3314      	adds	r3, #20
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00e      	beq.n	800d2c6 <etharp_cleanup_netif+0x46>
 800d2a8:	490c      	ldr	r1, [pc, #48]	; (800d2dc <etharp_cleanup_netif+0x5c>)
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	4413      	add	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3308      	adds	r3, #8
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d102      	bne.n	800d2c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f7ff fce5 	bl	800cc90 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b09      	cmp	r3, #9
 800d2d0:	dddd      	ble.n	800d28e <etharp_cleanup_netif+0xe>
    }
  }
}
 800d2d2:	bf00      	nop
 800d2d4:	bf00      	nop
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	2000a4b8 	.word	0x2000a4b8

0800d2e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d2e0:	b5b0      	push	{r4, r5, r7, lr}
 800d2e2:	b08a      	sub	sp, #40	; 0x28
 800d2e4:	af04      	add	r7, sp, #16
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d107      	bne.n	800d300 <etharp_input+0x20>
 800d2f0:	4b3d      	ldr	r3, [pc, #244]	; (800d3e8 <etharp_input+0x108>)
 800d2f2:	f240 228a 	movw	r2, #650	; 0x28a
 800d2f6:	493d      	ldr	r1, [pc, #244]	; (800d3ec <etharp_input+0x10c>)
 800d2f8:	483d      	ldr	r0, [pc, #244]	; (800d3f0 <etharp_input+0x110>)
 800d2fa:	f002 f883 	bl	800f404 <iprintf>
 800d2fe:	e06f      	b.n	800d3e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	881b      	ldrh	r3, [r3, #0]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d310:	d10c      	bne.n	800d32c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d316:	2b06      	cmp	r3, #6
 800d318:	d108      	bne.n	800d32c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d104      	bne.n	800d32c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	885b      	ldrh	r3, [r3, #2]
 800d326:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d328:	2b08      	cmp	r3, #8
 800d32a:	d003      	beq.n	800d334 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f7f8 fec9 	bl	80060c4 <pbuf_free>
    return;
 800d332:	e055      	b.n	800d3e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	330e      	adds	r3, #14
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	3318      	adds	r3, #24
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	3304      	adds	r3, #4
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <etharp_input+0x74>
    for_us = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	75fb      	strb	r3, [r7, #23]
 800d352:	e009      	b.n	800d368 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	3304      	adds	r3, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	bf0c      	ite	eq
 800d360:	2301      	moveq	r3, #1
 800d362:	2300      	movne	r3, #0
 800d364:	b2db      	uxtb	r3, r3
 800d366:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f103 0208 	add.w	r2, r3, #8
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <etharp_input+0x98>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <etharp_input+0x9a>
 800d378:	2302      	movs	r3, #2
 800d37a:	f107 010c 	add.w	r1, r7, #12
 800d37e:	6838      	ldr	r0, [r7, #0]
 800d380:	f7ff fed8 	bl	800d134 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	88db      	ldrh	r3, [r3, #6]
 800d388:	b29b      	uxth	r3, r3
 800d38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d38e:	d003      	beq.n	800d398 <etharp_input+0xb8>
 800d390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d394:	d01e      	beq.n	800d3d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d396:	e020      	b.n	800d3da <etharp_input+0xfa>
      if (for_us) {
 800d398:	7dfb      	ldrb	r3, [r7, #23]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d01c      	beq.n	800d3d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d3b8:	2102      	movs	r1, #2
 800d3ba:	9103      	str	r1, [sp, #12]
 800d3bc:	f107 010c 	add.w	r1, r7, #12
 800d3c0:	9102      	str	r1, [sp, #8]
 800d3c2:	9201      	str	r2, [sp, #4]
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	462b      	mov	r3, r5
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	6838      	ldr	r0, [r7, #0]
 800d3ce:	f000 faeb 	bl	800d9a8 <etharp_raw>
      break;
 800d3d2:	e001      	b.n	800d3d8 <etharp_input+0xf8>
      break;
 800d3d4:	bf00      	nop
 800d3d6:	e000      	b.n	800d3da <etharp_input+0xfa>
      break;
 800d3d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7f8 fe72 	bl	80060c4 <pbuf_free>
}
 800d3e0:	3718      	adds	r7, #24
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	08012bb0 	.word	0x08012bb0
 800d3ec:	08012d00 	.word	0x08012d00
 800d3f0:	08012c28 	.word	0x08012c28

0800d3f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	4613      	mov	r3, r2
 800d400:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d402:	79fa      	ldrb	r2, [r7, #7]
 800d404:	4944      	ldr	r1, [pc, #272]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d406:	4613      	mov	r3, r2
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	4413      	add	r3, r2
 800d40c:	00db      	lsls	r3, r3, #3
 800d40e:	440b      	add	r3, r1
 800d410:	3314      	adds	r3, #20
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d806      	bhi.n	800d426 <etharp_output_to_arp_index+0x32>
 800d418:	4b40      	ldr	r3, [pc, #256]	; (800d51c <etharp_output_to_arp_index+0x128>)
 800d41a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d41e:	4940      	ldr	r1, [pc, #256]	; (800d520 <etharp_output_to_arp_index+0x12c>)
 800d420:	4840      	ldr	r0, [pc, #256]	; (800d524 <etharp_output_to_arp_index+0x130>)
 800d422:	f001 ffef 	bl	800f404 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d426:	79fa      	ldrb	r2, [r7, #7]
 800d428:	493b      	ldr	r1, [pc, #236]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d42a:	4613      	mov	r3, r2
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	4413      	add	r3, r2
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	440b      	add	r3, r1
 800d434:	3314      	adds	r3, #20
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d153      	bne.n	800d4e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d43c:	79fa      	ldrb	r2, [r7, #7]
 800d43e:	4936      	ldr	r1, [pc, #216]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d440:	4613      	mov	r3, r2
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	4413      	add	r3, r2
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	440b      	add	r3, r1
 800d44a:	3312      	adds	r3, #18
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d452:	d919      	bls.n	800d488 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d454:	79fa      	ldrb	r2, [r7, #7]
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	4a2e      	ldr	r2, [pc, #184]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d460:	4413      	add	r3, r2
 800d462:	3304      	adds	r3, #4
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f000 fb4c 	bl	800db04 <etharp_request>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d138      	bne.n	800d4e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d472:	79fa      	ldrb	r2, [r7, #7]
 800d474:	4928      	ldr	r1, [pc, #160]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d476:	4613      	mov	r3, r2
 800d478:	005b      	lsls	r3, r3, #1
 800d47a:	4413      	add	r3, r2
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	440b      	add	r3, r1
 800d480:	3314      	adds	r3, #20
 800d482:	2203      	movs	r2, #3
 800d484:	701a      	strb	r2, [r3, #0]
 800d486:	e02d      	b.n	800d4e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d488:	79fa      	ldrb	r2, [r7, #7]
 800d48a:	4923      	ldr	r1, [pc, #140]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d48c:	4613      	mov	r3, r2
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	440b      	add	r3, r1
 800d496:	3312      	adds	r3, #18
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d49e:	d321      	bcc.n	800d4e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d4a0:	79fa      	ldrb	r2, [r7, #7]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	4a1b      	ldr	r2, [pc, #108]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d4ac:	4413      	add	r3, r2
 800d4ae:	1d19      	adds	r1, r3, #4
 800d4b0:	79fa      	ldrb	r2, [r7, #7]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	4413      	add	r3, r2
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	3308      	adds	r3, #8
 800d4bc:	4a16      	ldr	r2, [pc, #88]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d4be:	4413      	add	r3, r2
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 fafb 	bl	800dac0 <etharp_request_dst>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d109      	bne.n	800d4e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4d0:	79fa      	ldrb	r2, [r7, #7]
 800d4d2:	4911      	ldr	r1, [pc, #68]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	440b      	add	r3, r1
 800d4de:	3314      	adds	r3, #20
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d4ea:	79fa      	ldrb	r2, [r7, #7]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	4a08      	ldr	r2, [pc, #32]	; (800d518 <etharp_output_to_arp_index+0x124>)
 800d4f8:	4413      	add	r3, r2
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d500:	9200      	str	r2, [sp, #0]
 800d502:	460a      	mov	r2, r1
 800d504:	68b9      	ldr	r1, [r7, #8]
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f001 fed0 	bl	800f2ac <ethernet_output>
 800d50c:	4603      	mov	r3, r0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	2000a4b8 	.word	0x2000a4b8
 800d51c:	08012bb0 	.word	0x08012bb0
 800d520:	08012d20 	.word	0x08012d20
 800d524:	08012c28 	.word	0x08012c28

0800d528 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08a      	sub	sp, #40	; 0x28
 800d52c:	af02      	add	r7, sp, #8
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <etharp_output+0x24>
 800d53e:	4b73      	ldr	r3, [pc, #460]	; (800d70c <etharp_output+0x1e4>)
 800d540:	f240 321e 	movw	r2, #798	; 0x31e
 800d544:	4972      	ldr	r1, [pc, #456]	; (800d710 <etharp_output+0x1e8>)
 800d546:	4873      	ldr	r0, [pc, #460]	; (800d714 <etharp_output+0x1ec>)
 800d548:	f001 ff5c 	bl	800f404 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <etharp_output+0x38>
 800d552:	4b6e      	ldr	r3, [pc, #440]	; (800d70c <etharp_output+0x1e4>)
 800d554:	f240 321f 	movw	r2, #799	; 0x31f
 800d558:	496f      	ldr	r1, [pc, #444]	; (800d718 <etharp_output+0x1f0>)
 800d55a:	486e      	ldr	r0, [pc, #440]	; (800d714 <etharp_output+0x1ec>)
 800d55c:	f001 ff52 	bl	800f404 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d106      	bne.n	800d574 <etharp_output+0x4c>
 800d566:	4b69      	ldr	r3, [pc, #420]	; (800d70c <etharp_output+0x1e4>)
 800d568:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d56c:	496b      	ldr	r1, [pc, #428]	; (800d71c <etharp_output+0x1f4>)
 800d56e:	4869      	ldr	r0, [pc, #420]	; (800d714 <etharp_output+0x1ec>)
 800d570:	f001 ff48 	bl	800f404 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68f9      	ldr	r1, [r7, #12]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fef8 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d586:	4b66      	ldr	r3, [pc, #408]	; (800d720 <etharp_output+0x1f8>)
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	e0af      	b.n	800d6ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d594:	2be0      	cmp	r3, #224	; 0xe0
 800d596:	d118      	bne.n	800d5ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d598:	2301      	movs	r3, #1
 800d59a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d59c:	2300      	movs	r3, #0
 800d59e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d5a0:	235e      	movs	r3, #94	; 0x5e
 800d5a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3302      	adds	r3, #2
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3303      	adds	r3, #3
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d5c2:	f107 0310 	add.w	r3, r7, #16
 800d5c6:	61fb      	str	r3, [r7, #28]
 800d5c8:	e090      	b.n	800d6ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	405a      	eors	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3308      	adds	r3, #8
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4013      	ands	r3, r2
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d012      	beq.n	800d608 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d00b      	beq.n	800d608 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	330c      	adds	r3, #12
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	330c      	adds	r3, #12
 800d5fe:	61bb      	str	r3, [r7, #24]
 800d600:	e002      	b.n	800d608 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d602:	f06f 0303 	mvn.w	r3, #3
 800d606:	e07d      	b.n	800d704 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d608:	4b46      	ldr	r3, [pc, #280]	; (800d724 <etharp_output+0x1fc>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	4619      	mov	r1, r3
 800d60e:	4a46      	ldr	r2, [pc, #280]	; (800d728 <etharp_output+0x200>)
 800d610:	460b      	mov	r3, r1
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	440b      	add	r3, r1
 800d616:	00db      	lsls	r3, r3, #3
 800d618:	4413      	add	r3, r2
 800d61a:	3314      	adds	r3, #20
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d925      	bls.n	800d66e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d622:	4b40      	ldr	r3, [pc, #256]	; (800d724 <etharp_output+0x1fc>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	4619      	mov	r1, r3
 800d628:	4a3f      	ldr	r2, [pc, #252]	; (800d728 <etharp_output+0x200>)
 800d62a:	460b      	mov	r3, r1
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	440b      	add	r3, r1
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	4413      	add	r3, r2
 800d634:	3308      	adds	r3, #8
 800d636:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d117      	bne.n	800d66e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	4b38      	ldr	r3, [pc, #224]	; (800d724 <etharp_output+0x1fc>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	4618      	mov	r0, r3
 800d648:	4937      	ldr	r1, [pc, #220]	; (800d728 <etharp_output+0x200>)
 800d64a:	4603      	mov	r3, r0
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	4403      	add	r3, r0
 800d650:	00db      	lsls	r3, r3, #3
 800d652:	440b      	add	r3, r1
 800d654:	3304      	adds	r3, #4
 800d656:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d658:	429a      	cmp	r2, r3
 800d65a:	d108      	bne.n	800d66e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d65c:	4b31      	ldr	r3, [pc, #196]	; (800d724 <etharp_output+0x1fc>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	68b9      	ldr	r1, [r7, #8]
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7ff fec5 	bl	800d3f4 <etharp_output_to_arp_index>
 800d66a:	4603      	mov	r3, r0
 800d66c:	e04a      	b.n	800d704 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d66e:	2300      	movs	r3, #0
 800d670:	75fb      	strb	r3, [r7, #23]
 800d672:	e031      	b.n	800d6d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d674:	7dfa      	ldrb	r2, [r7, #23]
 800d676:	492c      	ldr	r1, [pc, #176]	; (800d728 <etharp_output+0x200>)
 800d678:	4613      	mov	r3, r2
 800d67a:	005b      	lsls	r3, r3, #1
 800d67c:	4413      	add	r3, r2
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	440b      	add	r3, r1
 800d682:	3314      	adds	r3, #20
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d923      	bls.n	800d6d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d68a:	7dfa      	ldrb	r2, [r7, #23]
 800d68c:	4926      	ldr	r1, [pc, #152]	; (800d728 <etharp_output+0x200>)
 800d68e:	4613      	mov	r3, r2
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	4413      	add	r3, r2
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	440b      	add	r3, r1
 800d698:	3308      	adds	r3, #8
 800d69a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d117      	bne.n	800d6d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	6819      	ldr	r1, [r3, #0]
 800d6a6:	7dfa      	ldrb	r2, [r7, #23]
 800d6a8:	481f      	ldr	r0, [pc, #124]	; (800d728 <etharp_output+0x200>)
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4413      	add	r3, r2
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	4403      	add	r3, r0
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d6b8:	4299      	cmp	r1, r3
 800d6ba:	d10a      	bne.n	800d6d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d6bc:	4a19      	ldr	r2, [pc, #100]	; (800d724 <etharp_output+0x1fc>)
 800d6be:	7dfb      	ldrb	r3, [r7, #23]
 800d6c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff fe93 	bl	800d3f4 <etharp_output_to_arp_index>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	e018      	b.n	800d704 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	75fb      	strb	r3, [r7, #23]
 800d6d8:	7dfb      	ldrb	r3, [r7, #23]
 800d6da:	2b09      	cmp	r3, #9
 800d6dc:	d9ca      	bls.n	800d674 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	69b9      	ldr	r1, [r7, #24]
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f000 f822 	bl	800d72c <etharp_query>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	e00b      	b.n	800d704 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d6f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f001 fdd5 	bl	800f2ac <ethernet_output>
 800d702:	4603      	mov	r3, r0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3720      	adds	r7, #32
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	08012bb0 	.word	0x08012bb0
 800d710:	08012d00 	.word	0x08012d00
 800d714:	08012c28 	.word	0x08012c28
 800d718:	08012d50 	.word	0x08012d50
 800d71c:	08012cf0 	.word	0x08012cf0
 800d720:	08013364 	.word	0x08013364
 800d724:	2000a5a8 	.word	0x2000a5a8
 800d728:	2000a4b8 	.word	0x2000a4b8

0800d72c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08c      	sub	sp, #48	; 0x30
 800d730:	af02      	add	r7, sp, #8
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	3326      	adds	r3, #38	; 0x26
 800d73c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d73e:	23ff      	movs	r3, #255	; 0xff
 800d740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68f9      	ldr	r1, [r7, #12]
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fe0e 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10c      	bne.n	800d774 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d762:	2be0      	cmp	r3, #224	; 0xe0
 800d764:	d006      	beq.n	800d774 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d003      	beq.n	800d774 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d102      	bne.n	800d77a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d774:	f06f 030f 	mvn.w	r3, #15
 800d778:	e101      	b.n	800d97e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	2101      	movs	r1, #1
 800d77e:	68b8      	ldr	r0, [r7, #8]
 800d780:	f7ff fb60 	bl	800ce44 <etharp_find_entry>
 800d784:	4603      	mov	r3, r0
 800d786:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	da02      	bge.n	800d796 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d790:	8a7b      	ldrh	r3, [r7, #18]
 800d792:	b25b      	sxtb	r3, r3
 800d794:	e0f3      	b.n	800d97e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d796:	8a7b      	ldrh	r3, [r7, #18]
 800d798:	2b7e      	cmp	r3, #126	; 0x7e
 800d79a:	d906      	bls.n	800d7aa <etharp_query+0x7e>
 800d79c:	4b7a      	ldr	r3, [pc, #488]	; (800d988 <etharp_query+0x25c>)
 800d79e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d7a2:	497a      	ldr	r1, [pc, #488]	; (800d98c <etharp_query+0x260>)
 800d7a4:	487a      	ldr	r0, [pc, #488]	; (800d990 <etharp_query+0x264>)
 800d7a6:	f001 fe2d 	bl	800f404 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d7aa:	8a7b      	ldrh	r3, [r7, #18]
 800d7ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d7ae:	7c7a      	ldrb	r2, [r7, #17]
 800d7b0:	4978      	ldr	r1, [pc, #480]	; (800d994 <etharp_query+0x268>)
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	005b      	lsls	r3, r3, #1
 800d7b6:	4413      	add	r3, r2
 800d7b8:	00db      	lsls	r3, r3, #3
 800d7ba:	440b      	add	r3, r1
 800d7bc:	3314      	adds	r3, #20
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d115      	bne.n	800d7f0 <etharp_query+0xc4>
    is_new_entry = 1;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d7c8:	7c7a      	ldrb	r2, [r7, #17]
 800d7ca:	4972      	ldr	r1, [pc, #456]	; (800d994 <etharp_query+0x268>)
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	4413      	add	r3, r2
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	440b      	add	r3, r1
 800d7d6:	3314      	adds	r3, #20
 800d7d8:	2201      	movs	r2, #1
 800d7da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d7dc:	7c7a      	ldrb	r2, [r7, #17]
 800d7de:	496d      	ldr	r1, [pc, #436]	; (800d994 <etharp_query+0x268>)
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	440b      	add	r3, r1
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d7f0:	7c7a      	ldrb	r2, [r7, #17]
 800d7f2:	4968      	ldr	r1, [pc, #416]	; (800d994 <etharp_query+0x268>)
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	3314      	adds	r3, #20
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d011      	beq.n	800d82a <etharp_query+0xfe>
 800d806:	7c7a      	ldrb	r2, [r7, #17]
 800d808:	4962      	ldr	r1, [pc, #392]	; (800d994 <etharp_query+0x268>)
 800d80a:	4613      	mov	r3, r2
 800d80c:	005b      	lsls	r3, r3, #1
 800d80e:	4413      	add	r3, r2
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	440b      	add	r3, r1
 800d814:	3314      	adds	r3, #20
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d806      	bhi.n	800d82a <etharp_query+0xfe>
 800d81c:	4b5a      	ldr	r3, [pc, #360]	; (800d988 <etharp_query+0x25c>)
 800d81e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d822:	495d      	ldr	r1, [pc, #372]	; (800d998 <etharp_query+0x26c>)
 800d824:	485a      	ldr	r0, [pc, #360]	; (800d990 <etharp_query+0x264>)
 800d826:	f001 fded 	bl	800f404 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <etharp_query+0x10a>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10c      	bne.n	800d850 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d836:	68b9      	ldr	r1, [r7, #8]
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 f963 	bl	800db04 <etharp_request>
 800d83e:	4603      	mov	r3, r0
 800d840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <etharp_query+0x124>
      return result;
 800d84a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d84e:	e096      	b.n	800d97e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d106      	bne.n	800d864 <etharp_query+0x138>
 800d856:	4b4c      	ldr	r3, [pc, #304]	; (800d988 <etharp_query+0x25c>)
 800d858:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d85c:	494f      	ldr	r1, [pc, #316]	; (800d99c <etharp_query+0x270>)
 800d85e:	484c      	ldr	r0, [pc, #304]	; (800d990 <etharp_query+0x264>)
 800d860:	f001 fdd0 	bl	800f404 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d864:	7c7a      	ldrb	r2, [r7, #17]
 800d866:	494b      	ldr	r1, [pc, #300]	; (800d994 <etharp_query+0x268>)
 800d868:	4613      	mov	r3, r2
 800d86a:	005b      	lsls	r3, r3, #1
 800d86c:	4413      	add	r3, r2
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	440b      	add	r3, r1
 800d872:	3314      	adds	r3, #20
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d917      	bls.n	800d8aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d87a:	4a49      	ldr	r2, [pc, #292]	; (800d9a0 <etharp_query+0x274>)
 800d87c:	7c7b      	ldrb	r3, [r7, #17]
 800d87e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d880:	7c7a      	ldrb	r2, [r7, #17]
 800d882:	4613      	mov	r3, r2
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	4413      	add	r3, r2
 800d888:	00db      	lsls	r3, r3, #3
 800d88a:	3308      	adds	r3, #8
 800d88c:	4a41      	ldr	r2, [pc, #260]	; (800d994 <etharp_query+0x268>)
 800d88e:	4413      	add	r3, r2
 800d890:	3304      	adds	r3, #4
 800d892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d896:	9200      	str	r2, [sp, #0]
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	6879      	ldr	r1, [r7, #4]
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f001 fd05 	bl	800f2ac <ethernet_output>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8a8:	e067      	b.n	800d97a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8aa:	7c7a      	ldrb	r2, [r7, #17]
 800d8ac:	4939      	ldr	r1, [pc, #228]	; (800d994 <etharp_query+0x268>)
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	005b      	lsls	r3, r3, #1
 800d8b2:	4413      	add	r3, r2
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	440b      	add	r3, r1
 800d8b8:	3314      	adds	r3, #20
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d15c      	bne.n	800d97a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8c8:	e01c      	b.n	800d904 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	895a      	ldrh	r2, [r3, #10]
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	891b      	ldrh	r3, [r3, #8]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d10a      	bne.n	800d8ec <etharp_query+0x1c0>
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d006      	beq.n	800d8ec <etharp_query+0x1c0>
 800d8de:	4b2a      	ldr	r3, [pc, #168]	; (800d988 <etharp_query+0x25c>)
 800d8e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d8e4:	492f      	ldr	r1, [pc, #188]	; (800d9a4 <etharp_query+0x278>)
 800d8e6:	482a      	ldr	r0, [pc, #168]	; (800d990 <etharp_query+0x264>)
 800d8e8:	f001 fd8c 	bl	800f404 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	7b1b      	ldrb	r3, [r3, #12]
 800d8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <etharp_query+0x1d2>
        copy_needed = 1;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	61bb      	str	r3, [r7, #24]
        break;
 800d8fc:	e005      	b.n	800d90a <etharp_query+0x1de>
      }
      p = p->next;
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1df      	bne.n	800d8ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d007      	beq.n	800d920 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d916:	200e      	movs	r0, #14
 800d918:	f7f8 fec2 	bl	80066a0 <pbuf_clone>
 800d91c:	61f8      	str	r0, [r7, #28]
 800d91e:	e004      	b.n	800d92a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d924:	69f8      	ldr	r0, [r7, #28]
 800d926:	f7f8 fc6d 	bl	8006204 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d021      	beq.n	800d974 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d930:	7c7a      	ldrb	r2, [r7, #17]
 800d932:	4918      	ldr	r1, [pc, #96]	; (800d994 <etharp_query+0x268>)
 800d934:	4613      	mov	r3, r2
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	4413      	add	r3, r2
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	440b      	add	r3, r1
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00a      	beq.n	800d95a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d944:	7c7a      	ldrb	r2, [r7, #17]
 800d946:	4913      	ldr	r1, [pc, #76]	; (800d994 <etharp_query+0x268>)
 800d948:	4613      	mov	r3, r2
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	4413      	add	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	440b      	add	r3, r1
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4618      	mov	r0, r3
 800d956:	f7f8 fbb5 	bl	80060c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d95a:	7c7a      	ldrb	r2, [r7, #17]
 800d95c:	490d      	ldr	r1, [pc, #52]	; (800d994 <etharp_query+0x268>)
 800d95e:	4613      	mov	r3, r2
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	4413      	add	r3, r2
 800d964:	00db      	lsls	r3, r3, #3
 800d966:	440b      	add	r3, r1
 800d968:	69fa      	ldr	r2, [r7, #28]
 800d96a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d972:	e002      	b.n	800d97a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d974:	23ff      	movs	r3, #255	; 0xff
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d97a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3728      	adds	r7, #40	; 0x28
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	08012bb0 	.word	0x08012bb0
 800d98c:	08012d5c 	.word	0x08012d5c
 800d990:	08012c28 	.word	0x08012c28
 800d994:	2000a4b8 	.word	0x2000a4b8
 800d998:	08012d6c 	.word	0x08012d6c
 800d99c:	08012d50 	.word	0x08012d50
 800d9a0:	2000a5a8 	.word	0x2000a5a8
 800d9a4:	08012d94 	.word	0x08012d94

0800d9a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	; 0x28
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <etharp_raw+0x26>
 800d9c0:	4b3a      	ldr	r3, [pc, #232]	; (800daac <etharp_raw+0x104>)
 800d9c2:	f240 4257 	movw	r2, #1111	; 0x457
 800d9c6:	493a      	ldr	r1, [pc, #232]	; (800dab0 <etharp_raw+0x108>)
 800d9c8:	483a      	ldr	r0, [pc, #232]	; (800dab4 <etharp_raw+0x10c>)
 800d9ca:	f001 fd1b 	bl	800f404 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9d2:	211c      	movs	r1, #28
 800d9d4:	200e      	movs	r0, #14
 800d9d6:	f7f8 f891 	bl	8005afc <pbuf_alloc>
 800d9da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d102      	bne.n	800d9e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e6:	e05d      	b.n	800daa4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	895b      	ldrh	r3, [r3, #10]
 800d9ec:	2b1b      	cmp	r3, #27
 800d9ee:	d806      	bhi.n	800d9fe <etharp_raw+0x56>
 800d9f0:	4b2e      	ldr	r3, [pc, #184]	; (800daac <etharp_raw+0x104>)
 800d9f2:	f240 4262 	movw	r2, #1122	; 0x462
 800d9f6:	4930      	ldr	r1, [pc, #192]	; (800dab8 <etharp_raw+0x110>)
 800d9f8:	482e      	ldr	r0, [pc, #184]	; (800dab4 <etharp_raw+0x10c>)
 800d9fa:	f001 fd03 	bl	800f404 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da06:	4618      	mov	r0, r3
 800da08:	f7f6 fffe 	bl	8004a08 <lwip_htons>
 800da0c:	4603      	mov	r3, r0
 800da0e:	461a      	mov	r2, r3
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da1a:	2b06      	cmp	r3, #6
 800da1c:	d006      	beq.n	800da2c <etharp_raw+0x84>
 800da1e:	4b23      	ldr	r3, [pc, #140]	; (800daac <etharp_raw+0x104>)
 800da20:	f240 4269 	movw	r2, #1129	; 0x469
 800da24:	4925      	ldr	r1, [pc, #148]	; (800dabc <etharp_raw+0x114>)
 800da26:	4823      	ldr	r0, [pc, #140]	; (800dab4 <etharp_raw+0x10c>)
 800da28:	f001 fcec 	bl	800f404 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	3308      	adds	r3, #8
 800da30:	2206      	movs	r2, #6
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	4618      	mov	r0, r3
 800da36:	f001 fcb5 	bl	800f3a4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	3312      	adds	r3, #18
 800da3e:	2206      	movs	r2, #6
 800da40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da42:	4618      	mov	r0, r3
 800da44:	f001 fcae 	bl	800f3a4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	330e      	adds	r3, #14
 800da4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4e:	6812      	ldr	r2, [r2, #0]
 800da50:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	3318      	adds	r3, #24
 800da56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da58:	6812      	ldr	r2, [r2, #0]
 800da5a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2200      	movs	r2, #0
 800da60:	701a      	strb	r2, [r3, #0]
 800da62:	2200      	movs	r2, #0
 800da64:	f042 0201 	orr.w	r2, r2, #1
 800da68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f042 0208 	orr.w	r2, r2, #8
 800da72:	709a      	strb	r2, [r3, #2]
 800da74:	2200      	movs	r2, #0
 800da76:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2206      	movs	r2, #6
 800da7c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	2204      	movs	r2, #4
 800da82:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da84:	f640 0306 	movw	r3, #2054	; 0x806
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	69b9      	ldr	r1, [r7, #24]
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f001 fc0b 	bl	800f2ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800da96:	69b8      	ldr	r0, [r7, #24]
 800da98:	f7f8 fb14 	bl	80060c4 <pbuf_free>
  p = NULL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800daa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3720      	adds	r7, #32
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	08012bb0 	.word	0x08012bb0
 800dab0:	08012d00 	.word	0x08012d00
 800dab4:	08012c28 	.word	0x08012c28
 800dab8:	08012db0 	.word	0x08012db0
 800dabc:	08012de4 	.word	0x08012de4

0800dac0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af04      	add	r7, sp, #16
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dadc:	2201      	movs	r2, #1
 800dade:	9203      	str	r2, [sp, #12]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	9202      	str	r2, [sp, #8]
 800dae4:	4a06      	ldr	r2, [pc, #24]	; (800db00 <etharp_request_dst+0x40>)
 800dae6:	9201      	str	r2, [sp, #4]
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	4603      	mov	r3, r0
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f7ff ff5a 	bl	800d9a8 <etharp_raw>
 800daf4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	0801336c 	.word	0x0801336c

0800db04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800db0e:	4a05      	ldr	r2, [pc, #20]	; (800db24 <etharp_request+0x20>)
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff ffd4 	bl	800dac0 <etharp_request_dst>
 800db18:	4603      	mov	r3, r0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	08013364 	.word	0x08013364

0800db28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08e      	sub	sp, #56	; 0x38
 800db2c:	af04      	add	r7, sp, #16
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db32:	4b79      	ldr	r3, [pc, #484]	; (800dd18 <icmp_input+0x1f0>)
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	f003 030f 	and.w	r3, r3, #15
 800db40:	b2db      	uxtb	r3, r3
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	b2db      	uxtb	r3, r3
 800db46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800db48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db4a:	2b13      	cmp	r3, #19
 800db4c:	f240 80cd 	bls.w	800dcea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	895b      	ldrh	r3, [r3, #10]
 800db54:	2b03      	cmp	r3, #3
 800db56:	f240 80ca 	bls.w	800dcee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f000 80b7 	beq.w	800dcdc <icmp_input+0x1b4>
 800db6e:	2b08      	cmp	r3, #8
 800db70:	f040 80b7 	bne.w	800dce2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800db74:	4b69      	ldr	r3, [pc, #420]	; (800dd1c <icmp_input+0x1f4>)
 800db76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db78:	4b67      	ldr	r3, [pc, #412]	; (800dd18 <icmp_input+0x1f0>)
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db80:	2be0      	cmp	r3, #224	; 0xe0
 800db82:	f000 80bb 	beq.w	800dcfc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800db86:	4b64      	ldr	r3, [pc, #400]	; (800dd18 <icmp_input+0x1f0>)
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	4a63      	ldr	r2, [pc, #396]	; (800dd18 <icmp_input+0x1f0>)
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	4611      	mov	r1, r2
 800db90:	4618      	mov	r0, r3
 800db92:	f000 fbed 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f040 80b1 	bne.w	800dd00 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	891b      	ldrh	r3, [r3, #8]
 800dba2:	2b07      	cmp	r3, #7
 800dba4:	f240 80a5 	bls.w	800dcf2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbaa:	330e      	adds	r3, #14
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7f8 f9f2 	bl	8005f98 <pbuf_add_header>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d04b      	beq.n	800dc52 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	891a      	ldrh	r2, [r3, #8]
 800dbbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbc0:	4413      	add	r3, r2
 800dbc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	891b      	ldrh	r3, [r3, #8]
 800dbc8:	8b7a      	ldrh	r2, [r7, #26]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	f0c0 809a 	bcc.w	800dd04 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dbd0:	8b7b      	ldrh	r3, [r7, #26]
 800dbd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	200e      	movs	r0, #14
 800dbda:	f7f7 ff8f 	bl	8005afc <pbuf_alloc>
 800dbde:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 8090 	beq.w	800dd08 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	895b      	ldrh	r3, [r3, #10]
 800dbec:	461a      	mov	r2, r3
 800dbee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d203      	bcs.n	800dbfe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dbf6:	6978      	ldr	r0, [r7, #20]
 800dbf8:	f7f8 fa64 	bl	80060c4 <pbuf_free>
          goto icmperr;
 800dbfc:	e085      	b.n	800dd0a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc06:	4618      	mov	r0, r3
 800dc08:	f001 fbcc 	bl	800f3a4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dc0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6978      	ldr	r0, [r7, #20]
 800dc12:	f7f8 f9d1 	bl	8005fb8 <pbuf_remove_header>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d009      	beq.n	800dc30 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc1c:	4b40      	ldr	r3, [pc, #256]	; (800dd20 <icmp_input+0x1f8>)
 800dc1e:	22b6      	movs	r2, #182	; 0xb6
 800dc20:	4940      	ldr	r1, [pc, #256]	; (800dd24 <icmp_input+0x1fc>)
 800dc22:	4841      	ldr	r0, [pc, #260]	; (800dd28 <icmp_input+0x200>)
 800dc24:	f001 fbee 	bl	800f404 <iprintf>
          pbuf_free(r);
 800dc28:	6978      	ldr	r0, [r7, #20]
 800dc2a:	f7f8 fa4b 	bl	80060c4 <pbuf_free>
          goto icmperr;
 800dc2e:	e06c      	b.n	800dd0a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dc30:	6879      	ldr	r1, [r7, #4]
 800dc32:	6978      	ldr	r0, [r7, #20]
 800dc34:	f7f8 fb5e 	bl	80062f4 <pbuf_copy>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dc3e:	6978      	ldr	r0, [r7, #20]
 800dc40:	f7f8 fa40 	bl	80060c4 <pbuf_free>
          goto icmperr;
 800dc44:	e061      	b.n	800dd0a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7f8 fa3c 	bl	80060c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	607b      	str	r3, [r7, #4]
 800dc50:	e00f      	b.n	800dc72 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc54:	330e      	adds	r3, #14
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7f8 f9ad 	bl	8005fb8 <pbuf_remove_header>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d006      	beq.n	800dc72 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc64:	4b2e      	ldr	r3, [pc, #184]	; (800dd20 <icmp_input+0x1f8>)
 800dc66:	22c7      	movs	r2, #199	; 0xc7
 800dc68:	4930      	ldr	r1, [pc, #192]	; (800dd2c <icmp_input+0x204>)
 800dc6a:	482f      	ldr	r0, [pc, #188]	; (800dd28 <icmp_input+0x200>)
 800dc6c:	f001 fbca 	bl	800f404 <iprintf>
          goto icmperr;
 800dc70:	e04b      	b.n	800dd0a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dc78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7f8 f98b 	bl	8005f98 <pbuf_add_header>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d12b      	bne.n	800dce0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dc96:	4b20      	ldr	r3, [pc, #128]	; (800dd18 <icmp_input+0x1f0>)
 800dc98:	691a      	ldr	r2, [r3, #16]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	2200      	movs	r2, #0
 800dca2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	2200      	movs	r2, #0
 800dca8:	709a      	strb	r2, [r3, #2]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	22ff      	movs	r2, #255	; 0xff
 800dcb2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	729a      	strb	r2, [r3, #10]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	9302      	str	r3, [sp, #8]
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	23ff      	movs	r3, #255	; 0xff
 800dccc:	2200      	movs	r2, #0
 800dcce:	69f9      	ldr	r1, [r7, #28]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fa75 	bl	800e1c0 <ip4_output_if>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dcda:	e001      	b.n	800dce0 <icmp_input+0x1b8>
      break;
 800dcdc:	bf00      	nop
 800dcde:	e000      	b.n	800dce2 <icmp_input+0x1ba>
      break;
 800dce0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7f8 f9ee 	bl	80060c4 <pbuf_free>
  return;
 800dce8:	e013      	b.n	800dd12 <icmp_input+0x1ea>
    goto lenerr;
 800dcea:	bf00      	nop
 800dcec:	e002      	b.n	800dcf4 <icmp_input+0x1cc>
    goto lenerr;
 800dcee:	bf00      	nop
 800dcf0:	e000      	b.n	800dcf4 <icmp_input+0x1cc>
        goto lenerr;
 800dcf2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7f8 f9e5 	bl	80060c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dcfa:	e00a      	b.n	800dd12 <icmp_input+0x1ea>
        goto icmperr;
 800dcfc:	bf00      	nop
 800dcfe:	e004      	b.n	800dd0a <icmp_input+0x1e2>
        goto icmperr;
 800dd00:	bf00      	nop
 800dd02:	e002      	b.n	800dd0a <icmp_input+0x1e2>
          goto icmperr;
 800dd04:	bf00      	nop
 800dd06:	e000      	b.n	800dd0a <icmp_input+0x1e2>
          goto icmperr;
 800dd08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7f8 f9da 	bl	80060c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd12:	3728      	adds	r7, #40	; 0x28
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20004d28 	.word	0x20004d28
 800dd1c:	20004d3c 	.word	0x20004d3c
 800dd20:	08012e28 	.word	0x08012e28
 800dd24:	08012e60 	.word	0x08012e60
 800dd28:	08012e98 	.word	0x08012e98
 800dd2c:	08012ec0 	.word	0x08012ec0

0800dd30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	2103      	movs	r1, #3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f814 	bl	800dd70 <icmp_send_response>
}
 800dd48:	bf00      	nop
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	210b      	movs	r1, #11
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f804 	bl	800dd70 <icmp_send_response>
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08c      	sub	sp, #48	; 0x30
 800dd74:	af04      	add	r7, sp, #16
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dd80:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd84:	2124      	movs	r1, #36	; 0x24
 800dd86:	2022      	movs	r0, #34	; 0x22
 800dd88:	f7f7 feb8 	bl	8005afc <pbuf_alloc>
 800dd8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d04c      	beq.n	800de2e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	895b      	ldrh	r3, [r3, #10]
 800dd98:	2b23      	cmp	r3, #35	; 0x23
 800dd9a:	d806      	bhi.n	800ddaa <icmp_send_response+0x3a>
 800dd9c:	4b26      	ldr	r3, [pc, #152]	; (800de38 <icmp_send_response+0xc8>)
 800dd9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dda2:	4926      	ldr	r1, [pc, #152]	; (800de3c <icmp_send_response+0xcc>)
 800dda4:	4826      	ldr	r0, [pc, #152]	; (800de40 <icmp_send_response+0xd0>)
 800dda6:	f001 fb2d 	bl	800f404 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	78fa      	ldrb	r2, [r7, #3]
 800ddba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	78ba      	ldrb	r2, [r7, #2]
 800ddc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	711a      	strb	r2, [r3, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	719a      	strb	r2, [r3, #6]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f103 0008 	add.w	r0, r3, #8
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	221c      	movs	r2, #28
 800dde4:	4619      	mov	r1, r3
 800dde6:	f001 fadd 	bl	800f3a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ddf0:	f107 030c 	add.w	r3, r7, #12
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 f825 	bl	800de44 <ip4_route>
 800ddfa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d011      	beq.n	800de26 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2200      	movs	r2, #0
 800de06:	709a      	strb	r2, [r3, #2]
 800de08:	2200      	movs	r2, #0
 800de0a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de0c:	f107 020c 	add.w	r2, r7, #12
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	9302      	str	r3, [sp, #8]
 800de14:	2301      	movs	r3, #1
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	2300      	movs	r3, #0
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	23ff      	movs	r3, #255	; 0xff
 800de1e:	2100      	movs	r1, #0
 800de20:	69f8      	ldr	r0, [r7, #28]
 800de22:	f000 f9cd 	bl	800e1c0 <ip4_output_if>
  }
  pbuf_free(q);
 800de26:	69f8      	ldr	r0, [r7, #28]
 800de28:	f7f8 f94c 	bl	80060c4 <pbuf_free>
 800de2c:	e000      	b.n	800de30 <icmp_send_response+0xc0>
    return;
 800de2e:	bf00      	nop
}
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	08012e28 	.word	0x08012e28
 800de3c:	08012ef4 	.word	0x08012ef4
 800de40:	08012e98 	.word	0x08012e98

0800de44 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de4c:	4b33      	ldr	r3, [pc, #204]	; (800df1c <ip4_route+0xd8>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	e036      	b.n	800dec2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d02b      	beq.n	800debc <ip4_route+0x78>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de6a:	089b      	lsrs	r3, r3, #2
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	b2db      	uxtb	r3, r3
 800de72:	2b00      	cmp	r3, #0
 800de74:	d022      	beq.n	800debc <ip4_route+0x78>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3304      	adds	r3, #4
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01d      	beq.n	800debc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	3304      	adds	r3, #4
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	405a      	eors	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3308      	adds	r3, #8
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4013      	ands	r3, r2
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	e038      	b.n	800df0e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dea2:	f003 0302 	and.w	r3, r3, #2
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d108      	bne.n	800debc <ip4_route+0x78>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	330c      	adds	r3, #12
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d101      	bne.n	800debc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	e028      	b.n	800df0e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	60fb      	str	r3, [r7, #12]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1c5      	bne.n	800de54 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dec8:	4b15      	ldr	r3, [pc, #84]	; (800df20 <ip4_route+0xdc>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d01a      	beq.n	800df06 <ip4_route+0xc2>
 800ded0:	4b13      	ldr	r3, [pc, #76]	; (800df20 <ip4_route+0xdc>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d012      	beq.n	800df06 <ip4_route+0xc2>
 800dee0:	4b0f      	ldr	r3, [pc, #60]	; (800df20 <ip4_route+0xdc>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dee8:	f003 0304 	and.w	r3, r3, #4
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00a      	beq.n	800df06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800def0:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <ip4_route+0xdc>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3304      	adds	r3, #4
 800def6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800def8:	2b00      	cmp	r3, #0
 800defa:	d004      	beq.n	800df06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	2b7f      	cmp	r3, #127	; 0x7f
 800df04:	d101      	bne.n	800df0a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df06:	2300      	movs	r3, #0
 800df08:	e001      	b.n	800df0e <ip4_route+0xca>
  }

  return netif_default;
 800df0a:	4b05      	ldr	r3, [pc, #20]	; (800df20 <ip4_route+0xdc>)
 800df0c:	681b      	ldr	r3, [r3, #0]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	2000a44c 	.word	0x2000a44c
 800df20:	2000a450 	.word	0x2000a450

0800df24 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	b2db      	uxtb	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d016      	beq.n	800df6a <ip4_input_accept+0x46>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3304      	adds	r3, #4
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d011      	beq.n	800df6a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <ip4_input_accept+0x50>)
 800df48:	695a      	ldr	r2, [r3, #20]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3304      	adds	r3, #4
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	429a      	cmp	r2, r3
 800df52:	d008      	beq.n	800df66 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df54:	4b07      	ldr	r3, [pc, #28]	; (800df74 <ip4_input_accept+0x50>)
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 fa08 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800df60:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df66:	2301      	movs	r3, #1
 800df68:	e000      	b.n	800df6c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	20004d28 	.word	0x20004d28

0800df78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	091b      	lsrs	r3, r3, #4
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b04      	cmp	r3, #4
 800df92:	d004      	beq.n	800df9e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7f8 f895 	bl	80060c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	e107      	b.n	800e1ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 030f 	and.w	r3, r3, #15
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	885b      	ldrh	r3, [r3, #2]
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7f6 fd27 	bl	8004a08 <lwip_htons>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	891b      	ldrh	r3, [r3, #8]
 800dfc2:	89ba      	ldrh	r2, [r7, #12]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d204      	bcs.n	800dfd2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dfc8:	89bb      	ldrh	r3, [r7, #12]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7f7 fef3 	bl	8005db8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	895b      	ldrh	r3, [r3, #10]
 800dfd6:	89fa      	ldrh	r2, [r7, #14]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d807      	bhi.n	800dfec <ip4_input+0x74>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	891b      	ldrh	r3, [r3, #8]
 800dfe0:	89ba      	ldrh	r2, [r7, #12]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d802      	bhi.n	800dfec <ip4_input+0x74>
 800dfe6:	89fb      	ldrh	r3, [r7, #14]
 800dfe8:	2b13      	cmp	r3, #19
 800dfea:	d804      	bhi.n	800dff6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7f8 f869 	bl	80060c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e0db      	b.n	800e1ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	691b      	ldr	r3, [r3, #16]
 800dffa:	4a6f      	ldr	r2, [pc, #444]	; (800e1b8 <ip4_input+0x240>)
 800dffc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	4a6d      	ldr	r2, [pc, #436]	; (800e1b8 <ip4_input+0x240>)
 800e004:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e006:	4b6c      	ldr	r3, [pc, #432]	; (800e1b8 <ip4_input+0x240>)
 800e008:	695b      	ldr	r3, [r3, #20]
 800e00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e00e:	2be0      	cmp	r3, #224	; 0xe0
 800e010:	d112      	bne.n	800e038 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d007      	beq.n	800e032 <ip4_input+0xba>
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	3304      	adds	r3, #4
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <ip4_input+0xba>
      netif = inp;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	613b      	str	r3, [r7, #16]
 800e030:	e02a      	b.n	800e088 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e032:	2300      	movs	r3, #0
 800e034:	613b      	str	r3, [r7, #16]
 800e036:	e027      	b.n	800e088 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e038:	6838      	ldr	r0, [r7, #0]
 800e03a:	f7ff ff73 	bl	800df24 <ip4_input_accept>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <ip4_input+0xd2>
      netif = inp;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	613b      	str	r3, [r7, #16]
 800e048:	e01e      	b.n	800e088 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e04a:	2300      	movs	r3, #0
 800e04c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e04e:	4b5a      	ldr	r3, [pc, #360]	; (800e1b8 <ip4_input+0x240>)
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b7f      	cmp	r3, #127	; 0x7f
 800e056:	d017      	beq.n	800e088 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e058:	4b58      	ldr	r3, [pc, #352]	; (800e1bc <ip4_input+0x244>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	613b      	str	r3, [r7, #16]
 800e05e:	e00e      	b.n	800e07e <ip4_input+0x106>
          if (netif == inp) {
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d006      	beq.n	800e076 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e068:	6938      	ldr	r0, [r7, #16]
 800e06a:	f7ff ff5b 	bl	800df24 <ip4_input_accept>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d108      	bne.n	800e086 <ip4_input+0x10e>
 800e074:	e000      	b.n	800e078 <ip4_input+0x100>
            continue;
 800e076:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	613b      	str	r3, [r7, #16]
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1ed      	bne.n	800e060 <ip4_input+0xe8>
 800e084:	e000      	b.n	800e088 <ip4_input+0x110>
            break;
 800e086:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e088:	4b4b      	ldr	r3, [pc, #300]	; (800e1b8 <ip4_input+0x240>)
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 f96e 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d105      	bne.n	800e0a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e09a:	4b47      	ldr	r3, [pc, #284]	; (800e1b8 <ip4_input+0x240>)
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0a2:	2be0      	cmp	r3, #224	; 0xe0
 800e0a4:	d104      	bne.n	800e0b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7f8 f80c 	bl	80060c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e07e      	b.n	800e1ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d104      	bne.n	800e0c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7f8 f804 	bl	80060c4 <pbuf_free>
    return ERR_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e076      	b.n	800e1ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	88db      	ldrh	r3, [r3, #6]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00b      	beq.n	800e0ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fd22 	bl	800eb1c <ip4_reass>
 800e0d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <ip4_input+0x16c>
      return ERR_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e064      	b.n	800e1ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e0ea:	4a33      	ldr	r2, [pc, #204]	; (800e1b8 <ip4_input+0x240>)
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e0f0:	4a31      	ldr	r2, [pc, #196]	; (800e1b8 <ip4_input+0x240>)
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e0f6:	4a30      	ldr	r2, [pc, #192]	; (800e1b8 <ip4_input+0x240>)
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	f003 030f 	and.w	r3, r3, #15
 800e104:	b2db      	uxtb	r3, r3
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	4b2a      	ldr	r3, [pc, #168]	; (800e1b8 <ip4_input+0x240>)
 800e10e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e110:	89fb      	ldrh	r3, [r7, #14]
 800e112:	4619      	mov	r1, r3
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7f7 ff4f 	bl	8005fb8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	7a5b      	ldrb	r3, [r3, #9]
 800e11e:	2b11      	cmp	r3, #17
 800e120:	d006      	beq.n	800e130 <ip4_input+0x1b8>
 800e122:	2b11      	cmp	r3, #17
 800e124:	dc13      	bgt.n	800e14e <ip4_input+0x1d6>
 800e126:	2b01      	cmp	r3, #1
 800e128:	d00c      	beq.n	800e144 <ip4_input+0x1cc>
 800e12a:	2b06      	cmp	r3, #6
 800e12c:	d005      	beq.n	800e13a <ip4_input+0x1c2>
 800e12e:	e00e      	b.n	800e14e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7fe fc68 	bl	800ca08 <udp_input>
        break;
 800e138:	e026      	b.n	800e188 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7fa f889 	bl	8008254 <tcp_input>
        break;
 800e142:	e021      	b.n	800e188 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7ff fcee 	bl	800db28 <icmp_input>
        break;
 800e14c:	e01c      	b.n	800e188 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e14e:	4b1a      	ldr	r3, [pc, #104]	; (800e1b8 <ip4_input+0x240>)
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	6939      	ldr	r1, [r7, #16]
 800e154:	4618      	mov	r0, r3
 800e156:	f000 f90b 	bl	800e370 <ip4_addr_isbroadcast_u32>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10f      	bne.n	800e180 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e160:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <ip4_input+0x240>)
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e168:	2be0      	cmp	r3, #224	; 0xe0
 800e16a:	d009      	beq.n	800e180 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e16c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7f7 ff93 	bl	800609e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e178:	2102      	movs	r1, #2
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f7ff fdd8 	bl	800dd30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7f7 ff9f 	bl	80060c4 <pbuf_free>
        break;
 800e186:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e188:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <ip4_input+0x240>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e18e:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <ip4_input+0x240>)
 800e190:	2200      	movs	r2, #0
 800e192:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e194:	4b08      	ldr	r3, [pc, #32]	; (800e1b8 <ip4_input+0x240>)
 800e196:	2200      	movs	r2, #0
 800e198:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e19a:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <ip4_input+0x240>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1a0:	4b05      	ldr	r3, [pc, #20]	; (800e1b8 <ip4_input+0x240>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1a6:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <ip4_input+0x240>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3718      	adds	r7, #24
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	20004d28 	.word	0x20004d28
 800e1bc:	2000a44c 	.word	0x2000a44c

0800e1c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08a      	sub	sp, #40	; 0x28
 800e1c4:	af04      	add	r7, sp, #16
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
 800e1cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d009      	beq.n	800e1ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d003      	beq.n	800e1e6 <ip4_output_if+0x26>
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d102      	bne.n	800e1ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e1ec:	78fa      	ldrb	r2, [r7, #3]
 800e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f0:	9302      	str	r3, [sp, #8]
 800e1f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1f6:	9301      	str	r3, [sp, #4]
 800e1f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	4613      	mov	r3, r2
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6979      	ldr	r1, [r7, #20]
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f000 f805 	bl	800e214 <ip4_output_if_src>
 800e20a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b088      	sub	sp, #32
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	7b9b      	ldrb	r3, [r3, #14]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d006      	beq.n	800e238 <ip4_output_if_src+0x24>
 800e22a:	4b4b      	ldr	r3, [pc, #300]	; (800e358 <ip4_output_if_src+0x144>)
 800e22c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e230:	494a      	ldr	r1, [pc, #296]	; (800e35c <ip4_output_if_src+0x148>)
 800e232:	484b      	ldr	r0, [pc, #300]	; (800e360 <ip4_output_if_src+0x14c>)
 800e234:	f001 f8e6 	bl	800f404 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d060      	beq.n	800e300 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e23e:	2314      	movs	r3, #20
 800e240:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e242:	2114      	movs	r1, #20
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7f7 fea7 	bl	8005f98 <pbuf_add_header>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e250:	f06f 0301 	mvn.w	r3, #1
 800e254:	e07c      	b.n	800e350 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	895b      	ldrh	r3, [r3, #10]
 800e260:	2b13      	cmp	r3, #19
 800e262:	d806      	bhi.n	800e272 <ip4_output_if_src+0x5e>
 800e264:	4b3c      	ldr	r3, [pc, #240]	; (800e358 <ip4_output_if_src+0x144>)
 800e266:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e26a:	493e      	ldr	r1, [pc, #248]	; (800e364 <ip4_output_if_src+0x150>)
 800e26c:	483c      	ldr	r0, [pc, #240]	; (800e360 <ip4_output_if_src+0x14c>)
 800e26e:	f001 f8c9 	bl	800f404 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	78fa      	ldrb	r2, [r7, #3]
 800e276:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e27e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e288:	8b7b      	ldrh	r3, [r7, #26]
 800e28a:	089b      	lsrs	r3, r3, #2
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e294:	b2da      	uxtb	r2, r3
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e2a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	891b      	ldrh	r3, [r3, #8]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7f6 fbae 	bl	8004a08 <lwip_htons>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	719a      	strb	r2, [r3, #6]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2be:	4b2a      	ldr	r3, [pc, #168]	; (800e368 <ip4_output_if_src+0x154>)
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7f6 fba0 	bl	8004a08 <lwip_htons>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2d0:	4b25      	ldr	r3, [pc, #148]	; (800e368 <ip4_output_if_src+0x154>)
 800e2d2:	881b      	ldrh	r3, [r3, #0]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	4b23      	ldr	r3, [pc, #140]	; (800e368 <ip4_output_if_src+0x154>)
 800e2da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d104      	bne.n	800e2ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e2e2:	4b22      	ldr	r3, [pc, #136]	; (800e36c <ip4_output_if_src+0x158>)
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	60da      	str	r2, [r3, #12]
 800e2ea:	e003      	b.n	800e2f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	729a      	strb	r2, [r3, #10]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	72da      	strb	r2, [r3, #11]
 800e2fe:	e00f      	b.n	800e320 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	895b      	ldrh	r3, [r3, #10]
 800e304:	2b13      	cmp	r3, #19
 800e306:	d802      	bhi.n	800e30e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e308:	f06f 0301 	mvn.w	r3, #1
 800e30c:	e020      	b.n	800e350 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e31a:	f107 0314 	add.w	r3, r7, #20
 800e31e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00c      	beq.n	800e342 <ip4_output_if_src+0x12e>
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	891a      	ldrh	r2, [r3, #8]
 800e32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e330:	429a      	cmp	r2, r3
 800e332:	d906      	bls.n	800e342 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f000 fde3 	bl	800ef04 <ip4_frag>
 800e33e:	4603      	mov	r3, r0
 800e340:	e006      	b.n	800e350 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	68f9      	ldr	r1, [r7, #12]
 800e34a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e34c:	4798      	blx	r3
 800e34e:	4603      	mov	r3, r0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	08012f20 	.word	0x08012f20
 800e35c:	08012f54 	.word	0x08012f54
 800e360:	08012f60 	.word	0x08012f60
 800e364:	08012f88 	.word	0x08012f88
 800e368:	2000a5aa 	.word	0x2000a5aa
 800e36c:	08013360 	.word	0x08013360

0800e370 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e384:	d002      	beq.n	800e38c <ip4_addr_isbroadcast_u32+0x1c>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e38c:	2301      	movs	r3, #1
 800e38e:	e02a      	b.n	800e3e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e396:	f003 0302 	and.w	r3, r3, #2
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d101      	bne.n	800e3a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e021      	b.n	800e3e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d101      	bne.n	800e3b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e019      	b.n	800e3e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	405a      	eors	r2, r3
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10d      	bne.n	800e3e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	43da      	mvns	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d101      	bne.n	800e3e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e000      	b.n	800e3e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e3e4:	2300      	movs	r3, #0
  }
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e3fc:	2210      	movs	r2, #16
 800e3fe:	4904      	ldr	r1, [pc, #16]	; (800e410 <ip4addr_ntoa+0x1c>)
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 f807 	bl	800e414 <ip4addr_ntoa_r>
 800e406:	4603      	mov	r3, r0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	2000a5ac 	.word	0x2000a5ac

0800e414 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e414:	b480      	push	{r7}
 800e416:	b08d      	sub	sp, #52	; 0x34
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e42e:	f107 0318 	add.w	r3, r7, #24
 800e432:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e434:	2300      	movs	r3, #0
 800e436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e43a:	e058      	b.n	800e4ee <ip4addr_ntoa_r+0xda>
    i = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e444:	781a      	ldrb	r2, [r3, #0]
 800e446:	4b32      	ldr	r3, [pc, #200]	; (800e510 <ip4addr_ntoa_r+0xfc>)
 800e448:	fba3 1302 	umull	r1, r3, r3, r2
 800e44c:	08d9      	lsrs	r1, r3, #3
 800e44e:	460b      	mov	r3, r1
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	440b      	add	r3, r1
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	4a2c      	ldr	r2, [pc, #176]	; (800e510 <ip4addr_ntoa_r+0xfc>)
 800e460:	fba2 2303 	umull	r2, r3, r2, r3
 800e464:	08db      	lsrs	r3, r3, #3
 800e466:	b2da      	uxtb	r2, r3
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e46c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e476:	4619      	mov	r1, r3
 800e478:	7ffb      	ldrb	r3, [r7, #31]
 800e47a:	3330      	adds	r3, #48	; 0x30
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800e482:	443b      	add	r3, r7
 800e484:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1d8      	bne.n	800e442 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e490:	e011      	b.n	800e4b6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	623a      	str	r2, [r7, #32]
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	dc01      	bgt.n	800e4a2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e030      	b.n	800e504 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e4a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a8:	1c59      	adds	r1, r3, #1
 800e4aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e4ac:	3230      	adds	r2, #48	; 0x30
 800e4ae:	443a      	add	r2, r7
 800e4b0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e4b4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e4b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4ba:	1e5a      	subs	r2, r3, #1
 800e4bc:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e6      	bne.n	800e492 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	1c5a      	adds	r2, r3, #1
 800e4c8:	623a      	str	r2, [r7, #32]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	dc01      	bgt.n	800e4d4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e017      	b.n	800e504 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4da:	222e      	movs	r2, #46	; 0x2e
 800e4dc:	701a      	strb	r2, [r3, #0]
    ap++;
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4f2:	2b03      	cmp	r3, #3
 800e4f4:	d9a2      	bls.n	800e43c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	2200      	movs	r2, #0
 800e500:	701a      	strb	r2, [r3, #0]
  return buf;
 800e502:	68bb      	ldr	r3, [r7, #8]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3734      	adds	r7, #52	; 0x34
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	cccccccd 	.word	0xcccccccd

0800e514 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e51a:	2300      	movs	r3, #0
 800e51c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e51e:	4b12      	ldr	r3, [pc, #72]	; (800e568 <ip_reass_tmr+0x54>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e524:	e018      	b.n	800e558 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	7fdb      	ldrb	r3, [r3, #31]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00b      	beq.n	800e546 <ip_reass_tmr+0x32>
      r->timer--;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	7fdb      	ldrb	r3, [r3, #31]
 800e532:	3b01      	subs	r3, #1
 800e534:	b2da      	uxtb	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e008      	b.n	800e558 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e550:	68b9      	ldr	r1, [r7, #8]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f80a 	bl	800e56c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1e3      	bne.n	800e526 <ip_reass_tmr+0x12>
    }
  }
}
 800e55e:	bf00      	nop
 800e560:	bf00      	nop
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	2000a5bc 	.word	0x2000a5bc

0800e56c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b088      	sub	sp, #32
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d105      	bne.n	800e58e <ip_reass_free_complete_datagram+0x22>
 800e582:	4b45      	ldr	r3, [pc, #276]	; (800e698 <ip_reass_free_complete_datagram+0x12c>)
 800e584:	22ab      	movs	r2, #171	; 0xab
 800e586:	4945      	ldr	r1, [pc, #276]	; (800e69c <ip_reass_free_complete_datagram+0x130>)
 800e588:	4845      	ldr	r0, [pc, #276]	; (800e6a0 <ip_reass_free_complete_datagram+0x134>)
 800e58a:	f000 ff3b 	bl	800f404 <iprintf>
  if (prev != NULL) {
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00a      	beq.n	800e5aa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d005      	beq.n	800e5aa <ip_reass_free_complete_datagram+0x3e>
 800e59e:	4b3e      	ldr	r3, [pc, #248]	; (800e698 <ip_reass_free_complete_datagram+0x12c>)
 800e5a0:	22ad      	movs	r2, #173	; 0xad
 800e5a2:	4940      	ldr	r1, [pc, #256]	; (800e6a4 <ip_reass_free_complete_datagram+0x138>)
 800e5a4:	483e      	ldr	r0, [pc, #248]	; (800e6a0 <ip_reass_free_complete_datagram+0x134>)
 800e5a6:	f000 ff2d 	bl	800f404 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	889b      	ldrh	r3, [r3, #4]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d12a      	bne.n	800e612 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	6858      	ldr	r0, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	2214      	movs	r2, #20
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	f000 fee5 	bl	800f3a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e5da:	2101      	movs	r1, #1
 800e5dc:	69b8      	ldr	r0, [r7, #24]
 800e5de:	f7ff fbb7 	bl	800dd50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e5e2:	69b8      	ldr	r0, [r7, #24]
 800e5e4:	f7f7 fdf6 	bl	80061d4 <pbuf_clen>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e5ec:	8bfa      	ldrh	r2, [r7, #30]
 800e5ee:	8a7b      	ldrh	r3, [r7, #18]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f6:	db05      	blt.n	800e604 <ip_reass_free_complete_datagram+0x98>
 800e5f8:	4b27      	ldr	r3, [pc, #156]	; (800e698 <ip_reass_free_complete_datagram+0x12c>)
 800e5fa:	22bc      	movs	r2, #188	; 0xbc
 800e5fc:	492a      	ldr	r1, [pc, #168]	; (800e6a8 <ip_reass_free_complete_datagram+0x13c>)
 800e5fe:	4828      	ldr	r0, [pc, #160]	; (800e6a0 <ip_reass_free_complete_datagram+0x134>)
 800e600:	f000 ff00 	bl	800f404 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e604:	8bfa      	ldrh	r2, [r7, #30]
 800e606:	8a7b      	ldrh	r3, [r7, #18]
 800e608:	4413      	add	r3, r2
 800e60a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e60c:	69b8      	ldr	r0, [r7, #24]
 800e60e:	f7f7 fd59 	bl	80060c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e618:	e01f      	b.n	800e65a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f7f7 fdd2 	bl	80061d4 <pbuf_clen>
 800e630:	4603      	mov	r3, r0
 800e632:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e634:	8bfa      	ldrh	r2, [r7, #30]
 800e636:	8a7b      	ldrh	r3, [r7, #18]
 800e638:	4413      	add	r3, r2
 800e63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e63e:	db05      	blt.n	800e64c <ip_reass_free_complete_datagram+0xe0>
 800e640:	4b15      	ldr	r3, [pc, #84]	; (800e698 <ip_reass_free_complete_datagram+0x12c>)
 800e642:	22cc      	movs	r2, #204	; 0xcc
 800e644:	4918      	ldr	r1, [pc, #96]	; (800e6a8 <ip_reass_free_complete_datagram+0x13c>)
 800e646:	4816      	ldr	r0, [pc, #88]	; (800e6a0 <ip_reass_free_complete_datagram+0x134>)
 800e648:	f000 fedc 	bl	800f404 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e64c:	8bfa      	ldrh	r2, [r7, #30]
 800e64e:	8a7b      	ldrh	r3, [r7, #18]
 800e650:	4413      	add	r3, r2
 800e652:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f7f7 fd35 	bl	80060c4 <pbuf_free>
  while (p != NULL) {
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1dc      	bne.n	800e61a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 f8c2 	bl	800e7ec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e668:	4b10      	ldr	r3, [pc, #64]	; (800e6ac <ip_reass_free_complete_datagram+0x140>)
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	8bfa      	ldrh	r2, [r7, #30]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d905      	bls.n	800e67e <ip_reass_free_complete_datagram+0x112>
 800e672:	4b09      	ldr	r3, [pc, #36]	; (800e698 <ip_reass_free_complete_datagram+0x12c>)
 800e674:	22d2      	movs	r2, #210	; 0xd2
 800e676:	490e      	ldr	r1, [pc, #56]	; (800e6b0 <ip_reass_free_complete_datagram+0x144>)
 800e678:	4809      	ldr	r0, [pc, #36]	; (800e6a0 <ip_reass_free_complete_datagram+0x134>)
 800e67a:	f000 fec3 	bl	800f404 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e67e:	4b0b      	ldr	r3, [pc, #44]	; (800e6ac <ip_reass_free_complete_datagram+0x140>)
 800e680:	881a      	ldrh	r2, [r3, #0]
 800e682:	8bfb      	ldrh	r3, [r7, #30]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	b29a      	uxth	r2, r3
 800e688:	4b08      	ldr	r3, [pc, #32]	; (800e6ac <ip_reass_free_complete_datagram+0x140>)
 800e68a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e68c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3720      	adds	r7, #32
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	08012fb8 	.word	0x08012fb8
 800e69c:	08012ff4 	.word	0x08012ff4
 800e6a0:	08013000 	.word	0x08013000
 800e6a4:	08013028 	.word	0x08013028
 800e6a8:	0801303c 	.word	0x0801303c
 800e6ac:	2000a5c0 	.word	0x2000a5c0
 800e6b0:	0801305c 	.word	0x0801305c

0800e6b4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e6d2:	4b28      	ldr	r3, [pc, #160]	; (800e774 <ip_reass_remove_oldest_datagram+0xc0>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e6d8:	e030      	b.n	800e73c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6dc:	695a      	ldr	r2, [r3, #20]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d10c      	bne.n	800e700 <ip_reass_remove_oldest_datagram+0x4c>
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e8:	699a      	ldr	r2, [r3, #24]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d106      	bne.n	800e700 <ip_reass_remove_oldest_datagram+0x4c>
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	899a      	ldrh	r2, [r3, #12]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	889b      	ldrh	r3, [r3, #4]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d014      	beq.n	800e72a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	3301      	adds	r3, #1
 800e704:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d104      	bne.n	800e716 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	61bb      	str	r3, [r7, #24]
 800e714:	e009      	b.n	800e72a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	7fda      	ldrb	r2, [r3, #31]
 800e71a:	6a3b      	ldr	r3, [r7, #32]
 800e71c:	7fdb      	ldrb	r3, [r3, #31]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d803      	bhi.n	800e72a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1cb      	bne.n	800e6da <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d008      	beq.n	800e75a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e748:	69b9      	ldr	r1, [r7, #24]
 800e74a:	6a38      	ldr	r0, [r7, #32]
 800e74c:	f7ff ff0e 	bl	800e56c <ip_reass_free_complete_datagram>
 800e750:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e752:	697a      	ldr	r2, [r7, #20]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	429a      	cmp	r2, r3
 800e760:	da02      	bge.n	800e768 <ip_reass_remove_oldest_datagram+0xb4>
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	2b01      	cmp	r3, #1
 800e766:	dcac      	bgt.n	800e6c2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e768:	697b      	ldr	r3, [r7, #20]
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3728      	adds	r7, #40	; 0x28
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	2000a5bc 	.word	0x2000a5bc

0800e778 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e782:	2004      	movs	r0, #4
 800e784:	f7f6 fdb8 	bl	80052f8 <memp_malloc>
 800e788:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d110      	bne.n	800e7b2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff ff8e 	bl	800e6b4 <ip_reass_remove_oldest_datagram>
 800e798:	4602      	mov	r2, r0
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	dc03      	bgt.n	800e7a8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e7a0:	2004      	movs	r0, #4
 800e7a2:	f7f6 fda9 	bl	80052f8 <memp_malloc>
 800e7a6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e016      	b.n	800e7e0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e7b2:	2220      	movs	r2, #32
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f000 fe1c 	bl	800f3f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	220f      	movs	r2, #15
 800e7c0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e7c2:	4b09      	ldr	r3, [pc, #36]	; (800e7e8 <ip_reass_enqueue_new_datagram+0x70>)
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e7ca:	4a07      	ldr	r2, [pc, #28]	; (800e7e8 <ip_reass_enqueue_new_datagram+0x70>)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	2214      	movs	r2, #20
 800e7d6:	6879      	ldr	r1, [r7, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fde3 	bl	800f3a4 <memcpy>
  return ipr;
 800e7de:	68fb      	ldr	r3, [r7, #12]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	2000a5bc 	.word	0x2000a5bc

0800e7ec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e7f6:	4b10      	ldr	r3, [pc, #64]	; (800e838 <ip_reass_dequeue_datagram+0x4c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d104      	bne.n	800e80a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a0c      	ldr	r2, [pc, #48]	; (800e838 <ip_reass_dequeue_datagram+0x4c>)
 800e806:	6013      	str	r3, [r2, #0]
 800e808:	e00d      	b.n	800e826 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d106      	bne.n	800e81e <ip_reass_dequeue_datagram+0x32>
 800e810:	4b0a      	ldr	r3, [pc, #40]	; (800e83c <ip_reass_dequeue_datagram+0x50>)
 800e812:	f240 1245 	movw	r2, #325	; 0x145
 800e816:	490a      	ldr	r1, [pc, #40]	; (800e840 <ip_reass_dequeue_datagram+0x54>)
 800e818:	480a      	ldr	r0, [pc, #40]	; (800e844 <ip_reass_dequeue_datagram+0x58>)
 800e81a:	f000 fdf3 	bl	800f404 <iprintf>
    prev->next = ipr->next;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e826:	6879      	ldr	r1, [r7, #4]
 800e828:	2004      	movs	r0, #4
 800e82a:	f7f6 fdd5 	bl	80053d8 <memp_free>
}
 800e82e:	bf00      	nop
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	2000a5bc 	.word	0x2000a5bc
 800e83c:	08012fb8 	.word	0x08012fb8
 800e840:	08013080 	.word	0x08013080
 800e844:	08013000 	.word	0x08013000

0800e848 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08c      	sub	sp, #48	; 0x30
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e854:	2300      	movs	r3, #0
 800e856:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e858:	2301      	movs	r3, #1
 800e85a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	885b      	ldrh	r3, [r3, #2]
 800e866:	b29b      	uxth	r3, r3
 800e868:	4618      	mov	r0, r3
 800e86a:	f7f6 f8cd 	bl	8004a08 <lwip_htons>
 800e86e:	4603      	mov	r3, r0
 800e870:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	f003 030f 	and.w	r3, r3, #15
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e880:	7e7b      	ldrb	r3, [r7, #25]
 800e882:	b29b      	uxth	r3, r3
 800e884:	8b7a      	ldrh	r2, [r7, #26]
 800e886:	429a      	cmp	r2, r3
 800e888:	d202      	bcs.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e88a:	f04f 33ff 	mov.w	r3, #4294967295
 800e88e:	e135      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e890:	7e7b      	ldrb	r3, [r7, #25]
 800e892:	b29b      	uxth	r3, r3
 800e894:	8b7a      	ldrh	r2, [r7, #26]
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	88db      	ldrh	r3, [r3, #6]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7f6 f8b1 	bl	8004a08 <lwip_htons>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	701a      	strb	r2, [r3, #0]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	705a      	strb	r2, [r3, #1]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	709a      	strb	r2, [r3, #2]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8cc:	8afa      	ldrh	r2, [r7, #22]
 800e8ce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e8d0:	8afa      	ldrh	r2, [r7, #22]
 800e8d2:	8b7b      	ldrh	r3, [r7, #26]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8de:	88db      	ldrh	r3, [r3, #6]
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	8afa      	ldrh	r2, [r7, #22]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d902      	bls.n	800e8ee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ec:	e106      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800e8f4:	e068      	b.n	800e9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	889b      	ldrh	r3, [r3, #4]
 800e900:	b29a      	uxth	r2, r3
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	889b      	ldrh	r3, [r3, #4]
 800e906:	b29b      	uxth	r3, r3
 800e908:	429a      	cmp	r2, r3
 800e90a:	d235      	bcs.n	800e978 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e910:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	2b00      	cmp	r3, #0
 800e916:	d020      	beq.n	800e95a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91a:	889b      	ldrh	r3, [r3, #4]
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e920:	88db      	ldrh	r3, [r3, #6]
 800e922:	b29b      	uxth	r3, r3
 800e924:	429a      	cmp	r2, r3
 800e926:	d307      	bcc.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	88db      	ldrh	r3, [r3, #6]
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	889b      	ldrh	r3, [r3, #4]
 800e932:	b29b      	uxth	r3, r3
 800e934:	429a      	cmp	r2, r3
 800e936:	d902      	bls.n	800e93e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e938:	f04f 33ff 	mov.w	r3, #4294967295
 800e93c:	e0de      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	88db      	ldrh	r3, [r3, #6]
 800e948:	b29a      	uxth	r2, r3
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	889b      	ldrh	r3, [r3, #4]
 800e94e:	b29b      	uxth	r3, r3
 800e950:	429a      	cmp	r2, r3
 800e952:	d03d      	beq.n	800e9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e954:	2300      	movs	r3, #0
 800e956:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e958:	e03a      	b.n	800e9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	88db      	ldrh	r3, [r3, #6]
 800e95e:	b29a      	uxth	r2, r3
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	889b      	ldrh	r3, [r3, #4]
 800e964:	b29b      	uxth	r3, r3
 800e966:	429a      	cmp	r2, r3
 800e968:	d902      	bls.n	800e970 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e96a:	f04f 33ff 	mov.w	r3, #4294967295
 800e96e:	e0c5      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	605a      	str	r2, [r3, #4]
      break;
 800e976:	e02b      	b.n	800e9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	889b      	ldrh	r3, [r3, #4]
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	889b      	ldrh	r3, [r3, #4]
 800e982:	b29b      	uxth	r3, r3
 800e984:	429a      	cmp	r2, r3
 800e986:	d102      	bne.n	800e98e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e988:	f04f 33ff 	mov.w	r3, #4294967295
 800e98c:	e0b6      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e990:	889b      	ldrh	r3, [r3, #4]
 800e992:	b29a      	uxth	r2, r3
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	88db      	ldrh	r3, [r3, #6]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d202      	bcs.n	800e9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e99e:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a2:	e0ab      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d009      	beq.n	800e9be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	88db      	ldrh	r3, [r3, #6]
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	889b      	ldrh	r3, [r3, #4]
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d001      	beq.n	800e9be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d193      	bne.n	800e8f6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e9ce:	e000      	b.n	800e9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e9d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d12d      	bne.n	800ea34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d01c      	beq.n	800ea18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	88db      	ldrh	r3, [r3, #6]
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e6:	889b      	ldrh	r3, [r3, #4]
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d906      	bls.n	800e9fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e9ee:	4b45      	ldr	r3, [pc, #276]	; (800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9f0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e9f4:	4944      	ldr	r1, [pc, #272]	; (800eb08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e9f6:	4845      	ldr	r0, [pc, #276]	; (800eb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9f8:	f000 fd04 	bl	800f404 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	88db      	ldrh	r3, [r3, #6]
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	889b      	ldrh	r3, [r3, #4]
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d010      	beq.n	800ea34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	623b      	str	r3, [r7, #32]
 800ea16:	e00d      	b.n	800ea34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d006      	beq.n	800ea2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ea20:	4b38      	ldr	r3, [pc, #224]	; (800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea22:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ea26:	493a      	ldr	r1, [pc, #232]	; (800eb10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ea28:	4838      	ldr	r0, [pc, #224]	; (800eb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea2a:	f000 fceb 	bl	800f404 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d105      	bne.n	800ea46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	7f9b      	ldrb	r3, [r3, #30]
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d059      	beq.n	800eafa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d04f      	beq.n	800eaec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d006      	beq.n	800ea62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	889b      	ldrh	r3, [r3, #4]
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	623b      	str	r3, [r7, #32]
 800ea66:	e041      	b.n	800eaec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ea68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ea6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea72:	e012      	b.n	800ea9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7c:	88db      	ldrh	r3, [r3, #6]
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	889b      	ldrh	r3, [r3, #4]
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d002      	beq.n	800ea90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	623b      	str	r3, [r7, #32]
            break;
 800ea8e:	e007      	b.n	800eaa0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ea94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e9      	bne.n	800ea74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800eaa0:	6a3b      	ldr	r3, [r7, #32]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d022      	beq.n	800eaec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d106      	bne.n	800eabc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800eaae:	4b15      	ldr	r3, [pc, #84]	; (800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eab0:	f240 12df 	movw	r2, #479	; 0x1df
 800eab4:	4917      	ldr	r1, [pc, #92]	; (800eb14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eab6:	4815      	ldr	r0, [pc, #84]	; (800eb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eab8:	f000 fca4 	bl	800f404 <iprintf>
          LWIP_ASSERT("sanity check",
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d106      	bne.n	800ead6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800eac8:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eaca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eace:	4911      	ldr	r1, [pc, #68]	; (800eb14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ead0:	480e      	ldr	r0, [pc, #56]	; (800eb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ead2:	f000 fc97 	bl	800f404 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d006      	beq.n	800eaec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800eade:	4b09      	ldr	r3, [pc, #36]	; (800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eae0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800eae4:	490c      	ldr	r1, [pc, #48]	; (800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800eae6:	4809      	ldr	r0, [pc, #36]	; (800eb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eae8:	f000 fc8c 	bl	800f404 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800eaec:	6a3b      	ldr	r3, [r7, #32]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	bf14      	ite	ne
 800eaf2:	2301      	movne	r3, #1
 800eaf4:	2300      	moveq	r3, #0
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	e000      	b.n	800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3730      	adds	r7, #48	; 0x30
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08012fb8 	.word	0x08012fb8
 800eb08:	0801309c 	.word	0x0801309c
 800eb0c:	08013000 	.word	0x08013000
 800eb10:	080130bc 	.word	0x080130bc
 800eb14:	080130f4 	.word	0x080130f4
 800eb18:	08013104 	.word	0x08013104

0800eb1c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08e      	sub	sp, #56	; 0x38
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f003 030f 	and.w	r3, r3, #15
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b14      	cmp	r3, #20
 800eb3a:	f040 8171 	bne.w	800ee20 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	88db      	ldrh	r3, [r3, #6]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7f5 ff5f 	bl	8004a08 <lwip_htons>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb58:	885b      	ldrh	r3, [r3, #2]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7f5 ff53 	bl	8004a08 <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	f003 030f 	and.w	r3, r3, #15
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800eb76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	f0c0 8150 	bcc.w	800ee24 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eb84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7f7 fb1f 	bl	80061d4 <pbuf_clen>
 800eb96:	4603      	mov	r3, r0
 800eb98:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eb9a:	4b8c      	ldr	r3, [pc, #560]	; (800edcc <ip4_reass+0x2b0>)
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	461a      	mov	r2, r3
 800eba0:	8c3b      	ldrh	r3, [r7, #32]
 800eba2:	4413      	add	r3, r2
 800eba4:	2b0a      	cmp	r3, #10
 800eba6:	dd10      	ble.n	800ebca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eba8:	8c3b      	ldrh	r3, [r7, #32]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebae:	f7ff fd81 	bl	800e6b4 <ip_reass_remove_oldest_datagram>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 8137 	beq.w	800ee28 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ebba:	4b84      	ldr	r3, [pc, #528]	; (800edcc <ip4_reass+0x2b0>)
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	8c3b      	ldrh	r3, [r7, #32]
 800ebc2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ebc4:	2b0a      	cmp	r3, #10
 800ebc6:	f300 812f 	bgt.w	800ee28 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ebca:	4b81      	ldr	r3, [pc, #516]	; (800edd0 <ip4_reass+0x2b4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	633b      	str	r3, [r7, #48]	; 0x30
 800ebd0:	e015      	b.n	800ebfe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	695a      	ldr	r2, [r3, #20]
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d10c      	bne.n	800ebf8 <ip4_reass+0xdc>
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	699a      	ldr	r2, [r3, #24]
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	691b      	ldr	r3, [r3, #16]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d106      	bne.n	800ebf8 <ip4_reass+0xdc>
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	899a      	ldrh	r2, [r3, #12]
 800ebee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf0:	889b      	ldrh	r3, [r3, #4]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d006      	beq.n	800ec06 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	633b      	str	r3, [r7, #48]	; 0x30
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1e6      	bne.n	800ebd2 <ip4_reass+0xb6>
 800ec04:	e000      	b.n	800ec08 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ec06:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d109      	bne.n	800ec22 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ec0e:	8c3b      	ldrh	r3, [r7, #32]
 800ec10:	4619      	mov	r1, r3
 800ec12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec14:	f7ff fdb0 	bl	800e778 <ip_reass_enqueue_new_datagram>
 800ec18:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d11c      	bne.n	800ec5a <ip4_reass+0x13e>
      goto nullreturn;
 800ec20:	e105      	b.n	800ee2e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec24:	88db      	ldrh	r3, [r3, #6]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7f5 feed 	bl	8004a08 <lwip_htons>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d110      	bne.n	800ec5a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	89db      	ldrh	r3, [r3, #14]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f5 fee3 	bl	8004a08 <lwip_htons>
 800ec42:	4603      	mov	r3, r0
 800ec44:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d006      	beq.n	800ec5a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	3308      	adds	r3, #8
 800ec50:	2214      	movs	r2, #20
 800ec52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec54:	4618      	mov	r0, r3
 800ec56:	f000 fba5 	bl	800f3a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5c:	88db      	ldrh	r3, [r3, #6]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	f003 0320 	and.w	r3, r3, #32
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	bf0c      	ite	eq
 800ec68:	2301      	moveq	r3, #1
 800ec6a:	2300      	movne	r3, #0
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00e      	beq.n	800ec94 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec7a:	4413      	add	r3, r2
 800ec7c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ec7e:	8b7a      	ldrh	r2, [r7, #26]
 800ec80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec82:	429a      	cmp	r2, r3
 800ec84:	f0c0 80a0 	bcc.w	800edc8 <ip4_reass+0x2ac>
 800ec88:	8b7b      	ldrh	r3, [r7, #26]
 800ec8a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	f200 809a 	bhi.w	800edc8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec9a:	f7ff fdd5 	bl	800e848 <ip_reass_chain_frag_into_datagram_and_validate>
 800ec9e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	f000 809b 	beq.w	800ede0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ecaa:	4b48      	ldr	r3, [pc, #288]	; (800edcc <ip4_reass+0x2b0>)
 800ecac:	881a      	ldrh	r2, [r3, #0]
 800ecae:	8c3b      	ldrh	r3, [r7, #32]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	4b45      	ldr	r3, [pc, #276]	; (800edcc <ip4_reass+0x2b0>)
 800ecb6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00d      	beq.n	800ecda <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ecbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecc2:	4413      	add	r3, r2
 800ecc4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	8a7a      	ldrh	r2, [r7, #18]
 800ecca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	7f9b      	ldrb	r3, [r3, #30]
 800ecd0:	f043 0301 	orr.w	r3, r3, #1
 800ecd4:	b2da      	uxtb	r2, r3
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d171      	bne.n	800edc4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece2:	8b9b      	ldrh	r3, [r3, #28]
 800ece4:	3314      	adds	r3, #20
 800ece6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ece8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ecf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	2214      	movs	r2, #20
 800ed00:	4619      	mov	r1, r3
 800ed02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed04:	f000 fb4e 	bl	800f3a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ed08:	8a3b      	ldrh	r3, [r7, #16]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f5 fe7c 	bl	8004a08 <lwip_htons>
 800ed10:	4603      	mov	r3, r0
 800ed12:	461a      	mov	r2, r3
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed16:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	719a      	strb	r2, [r3, #6]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ed22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed24:	2200      	movs	r2, #0
 800ed26:	729a      	strb	r2, [r3, #10]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ed32:	e00d      	b.n	800ed50 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ed34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ed3a:	2114      	movs	r1, #20
 800ed3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed3e:	f7f7 f93b 	bl	8005fb8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ed42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7f7 fa7f 	bl	8006248 <pbuf_cat>
      r = iprh->next_pbuf;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ed50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1ee      	bne.n	800ed34 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ed56:	4b1e      	ldr	r3, [pc, #120]	; (800edd0 <ip4_reass+0x2b4>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d102      	bne.n	800ed66 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ed60:	2300      	movs	r3, #0
 800ed62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed64:	e010      	b.n	800ed88 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed66:	4b1a      	ldr	r3, [pc, #104]	; (800edd0 <ip4_reass+0x2b4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed6c:	e007      	b.n	800ed7e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ed6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d006      	beq.n	800ed86 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1f4      	bne.n	800ed6e <ip4_reass+0x252>
 800ed84:	e000      	b.n	800ed88 <ip4_reass+0x26c>
          break;
 800ed86:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ed88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed8c:	f7ff fd2e 	bl	800e7ec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7f7 fa1f 	bl	80061d4 <pbuf_clen>
 800ed96:	4603      	mov	r3, r0
 800ed98:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ed9a:	4b0c      	ldr	r3, [pc, #48]	; (800edcc <ip4_reass+0x2b0>)
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	8c3a      	ldrh	r2, [r7, #32]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d906      	bls.n	800edb2 <ip4_reass+0x296>
 800eda4:	4b0b      	ldr	r3, [pc, #44]	; (800edd4 <ip4_reass+0x2b8>)
 800eda6:	f240 229b 	movw	r2, #667	; 0x29b
 800edaa:	490b      	ldr	r1, [pc, #44]	; (800edd8 <ip4_reass+0x2bc>)
 800edac:	480b      	ldr	r0, [pc, #44]	; (800eddc <ip4_reass+0x2c0>)
 800edae:	f000 fb29 	bl	800f404 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800edb2:	4b06      	ldr	r3, [pc, #24]	; (800edcc <ip4_reass+0x2b0>)
 800edb4:	881a      	ldrh	r2, [r3, #0]
 800edb6:	8c3b      	ldrh	r3, [r7, #32]
 800edb8:	1ad3      	subs	r3, r2, r3
 800edba:	b29a      	uxth	r2, r3
 800edbc:	4b03      	ldr	r3, [pc, #12]	; (800edcc <ip4_reass+0x2b0>)
 800edbe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	e038      	b.n	800ee36 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	e036      	b.n	800ee36 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800edc8:	bf00      	nop
 800edca:	e00a      	b.n	800ede2 <ip4_reass+0x2c6>
 800edcc:	2000a5c0 	.word	0x2000a5c0
 800edd0:	2000a5bc 	.word	0x2000a5bc
 800edd4:	08012fb8 	.word	0x08012fb8
 800edd8:	08013128 	.word	0x08013128
 800eddc:	08013000 	.word	0x08013000
    goto nullreturn_ipr;
 800ede0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d106      	bne.n	800edf6 <ip4_reass+0x2da>
 800ede8:	4b15      	ldr	r3, [pc, #84]	; (800ee40 <ip4_reass+0x324>)
 800edea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800edee:	4915      	ldr	r1, [pc, #84]	; (800ee44 <ip4_reass+0x328>)
 800edf0:	4815      	ldr	r0, [pc, #84]	; (800ee48 <ip4_reass+0x32c>)
 800edf2:	f000 fb07 	bl	800f404 <iprintf>
  if (ipr->p == NULL) {
 800edf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d116      	bne.n	800ee2c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800edfe:	4b13      	ldr	r3, [pc, #76]	; (800ee4c <ip4_reass+0x330>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d006      	beq.n	800ee16 <ip4_reass+0x2fa>
 800ee08:	4b0d      	ldr	r3, [pc, #52]	; (800ee40 <ip4_reass+0x324>)
 800ee0a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ee0e:	4910      	ldr	r1, [pc, #64]	; (800ee50 <ip4_reass+0x334>)
 800ee10:	480d      	ldr	r0, [pc, #52]	; (800ee48 <ip4_reass+0x32c>)
 800ee12:	f000 faf7 	bl	800f404 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ee16:	2100      	movs	r1, #0
 800ee18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee1a:	f7ff fce7 	bl	800e7ec <ip_reass_dequeue_datagram>
 800ee1e:	e006      	b.n	800ee2e <ip4_reass+0x312>
    goto nullreturn;
 800ee20:	bf00      	nop
 800ee22:	e004      	b.n	800ee2e <ip4_reass+0x312>
    goto nullreturn;
 800ee24:	bf00      	nop
 800ee26:	e002      	b.n	800ee2e <ip4_reass+0x312>
      goto nullreturn;
 800ee28:	bf00      	nop
 800ee2a:	e000      	b.n	800ee2e <ip4_reass+0x312>
  }

nullreturn:
 800ee2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7f7 f948 	bl	80060c4 <pbuf_free>
  return NULL;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3738      	adds	r7, #56	; 0x38
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	08012fb8 	.word	0x08012fb8
 800ee44:	08013144 	.word	0x08013144
 800ee48:	08013000 	.word	0x08013000
 800ee4c:	2000a5bc 	.word	0x2000a5bc
 800ee50:	08013150 	.word	0x08013150

0800ee54 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ee58:	2005      	movs	r0, #5
 800ee5a:	f7f6 fa4d 	bl	80052f8 <memp_malloc>
 800ee5e:	4603      	mov	r3, r0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d106      	bne.n	800ee80 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ee72:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ee74:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ee78:	4906      	ldr	r1, [pc, #24]	; (800ee94 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ee7a:	4807      	ldr	r0, [pc, #28]	; (800ee98 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ee7c:	f000 fac2 	bl	800f404 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	2005      	movs	r0, #5
 800ee84:	f7f6 faa8 	bl	80053d8 <memp_free>
}
 800ee88:	bf00      	nop
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	08012fb8 	.word	0x08012fb8
 800ee94:	08013170 	.word	0x08013170
 800ee98:	08013000 	.word	0x08013000

0800ee9c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <ipfrag_free_pbuf_custom+0x20>
 800eeae:	4b11      	ldr	r3, [pc, #68]	; (800eef4 <ipfrag_free_pbuf_custom+0x58>)
 800eeb0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800eeb4:	4910      	ldr	r1, [pc, #64]	; (800eef8 <ipfrag_free_pbuf_custom+0x5c>)
 800eeb6:	4811      	ldr	r0, [pc, #68]	; (800eefc <ipfrag_free_pbuf_custom+0x60>)
 800eeb8:	f000 faa4 	bl	800f404 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d006      	beq.n	800eed2 <ipfrag_free_pbuf_custom+0x36>
 800eec4:	4b0b      	ldr	r3, [pc, #44]	; (800eef4 <ipfrag_free_pbuf_custom+0x58>)
 800eec6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800eeca:	490d      	ldr	r1, [pc, #52]	; (800ef00 <ipfrag_free_pbuf_custom+0x64>)
 800eecc:	480b      	ldr	r0, [pc, #44]	; (800eefc <ipfrag_free_pbuf_custom+0x60>)
 800eece:	f000 fa99 	bl	800f404 <iprintf>
  if (pcr->original != NULL) {
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	695b      	ldr	r3, [r3, #20]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d004      	beq.n	800eee4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	695b      	ldr	r3, [r3, #20]
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f7 f8f0 	bl	80060c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f7ff ffbd 	bl	800ee64 <ip_frag_free_pbuf_custom_ref>
}
 800eeea:	bf00      	nop
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	08012fb8 	.word	0x08012fb8
 800eef8:	0801317c 	.word	0x0801317c
 800eefc:	08013000 	.word	0x08013000
 800ef00:	08013188 	.word	0x08013188

0800ef04 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b094      	sub	sp, #80	; 0x50
 800ef08:	af02      	add	r7, sp, #8
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ef10:	2300      	movs	r3, #0
 800ef12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef1a:	3b14      	subs	r3, #20
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da00      	bge.n	800ef22 <ip4_frag+0x1e>
 800ef20:	3307      	adds	r3, #7
 800ef22:	10db      	asrs	r3, r3, #3
 800ef24:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ef26:	2314      	movs	r3, #20
 800ef28:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ef30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef32:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	f003 030f 	and.w	r3, r3, #15
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b14      	cmp	r3, #20
 800ef44:	d002      	beq.n	800ef4c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ef46:	f06f 0305 	mvn.w	r3, #5
 800ef4a:	e110      	b.n	800f16e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	895b      	ldrh	r3, [r3, #10]
 800ef50:	2b13      	cmp	r3, #19
 800ef52:	d809      	bhi.n	800ef68 <ip4_frag+0x64>
 800ef54:	4b88      	ldr	r3, [pc, #544]	; (800f178 <ip4_frag+0x274>)
 800ef56:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ef5a:	4988      	ldr	r1, [pc, #544]	; (800f17c <ip4_frag+0x278>)
 800ef5c:	4888      	ldr	r0, [pc, #544]	; (800f180 <ip4_frag+0x27c>)
 800ef5e:	f000 fa51 	bl	800f404 <iprintf>
 800ef62:	f06f 0305 	mvn.w	r3, #5
 800ef66:	e102      	b.n	800f16e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	88db      	ldrh	r3, [r3, #6]
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f5 fd4a 	bl	8004a08 <lwip_htons>
 800ef74:	4603      	mov	r3, r0
 800ef76:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ef78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ef82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef88:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	891b      	ldrh	r3, [r3, #8]
 800ef8e:	3b14      	subs	r3, #20
 800ef90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ef94:	e0e1      	b.n	800f15a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ef96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef98:	00db      	lsls	r3, r3, #3
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efa0:	4293      	cmp	r3, r2
 800efa2:	bf28      	it	cs
 800efa4:	4613      	movcs	r3, r2
 800efa6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800efa8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efac:	2114      	movs	r1, #20
 800efae:	200e      	movs	r0, #14
 800efb0:	f7f6 fda4 	bl	8005afc <pbuf_alloc>
 800efb4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 80d5 	beq.w	800f168 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800efbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc0:	895b      	ldrh	r3, [r3, #10]
 800efc2:	2b13      	cmp	r3, #19
 800efc4:	d806      	bhi.n	800efd4 <ip4_frag+0xd0>
 800efc6:	4b6c      	ldr	r3, [pc, #432]	; (800f178 <ip4_frag+0x274>)
 800efc8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800efcc:	496d      	ldr	r1, [pc, #436]	; (800f184 <ip4_frag+0x280>)
 800efce:	486c      	ldr	r0, [pc, #432]	; (800f180 <ip4_frag+0x27c>)
 800efd0:	f000 fa18 	bl	800f404 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	2214      	movs	r2, #20
 800efda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 f9e1 	bl	800f3a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800efe8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800efea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800efee:	e064      	b.n	800f0ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	895a      	ldrh	r2, [r3, #10]
 800eff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	895b      	ldrh	r3, [r3, #10]
 800effe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f000:	429a      	cmp	r2, r3
 800f002:	d906      	bls.n	800f012 <ip4_frag+0x10e>
 800f004:	4b5c      	ldr	r3, [pc, #368]	; (800f178 <ip4_frag+0x274>)
 800f006:	f240 322d 	movw	r2, #813	; 0x32d
 800f00a:	495f      	ldr	r1, [pc, #380]	; (800f188 <ip4_frag+0x284>)
 800f00c:	485c      	ldr	r0, [pc, #368]	; (800f180 <ip4_frag+0x27c>)
 800f00e:	f000 f9f9 	bl	800f404 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f012:	8bfa      	ldrh	r2, [r7, #30]
 800f014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f018:	4293      	cmp	r3, r2
 800f01a:	bf28      	it	cs
 800f01c:	4613      	movcs	r3, r2
 800f01e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f022:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f026:	2b00      	cmp	r3, #0
 800f028:	d105      	bne.n	800f036 <ip4_frag+0x132>
        poff = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	60fb      	str	r3, [r7, #12]
        continue;
 800f034:	e041      	b.n	800f0ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f036:	f7ff ff0d 	bl	800ee54 <ip_frag_alloc_pbuf_custom_ref>
 800f03a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d103      	bne.n	800f04a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f044:	f7f7 f83e 	bl	80060c4 <pbuf_free>
        goto memerr;
 800f048:	e08f      	b.n	800f16a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f04a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f050:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f052:	4413      	add	r3, r2
 800f054:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f058:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f05c:	9201      	str	r2, [sp, #4]
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	4603      	mov	r3, r0
 800f062:	2241      	movs	r2, #65	; 0x41
 800f064:	2000      	movs	r0, #0
 800f066:	f7f6 fe73 	bl	8005d50 <pbuf_alloced_custom>
 800f06a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d106      	bne.n	800f080 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f072:	69b8      	ldr	r0, [r7, #24]
 800f074:	f7ff fef6 	bl	800ee64 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f07a:	f7f7 f823 	bl	80060c4 <pbuf_free>
        goto memerr;
 800f07e:	e074      	b.n	800f16a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f7f7 f8bf 	bl	8006204 <pbuf_ref>
      pcr->original = p;
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	4a3f      	ldr	r2, [pc, #252]	; (800f18c <ip4_frag+0x288>)
 800f090:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f092:	6979      	ldr	r1, [r7, #20]
 800f094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f096:	f7f7 f8d7 	bl	8006248 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f09a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f09e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f0a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d004      	beq.n	800f0ba <ip4_frag+0x1b6>
        poff = 0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f0ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d196      	bne.n	800eff0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f0c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f0c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f0c8:	4413      	add	r3, r2
 800f0ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f0d0:	f1a3 0213 	sub.w	r2, r3, #19
 800f0d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	bfcc      	ite	gt
 800f0dc:	2301      	movgt	r3, #1
 800f0de:	2300      	movle	r3, #0
 800f0e0:	b2db      	uxtb	r3, r3
 800f0e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f0e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f0e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d002      	beq.n	800f0fa <ip4_frag+0x1f6>
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d003      	beq.n	800f102 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f0fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f100:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f102:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f104:	4618      	mov	r0, r3
 800f106:	f7f5 fc7f 	bl	8004a08 <lwip_htons>
 800f10a:	4603      	mov	r3, r0
 800f10c:	461a      	mov	r2, r3
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f114:	3314      	adds	r3, #20
 800f116:	b29b      	uxth	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	f7f5 fc75 	bl	8004a08 <lwip_htons>
 800f11e:	4603      	mov	r3, r0
 800f120:	461a      	mov	r2, r3
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f128:	2200      	movs	r2, #0
 800f12a:	729a      	strb	r2, [r3, #10]
 800f12c:	2200      	movs	r2, #0
 800f12e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	695b      	ldr	r3, [r3, #20]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f138:	68b8      	ldr	r0, [r7, #8]
 800f13a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f13c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f13e:	f7f6 ffc1 	bl	80060c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f142:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f14e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f152:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f154:	4413      	add	r3, r2
 800f156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f15a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f47f af19 	bne.w	800ef96 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	e002      	b.n	800f16e <ip4_frag+0x26a>
      goto memerr;
 800f168:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f16a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3748      	adds	r7, #72	; 0x48
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	08012fb8 	.word	0x08012fb8
 800f17c:	08013194 	.word	0x08013194
 800f180:	08013000 	.word	0x08013000
 800f184:	080131b0 	.word	0x080131b0
 800f188:	080131d0 	.word	0x080131d0
 800f18c:	0800ee9d 	.word	0x0800ee9d

0800f190 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f19a:	230e      	movs	r3, #14
 800f19c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	895b      	ldrh	r3, [r3, #10]
 800f1a2:	2b0e      	cmp	r3, #14
 800f1a4:	d96e      	bls.n	800f284 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7bdb      	ldrb	r3, [r3, #15]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d106      	bne.n	800f1bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	b2da      	uxtb	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	7b1a      	ldrb	r2, [r3, #12]
 800f1c6:	7b5b      	ldrb	r3, [r3, #13]
 800f1c8:	021b      	lsls	r3, r3, #8
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d023      	beq.n	800f222 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d10f      	bne.n	800f202 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	785b      	ldrb	r3, [r3, #1]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d11b      	bne.n	800f222 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f1ee:	2b5e      	cmp	r3, #94	; 0x5e
 800f1f0:	d117      	bne.n	800f222 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	7b5b      	ldrb	r3, [r3, #13]
 800f1f6:	f043 0310 	orr.w	r3, r3, #16
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	735a      	strb	r2, [r3, #13]
 800f200:	e00f      	b.n	800f222 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	2206      	movs	r2, #6
 800f206:	4928      	ldr	r1, [pc, #160]	; (800f2a8 <ethernet_input+0x118>)
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 f8bb 	bl	800f384 <memcmp>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d106      	bne.n	800f222 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	7b5b      	ldrb	r3, [r3, #13]
 800f218:	f043 0308 	orr.w	r3, r3, #8
 800f21c:	b2da      	uxtb	r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f222:	89fb      	ldrh	r3, [r7, #14]
 800f224:	2b08      	cmp	r3, #8
 800f226:	d003      	beq.n	800f230 <ethernet_input+0xa0>
 800f228:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f22c:	d014      	beq.n	800f258 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f22e:	e032      	b.n	800f296 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f236:	f003 0308 	and.w	r3, r3, #8
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d024      	beq.n	800f288 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f23e:	8afb      	ldrh	r3, [r7, #22]
 800f240:	4619      	mov	r1, r3
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7f6 feb8 	bl	8005fb8 <pbuf_remove_header>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d11e      	bne.n	800f28c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7fe fe91 	bl	800df78 <ip4_input>
      break;
 800f256:	e013      	b.n	800f280 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f25e:	f003 0308 	and.w	r3, r3, #8
 800f262:	2b00      	cmp	r3, #0
 800f264:	d014      	beq.n	800f290 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f266:	8afb      	ldrh	r3, [r7, #22]
 800f268:	4619      	mov	r1, r3
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7f6 fea4 	bl	8005fb8 <pbuf_remove_header>
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10e      	bne.n	800f294 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7fe f831 	bl	800d2e0 <etharp_input>
      break;
 800f27e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f280:	2300      	movs	r3, #0
 800f282:	e00c      	b.n	800f29e <ethernet_input+0x10e>
    goto free_and_return;
 800f284:	bf00      	nop
 800f286:	e006      	b.n	800f296 <ethernet_input+0x106>
        goto free_and_return;
 800f288:	bf00      	nop
 800f28a:	e004      	b.n	800f296 <ethernet_input+0x106>
        goto free_and_return;
 800f28c:	bf00      	nop
 800f28e:	e002      	b.n	800f296 <ethernet_input+0x106>
        goto free_and_return;
 800f290:	bf00      	nop
 800f292:	e000      	b.n	800f296 <ethernet_input+0x106>
        goto free_and_return;
 800f294:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7f6 ff14 	bl	80060c4 <pbuf_free>
  return ERR_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	08013364 	.word	0x08013364

0800f2ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
 800f2b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f2ba:	8c3b      	ldrh	r3, [r7, #32]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7f5 fba3 	bl	8004a08 <lwip_htons>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f2c6:	210e      	movs	r1, #14
 800f2c8:	68b8      	ldr	r0, [r7, #8]
 800f2ca:	f7f6 fe65 	bl	8005f98 <pbuf_add_header>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d125      	bne.n	800f320 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	8afa      	ldrh	r2, [r7, #22]
 800f2de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	2206      	movs	r2, #6
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 f85c 	bl	800f3a4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	3306      	adds	r3, #6
 800f2f0:	2206      	movs	r2, #6
 800f2f2:	6879      	ldr	r1, [r7, #4]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 f855 	bl	800f3a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f300:	2b06      	cmp	r3, #6
 800f302:	d006      	beq.n	800f312 <ethernet_output+0x66>
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <ethernet_output+0x84>)
 800f306:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f30a:	490a      	ldr	r1, [pc, #40]	; (800f334 <ethernet_output+0x88>)
 800f30c:	480a      	ldr	r0, [pc, #40]	; (800f338 <ethernet_output+0x8c>)
 800f30e:	f000 f879 	bl	800f404 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	699b      	ldr	r3, [r3, #24]
 800f316:	68b9      	ldr	r1, [r7, #8]
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	4798      	blx	r3
 800f31c:	4603      	mov	r3, r0
 800f31e:	e002      	b.n	800f326 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f320:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f322:	f06f 0301 	mvn.w	r3, #1
}
 800f326:	4618      	mov	r0, r3
 800f328:	3718      	adds	r7, #24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	080131e0 	.word	0x080131e0
 800f334:	08013218 	.word	0x08013218
 800f338:	0801324c 	.word	0x0801324c

0800f33c <__libc_init_array>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	4d0d      	ldr	r5, [pc, #52]	; (800f374 <__libc_init_array+0x38>)
 800f340:	4c0d      	ldr	r4, [pc, #52]	; (800f378 <__libc_init_array+0x3c>)
 800f342:	1b64      	subs	r4, r4, r5
 800f344:	10a4      	asrs	r4, r4, #2
 800f346:	2600      	movs	r6, #0
 800f348:	42a6      	cmp	r6, r4
 800f34a:	d109      	bne.n	800f360 <__libc_init_array+0x24>
 800f34c:	4d0b      	ldr	r5, [pc, #44]	; (800f37c <__libc_init_array+0x40>)
 800f34e:	4c0c      	ldr	r4, [pc, #48]	; (800f380 <__libc_init_array+0x44>)
 800f350:	f001 fa5c 	bl	801080c <_init>
 800f354:	1b64      	subs	r4, r4, r5
 800f356:	10a4      	asrs	r4, r4, #2
 800f358:	2600      	movs	r6, #0
 800f35a:	42a6      	cmp	r6, r4
 800f35c:	d105      	bne.n	800f36a <__libc_init_array+0x2e>
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	f855 3b04 	ldr.w	r3, [r5], #4
 800f364:	4798      	blx	r3
 800f366:	3601      	adds	r6, #1
 800f368:	e7ee      	b.n	800f348 <__libc_init_array+0xc>
 800f36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f36e:	4798      	blx	r3
 800f370:	3601      	adds	r6, #1
 800f372:	e7f2      	b.n	800f35a <__libc_init_array+0x1e>
 800f374:	080134c4 	.word	0x080134c4
 800f378:	080134c4 	.word	0x080134c4
 800f37c:	080134c4 	.word	0x080134c4
 800f380:	080134c8 	.word	0x080134c8

0800f384 <memcmp>:
 800f384:	b510      	push	{r4, lr}
 800f386:	3901      	subs	r1, #1
 800f388:	4402      	add	r2, r0
 800f38a:	4290      	cmp	r0, r2
 800f38c:	d101      	bne.n	800f392 <memcmp+0xe>
 800f38e:	2000      	movs	r0, #0
 800f390:	e005      	b.n	800f39e <memcmp+0x1a>
 800f392:	7803      	ldrb	r3, [r0, #0]
 800f394:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f398:	42a3      	cmp	r3, r4
 800f39a:	d001      	beq.n	800f3a0 <memcmp+0x1c>
 800f39c:	1b18      	subs	r0, r3, r4
 800f39e:	bd10      	pop	{r4, pc}
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	e7f2      	b.n	800f38a <memcmp+0x6>

0800f3a4 <memcpy>:
 800f3a4:	440a      	add	r2, r1
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3ac:	d100      	bne.n	800f3b0 <memcpy+0xc>
 800f3ae:	4770      	bx	lr
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	d1f9      	bne.n	800f3b2 <memcpy+0xe>
 800f3be:	bd10      	pop	{r4, pc}

0800f3c0 <memmove>:
 800f3c0:	4288      	cmp	r0, r1
 800f3c2:	b510      	push	{r4, lr}
 800f3c4:	eb01 0402 	add.w	r4, r1, r2
 800f3c8:	d902      	bls.n	800f3d0 <memmove+0x10>
 800f3ca:	4284      	cmp	r4, r0
 800f3cc:	4623      	mov	r3, r4
 800f3ce:	d807      	bhi.n	800f3e0 <memmove+0x20>
 800f3d0:	1e43      	subs	r3, r0, #1
 800f3d2:	42a1      	cmp	r1, r4
 800f3d4:	d008      	beq.n	800f3e8 <memmove+0x28>
 800f3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3de:	e7f8      	b.n	800f3d2 <memmove+0x12>
 800f3e0:	4402      	add	r2, r0
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	428a      	cmp	r2, r1
 800f3e6:	d100      	bne.n	800f3ea <memmove+0x2a>
 800f3e8:	bd10      	pop	{r4, pc}
 800f3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3f2:	e7f7      	b.n	800f3e4 <memmove+0x24>

0800f3f4 <memset>:
 800f3f4:	4402      	add	r2, r0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d100      	bne.n	800f3fe <memset+0xa>
 800f3fc:	4770      	bx	lr
 800f3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f402:	e7f9      	b.n	800f3f8 <memset+0x4>

0800f404 <iprintf>:
 800f404:	b40f      	push	{r0, r1, r2, r3}
 800f406:	4b0a      	ldr	r3, [pc, #40]	; (800f430 <iprintf+0x2c>)
 800f408:	b513      	push	{r0, r1, r4, lr}
 800f40a:	681c      	ldr	r4, [r3, #0]
 800f40c:	b124      	cbz	r4, 800f418 <iprintf+0x14>
 800f40e:	69a3      	ldr	r3, [r4, #24]
 800f410:	b913      	cbnz	r3, 800f418 <iprintf+0x14>
 800f412:	4620      	mov	r0, r4
 800f414:	f000 f8e2 	bl	800f5dc <__sinit>
 800f418:	ab05      	add	r3, sp, #20
 800f41a:	9a04      	ldr	r2, [sp, #16]
 800f41c:	68a1      	ldr	r1, [r4, #8]
 800f41e:	9301      	str	r3, [sp, #4]
 800f420:	4620      	mov	r0, r4
 800f422:	f000 fbfb 	bl	800fc1c <_vfiprintf_r>
 800f426:	b002      	add	sp, #8
 800f428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f42c:	b004      	add	sp, #16
 800f42e:	4770      	bx	lr
 800f430:	2000002c 	.word	0x2000002c

0800f434 <rand>:
 800f434:	4b16      	ldr	r3, [pc, #88]	; (800f490 <rand+0x5c>)
 800f436:	b510      	push	{r4, lr}
 800f438:	681c      	ldr	r4, [r3, #0]
 800f43a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f43c:	b9b3      	cbnz	r3, 800f46c <rand+0x38>
 800f43e:	2018      	movs	r0, #24
 800f440:	f000 f97e 	bl	800f740 <malloc>
 800f444:	63a0      	str	r0, [r4, #56]	; 0x38
 800f446:	b928      	cbnz	r0, 800f454 <rand+0x20>
 800f448:	4602      	mov	r2, r0
 800f44a:	4b12      	ldr	r3, [pc, #72]	; (800f494 <rand+0x60>)
 800f44c:	4812      	ldr	r0, [pc, #72]	; (800f498 <rand+0x64>)
 800f44e:	214e      	movs	r1, #78	; 0x4e
 800f450:	f000 f84e 	bl	800f4f0 <__assert_func>
 800f454:	4a11      	ldr	r2, [pc, #68]	; (800f49c <rand+0x68>)
 800f456:	4b12      	ldr	r3, [pc, #72]	; (800f4a0 <rand+0x6c>)
 800f458:	e9c0 2300 	strd	r2, r3, [r0]
 800f45c:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <rand+0x70>)
 800f45e:	6083      	str	r3, [r0, #8]
 800f460:	230b      	movs	r3, #11
 800f462:	8183      	strh	r3, [r0, #12]
 800f464:	2201      	movs	r2, #1
 800f466:	2300      	movs	r3, #0
 800f468:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f46c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f46e:	4a0e      	ldr	r2, [pc, #56]	; (800f4a8 <rand+0x74>)
 800f470:	6920      	ldr	r0, [r4, #16]
 800f472:	6963      	ldr	r3, [r4, #20]
 800f474:	490d      	ldr	r1, [pc, #52]	; (800f4ac <rand+0x78>)
 800f476:	4342      	muls	r2, r0
 800f478:	fb01 2203 	mla	r2, r1, r3, r2
 800f47c:	fba0 0101 	umull	r0, r1, r0, r1
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	eb42 0001 	adc.w	r0, r2, r1
 800f486:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f48a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f48e:	bd10      	pop	{r4, pc}
 800f490:	2000002c 	.word	0x2000002c
 800f494:	08013378 	.word	0x08013378
 800f498:	0801338f 	.word	0x0801338f
 800f49c:	abcd330e 	.word	0xabcd330e
 800f4a0:	e66d1234 	.word	0xe66d1234
 800f4a4:	0005deec 	.word	0x0005deec
 800f4a8:	5851f42d 	.word	0x5851f42d
 800f4ac:	4c957f2d 	.word	0x4c957f2d

0800f4b0 <siprintf>:
 800f4b0:	b40e      	push	{r1, r2, r3}
 800f4b2:	b500      	push	{lr}
 800f4b4:	b09c      	sub	sp, #112	; 0x70
 800f4b6:	ab1d      	add	r3, sp, #116	; 0x74
 800f4b8:	9002      	str	r0, [sp, #8]
 800f4ba:	9006      	str	r0, [sp, #24]
 800f4bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4c0:	4809      	ldr	r0, [pc, #36]	; (800f4e8 <siprintf+0x38>)
 800f4c2:	9107      	str	r1, [sp, #28]
 800f4c4:	9104      	str	r1, [sp, #16]
 800f4c6:	4909      	ldr	r1, [pc, #36]	; (800f4ec <siprintf+0x3c>)
 800f4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4cc:	9105      	str	r1, [sp, #20]
 800f4ce:	6800      	ldr	r0, [r0, #0]
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	a902      	add	r1, sp, #8
 800f4d4:	f000 fa78 	bl	800f9c8 <_svfiprintf_r>
 800f4d8:	9b02      	ldr	r3, [sp, #8]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	b01c      	add	sp, #112	; 0x70
 800f4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	4770      	bx	lr
 800f4e8:	2000002c 	.word	0x2000002c
 800f4ec:	ffff0208 	.word	0xffff0208

0800f4f0 <__assert_func>:
 800f4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4f2:	4614      	mov	r4, r2
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4b09      	ldr	r3, [pc, #36]	; (800f51c <__assert_func+0x2c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	68d8      	ldr	r0, [r3, #12]
 800f4fe:	b14c      	cbz	r4, 800f514 <__assert_func+0x24>
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <__assert_func+0x30>)
 800f502:	9100      	str	r1, [sp, #0]
 800f504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f508:	4906      	ldr	r1, [pc, #24]	; (800f524 <__assert_func+0x34>)
 800f50a:	462b      	mov	r3, r5
 800f50c:	f000 f8e4 	bl	800f6d8 <fiprintf>
 800f510:	f000 ff6e 	bl	80103f0 <abort>
 800f514:	4b04      	ldr	r3, [pc, #16]	; (800f528 <__assert_func+0x38>)
 800f516:	461c      	mov	r4, r3
 800f518:	e7f3      	b.n	800f502 <__assert_func+0x12>
 800f51a:	bf00      	nop
 800f51c:	2000002c 	.word	0x2000002c
 800f520:	080133ea 	.word	0x080133ea
 800f524:	080133f7 	.word	0x080133f7
 800f528:	08013425 	.word	0x08013425

0800f52c <std>:
 800f52c:	2300      	movs	r3, #0
 800f52e:	b510      	push	{r4, lr}
 800f530:	4604      	mov	r4, r0
 800f532:	e9c0 3300 	strd	r3, r3, [r0]
 800f536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f53a:	6083      	str	r3, [r0, #8]
 800f53c:	8181      	strh	r1, [r0, #12]
 800f53e:	6643      	str	r3, [r0, #100]	; 0x64
 800f540:	81c2      	strh	r2, [r0, #14]
 800f542:	6183      	str	r3, [r0, #24]
 800f544:	4619      	mov	r1, r3
 800f546:	2208      	movs	r2, #8
 800f548:	305c      	adds	r0, #92	; 0x5c
 800f54a:	f7ff ff53 	bl	800f3f4 <memset>
 800f54e:	4b05      	ldr	r3, [pc, #20]	; (800f564 <std+0x38>)
 800f550:	6263      	str	r3, [r4, #36]	; 0x24
 800f552:	4b05      	ldr	r3, [pc, #20]	; (800f568 <std+0x3c>)
 800f554:	62a3      	str	r3, [r4, #40]	; 0x28
 800f556:	4b05      	ldr	r3, [pc, #20]	; (800f56c <std+0x40>)
 800f558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f55a:	4b05      	ldr	r3, [pc, #20]	; (800f570 <std+0x44>)
 800f55c:	6224      	str	r4, [r4, #32]
 800f55e:	6323      	str	r3, [r4, #48]	; 0x30
 800f560:	bd10      	pop	{r4, pc}
 800f562:	bf00      	nop
 800f564:	080101c5 	.word	0x080101c5
 800f568:	080101e7 	.word	0x080101e7
 800f56c:	0801021f 	.word	0x0801021f
 800f570:	08010243 	.word	0x08010243

0800f574 <_cleanup_r>:
 800f574:	4901      	ldr	r1, [pc, #4]	; (800f57c <_cleanup_r+0x8>)
 800f576:	f000 b8c1 	b.w	800f6fc <_fwalk_reent>
 800f57a:	bf00      	nop
 800f57c:	0801052d 	.word	0x0801052d

0800f580 <__sfmoreglue>:
 800f580:	b570      	push	{r4, r5, r6, lr}
 800f582:	2268      	movs	r2, #104	; 0x68
 800f584:	1e4d      	subs	r5, r1, #1
 800f586:	4355      	muls	r5, r2
 800f588:	460e      	mov	r6, r1
 800f58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f58e:	f000 f94b 	bl	800f828 <_malloc_r>
 800f592:	4604      	mov	r4, r0
 800f594:	b140      	cbz	r0, 800f5a8 <__sfmoreglue+0x28>
 800f596:	2100      	movs	r1, #0
 800f598:	e9c0 1600 	strd	r1, r6, [r0]
 800f59c:	300c      	adds	r0, #12
 800f59e:	60a0      	str	r0, [r4, #8]
 800f5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5a4:	f7ff ff26 	bl	800f3f4 <memset>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}

0800f5ac <__sfp_lock_acquire>:
 800f5ac:	4801      	ldr	r0, [pc, #4]	; (800f5b4 <__sfp_lock_acquire+0x8>)
 800f5ae:	f000 b8c5 	b.w	800f73c <__retarget_lock_acquire_recursive>
 800f5b2:	bf00      	nop
 800f5b4:	2000a5c9 	.word	0x2000a5c9

0800f5b8 <__sfp_lock_release>:
 800f5b8:	4801      	ldr	r0, [pc, #4]	; (800f5c0 <__sfp_lock_release+0x8>)
 800f5ba:	f000 b8c0 	b.w	800f73e <__retarget_lock_release_recursive>
 800f5be:	bf00      	nop
 800f5c0:	2000a5c9 	.word	0x2000a5c9

0800f5c4 <__sinit_lock_acquire>:
 800f5c4:	4801      	ldr	r0, [pc, #4]	; (800f5cc <__sinit_lock_acquire+0x8>)
 800f5c6:	f000 b8b9 	b.w	800f73c <__retarget_lock_acquire_recursive>
 800f5ca:	bf00      	nop
 800f5cc:	2000a5ca 	.word	0x2000a5ca

0800f5d0 <__sinit_lock_release>:
 800f5d0:	4801      	ldr	r0, [pc, #4]	; (800f5d8 <__sinit_lock_release+0x8>)
 800f5d2:	f000 b8b4 	b.w	800f73e <__retarget_lock_release_recursive>
 800f5d6:	bf00      	nop
 800f5d8:	2000a5ca 	.word	0x2000a5ca

0800f5dc <__sinit>:
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	4604      	mov	r4, r0
 800f5e0:	f7ff fff0 	bl	800f5c4 <__sinit_lock_acquire>
 800f5e4:	69a3      	ldr	r3, [r4, #24]
 800f5e6:	b11b      	cbz	r3, 800f5f0 <__sinit+0x14>
 800f5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ec:	f7ff bff0 	b.w	800f5d0 <__sinit_lock_release>
 800f5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800f5f6:	4b13      	ldr	r3, [pc, #76]	; (800f644 <__sinit+0x68>)
 800f5f8:	4a13      	ldr	r2, [pc, #76]	; (800f648 <__sinit+0x6c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f5fe:	42a3      	cmp	r3, r4
 800f600:	bf04      	itt	eq
 800f602:	2301      	moveq	r3, #1
 800f604:	61a3      	streq	r3, [r4, #24]
 800f606:	4620      	mov	r0, r4
 800f608:	f000 f820 	bl	800f64c <__sfp>
 800f60c:	6060      	str	r0, [r4, #4]
 800f60e:	4620      	mov	r0, r4
 800f610:	f000 f81c 	bl	800f64c <__sfp>
 800f614:	60a0      	str	r0, [r4, #8]
 800f616:	4620      	mov	r0, r4
 800f618:	f000 f818 	bl	800f64c <__sfp>
 800f61c:	2200      	movs	r2, #0
 800f61e:	60e0      	str	r0, [r4, #12]
 800f620:	2104      	movs	r1, #4
 800f622:	6860      	ldr	r0, [r4, #4]
 800f624:	f7ff ff82 	bl	800f52c <std>
 800f628:	68a0      	ldr	r0, [r4, #8]
 800f62a:	2201      	movs	r2, #1
 800f62c:	2109      	movs	r1, #9
 800f62e:	f7ff ff7d 	bl	800f52c <std>
 800f632:	68e0      	ldr	r0, [r4, #12]
 800f634:	2202      	movs	r2, #2
 800f636:	2112      	movs	r1, #18
 800f638:	f7ff ff78 	bl	800f52c <std>
 800f63c:	2301      	movs	r3, #1
 800f63e:	61a3      	str	r3, [r4, #24]
 800f640:	e7d2      	b.n	800f5e8 <__sinit+0xc>
 800f642:	bf00      	nop
 800f644:	08013374 	.word	0x08013374
 800f648:	0800f575 	.word	0x0800f575

0800f64c <__sfp>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	4607      	mov	r7, r0
 800f650:	f7ff ffac 	bl	800f5ac <__sfp_lock_acquire>
 800f654:	4b1e      	ldr	r3, [pc, #120]	; (800f6d0 <__sfp+0x84>)
 800f656:	681e      	ldr	r6, [r3, #0]
 800f658:	69b3      	ldr	r3, [r6, #24]
 800f65a:	b913      	cbnz	r3, 800f662 <__sfp+0x16>
 800f65c:	4630      	mov	r0, r6
 800f65e:	f7ff ffbd 	bl	800f5dc <__sinit>
 800f662:	3648      	adds	r6, #72	; 0x48
 800f664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f668:	3b01      	subs	r3, #1
 800f66a:	d503      	bpl.n	800f674 <__sfp+0x28>
 800f66c:	6833      	ldr	r3, [r6, #0]
 800f66e:	b30b      	cbz	r3, 800f6b4 <__sfp+0x68>
 800f670:	6836      	ldr	r6, [r6, #0]
 800f672:	e7f7      	b.n	800f664 <__sfp+0x18>
 800f674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f678:	b9d5      	cbnz	r5, 800f6b0 <__sfp+0x64>
 800f67a:	4b16      	ldr	r3, [pc, #88]	; (800f6d4 <__sfp+0x88>)
 800f67c:	60e3      	str	r3, [r4, #12]
 800f67e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f682:	6665      	str	r5, [r4, #100]	; 0x64
 800f684:	f000 f859 	bl	800f73a <__retarget_lock_init_recursive>
 800f688:	f7ff ff96 	bl	800f5b8 <__sfp_lock_release>
 800f68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f694:	6025      	str	r5, [r4, #0]
 800f696:	61a5      	str	r5, [r4, #24]
 800f698:	2208      	movs	r2, #8
 800f69a:	4629      	mov	r1, r5
 800f69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6a0:	f7ff fea8 	bl	800f3f4 <memset>
 800f6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b0:	3468      	adds	r4, #104	; 0x68
 800f6b2:	e7d9      	b.n	800f668 <__sfp+0x1c>
 800f6b4:	2104      	movs	r1, #4
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	f7ff ff62 	bl	800f580 <__sfmoreglue>
 800f6bc:	4604      	mov	r4, r0
 800f6be:	6030      	str	r0, [r6, #0]
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d1d5      	bne.n	800f670 <__sfp+0x24>
 800f6c4:	f7ff ff78 	bl	800f5b8 <__sfp_lock_release>
 800f6c8:	230c      	movs	r3, #12
 800f6ca:	603b      	str	r3, [r7, #0]
 800f6cc:	e7ee      	b.n	800f6ac <__sfp+0x60>
 800f6ce:	bf00      	nop
 800f6d0:	08013374 	.word	0x08013374
 800f6d4:	ffff0001 	.word	0xffff0001

0800f6d8 <fiprintf>:
 800f6d8:	b40e      	push	{r1, r2, r3}
 800f6da:	b503      	push	{r0, r1, lr}
 800f6dc:	4601      	mov	r1, r0
 800f6de:	ab03      	add	r3, sp, #12
 800f6e0:	4805      	ldr	r0, [pc, #20]	; (800f6f8 <fiprintf+0x20>)
 800f6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e6:	6800      	ldr	r0, [r0, #0]
 800f6e8:	9301      	str	r3, [sp, #4]
 800f6ea:	f000 fa97 	bl	800fc1c <_vfiprintf_r>
 800f6ee:	b002      	add	sp, #8
 800f6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f4:	b003      	add	sp, #12
 800f6f6:	4770      	bx	lr
 800f6f8:	2000002c 	.word	0x2000002c

0800f6fc <_fwalk_reent>:
 800f6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f700:	4606      	mov	r6, r0
 800f702:	4688      	mov	r8, r1
 800f704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f708:	2700      	movs	r7, #0
 800f70a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f70e:	f1b9 0901 	subs.w	r9, r9, #1
 800f712:	d505      	bpl.n	800f720 <_fwalk_reent+0x24>
 800f714:	6824      	ldr	r4, [r4, #0]
 800f716:	2c00      	cmp	r4, #0
 800f718:	d1f7      	bne.n	800f70a <_fwalk_reent+0xe>
 800f71a:	4638      	mov	r0, r7
 800f71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f720:	89ab      	ldrh	r3, [r5, #12]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d907      	bls.n	800f736 <_fwalk_reent+0x3a>
 800f726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f72a:	3301      	adds	r3, #1
 800f72c:	d003      	beq.n	800f736 <_fwalk_reent+0x3a>
 800f72e:	4629      	mov	r1, r5
 800f730:	4630      	mov	r0, r6
 800f732:	47c0      	blx	r8
 800f734:	4307      	orrs	r7, r0
 800f736:	3568      	adds	r5, #104	; 0x68
 800f738:	e7e9      	b.n	800f70e <_fwalk_reent+0x12>

0800f73a <__retarget_lock_init_recursive>:
 800f73a:	4770      	bx	lr

0800f73c <__retarget_lock_acquire_recursive>:
 800f73c:	4770      	bx	lr

0800f73e <__retarget_lock_release_recursive>:
 800f73e:	4770      	bx	lr

0800f740 <malloc>:
 800f740:	4b02      	ldr	r3, [pc, #8]	; (800f74c <malloc+0xc>)
 800f742:	4601      	mov	r1, r0
 800f744:	6818      	ldr	r0, [r3, #0]
 800f746:	f000 b86f 	b.w	800f828 <_malloc_r>
 800f74a:	bf00      	nop
 800f74c:	2000002c 	.word	0x2000002c

0800f750 <_free_r>:
 800f750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f752:	2900      	cmp	r1, #0
 800f754:	d044      	beq.n	800f7e0 <_free_r+0x90>
 800f756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f75a:	9001      	str	r0, [sp, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f1a1 0404 	sub.w	r4, r1, #4
 800f762:	bfb8      	it	lt
 800f764:	18e4      	addlt	r4, r4, r3
 800f766:	f000 ff95 	bl	8010694 <__malloc_lock>
 800f76a:	4a1e      	ldr	r2, [pc, #120]	; (800f7e4 <_free_r+0x94>)
 800f76c:	9801      	ldr	r0, [sp, #4]
 800f76e:	6813      	ldr	r3, [r2, #0]
 800f770:	b933      	cbnz	r3, 800f780 <_free_r+0x30>
 800f772:	6063      	str	r3, [r4, #4]
 800f774:	6014      	str	r4, [r2, #0]
 800f776:	b003      	add	sp, #12
 800f778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f77c:	f000 bf90 	b.w	80106a0 <__malloc_unlock>
 800f780:	42a3      	cmp	r3, r4
 800f782:	d908      	bls.n	800f796 <_free_r+0x46>
 800f784:	6825      	ldr	r5, [r4, #0]
 800f786:	1961      	adds	r1, r4, r5
 800f788:	428b      	cmp	r3, r1
 800f78a:	bf01      	itttt	eq
 800f78c:	6819      	ldreq	r1, [r3, #0]
 800f78e:	685b      	ldreq	r3, [r3, #4]
 800f790:	1949      	addeq	r1, r1, r5
 800f792:	6021      	streq	r1, [r4, #0]
 800f794:	e7ed      	b.n	800f772 <_free_r+0x22>
 800f796:	461a      	mov	r2, r3
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	b10b      	cbz	r3, 800f7a0 <_free_r+0x50>
 800f79c:	42a3      	cmp	r3, r4
 800f79e:	d9fa      	bls.n	800f796 <_free_r+0x46>
 800f7a0:	6811      	ldr	r1, [r2, #0]
 800f7a2:	1855      	adds	r5, r2, r1
 800f7a4:	42a5      	cmp	r5, r4
 800f7a6:	d10b      	bne.n	800f7c0 <_free_r+0x70>
 800f7a8:	6824      	ldr	r4, [r4, #0]
 800f7aa:	4421      	add	r1, r4
 800f7ac:	1854      	adds	r4, r2, r1
 800f7ae:	42a3      	cmp	r3, r4
 800f7b0:	6011      	str	r1, [r2, #0]
 800f7b2:	d1e0      	bne.n	800f776 <_free_r+0x26>
 800f7b4:	681c      	ldr	r4, [r3, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	6053      	str	r3, [r2, #4]
 800f7ba:	4421      	add	r1, r4
 800f7bc:	6011      	str	r1, [r2, #0]
 800f7be:	e7da      	b.n	800f776 <_free_r+0x26>
 800f7c0:	d902      	bls.n	800f7c8 <_free_r+0x78>
 800f7c2:	230c      	movs	r3, #12
 800f7c4:	6003      	str	r3, [r0, #0]
 800f7c6:	e7d6      	b.n	800f776 <_free_r+0x26>
 800f7c8:	6825      	ldr	r5, [r4, #0]
 800f7ca:	1961      	adds	r1, r4, r5
 800f7cc:	428b      	cmp	r3, r1
 800f7ce:	bf04      	itt	eq
 800f7d0:	6819      	ldreq	r1, [r3, #0]
 800f7d2:	685b      	ldreq	r3, [r3, #4]
 800f7d4:	6063      	str	r3, [r4, #4]
 800f7d6:	bf04      	itt	eq
 800f7d8:	1949      	addeq	r1, r1, r5
 800f7da:	6021      	streq	r1, [r4, #0]
 800f7dc:	6054      	str	r4, [r2, #4]
 800f7de:	e7ca      	b.n	800f776 <_free_r+0x26>
 800f7e0:	b003      	add	sp, #12
 800f7e2:	bd30      	pop	{r4, r5, pc}
 800f7e4:	2000a5cc 	.word	0x2000a5cc

0800f7e8 <sbrk_aligned>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4e0e      	ldr	r6, [pc, #56]	; (800f824 <sbrk_aligned+0x3c>)
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	6831      	ldr	r1, [r6, #0]
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	b911      	cbnz	r1, 800f7fa <sbrk_aligned+0x12>
 800f7f4:	f000 fcd6 	bl	80101a4 <_sbrk_r>
 800f7f8:	6030      	str	r0, [r6, #0]
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f000 fcd1 	bl	80101a4 <_sbrk_r>
 800f802:	1c43      	adds	r3, r0, #1
 800f804:	d00a      	beq.n	800f81c <sbrk_aligned+0x34>
 800f806:	1cc4      	adds	r4, r0, #3
 800f808:	f024 0403 	bic.w	r4, r4, #3
 800f80c:	42a0      	cmp	r0, r4
 800f80e:	d007      	beq.n	800f820 <sbrk_aligned+0x38>
 800f810:	1a21      	subs	r1, r4, r0
 800f812:	4628      	mov	r0, r5
 800f814:	f000 fcc6 	bl	80101a4 <_sbrk_r>
 800f818:	3001      	adds	r0, #1
 800f81a:	d101      	bne.n	800f820 <sbrk_aligned+0x38>
 800f81c:	f04f 34ff 	mov.w	r4, #4294967295
 800f820:	4620      	mov	r0, r4
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	2000a5d0 	.word	0x2000a5d0

0800f828 <_malloc_r>:
 800f828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f82c:	1ccd      	adds	r5, r1, #3
 800f82e:	f025 0503 	bic.w	r5, r5, #3
 800f832:	3508      	adds	r5, #8
 800f834:	2d0c      	cmp	r5, #12
 800f836:	bf38      	it	cc
 800f838:	250c      	movcc	r5, #12
 800f83a:	2d00      	cmp	r5, #0
 800f83c:	4607      	mov	r7, r0
 800f83e:	db01      	blt.n	800f844 <_malloc_r+0x1c>
 800f840:	42a9      	cmp	r1, r5
 800f842:	d905      	bls.n	800f850 <_malloc_r+0x28>
 800f844:	230c      	movs	r3, #12
 800f846:	603b      	str	r3, [r7, #0]
 800f848:	2600      	movs	r6, #0
 800f84a:	4630      	mov	r0, r6
 800f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f850:	4e2e      	ldr	r6, [pc, #184]	; (800f90c <_malloc_r+0xe4>)
 800f852:	f000 ff1f 	bl	8010694 <__malloc_lock>
 800f856:	6833      	ldr	r3, [r6, #0]
 800f858:	461c      	mov	r4, r3
 800f85a:	bb34      	cbnz	r4, 800f8aa <_malloc_r+0x82>
 800f85c:	4629      	mov	r1, r5
 800f85e:	4638      	mov	r0, r7
 800f860:	f7ff ffc2 	bl	800f7e8 <sbrk_aligned>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	4604      	mov	r4, r0
 800f868:	d14d      	bne.n	800f906 <_malloc_r+0xde>
 800f86a:	6834      	ldr	r4, [r6, #0]
 800f86c:	4626      	mov	r6, r4
 800f86e:	2e00      	cmp	r6, #0
 800f870:	d140      	bne.n	800f8f4 <_malloc_r+0xcc>
 800f872:	6823      	ldr	r3, [r4, #0]
 800f874:	4631      	mov	r1, r6
 800f876:	4638      	mov	r0, r7
 800f878:	eb04 0803 	add.w	r8, r4, r3
 800f87c:	f000 fc92 	bl	80101a4 <_sbrk_r>
 800f880:	4580      	cmp	r8, r0
 800f882:	d13a      	bne.n	800f8fa <_malloc_r+0xd2>
 800f884:	6821      	ldr	r1, [r4, #0]
 800f886:	3503      	adds	r5, #3
 800f888:	1a6d      	subs	r5, r5, r1
 800f88a:	f025 0503 	bic.w	r5, r5, #3
 800f88e:	3508      	adds	r5, #8
 800f890:	2d0c      	cmp	r5, #12
 800f892:	bf38      	it	cc
 800f894:	250c      	movcc	r5, #12
 800f896:	4629      	mov	r1, r5
 800f898:	4638      	mov	r0, r7
 800f89a:	f7ff ffa5 	bl	800f7e8 <sbrk_aligned>
 800f89e:	3001      	adds	r0, #1
 800f8a0:	d02b      	beq.n	800f8fa <_malloc_r+0xd2>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	442b      	add	r3, r5
 800f8a6:	6023      	str	r3, [r4, #0]
 800f8a8:	e00e      	b.n	800f8c8 <_malloc_r+0xa0>
 800f8aa:	6822      	ldr	r2, [r4, #0]
 800f8ac:	1b52      	subs	r2, r2, r5
 800f8ae:	d41e      	bmi.n	800f8ee <_malloc_r+0xc6>
 800f8b0:	2a0b      	cmp	r2, #11
 800f8b2:	d916      	bls.n	800f8e2 <_malloc_r+0xba>
 800f8b4:	1961      	adds	r1, r4, r5
 800f8b6:	42a3      	cmp	r3, r4
 800f8b8:	6025      	str	r5, [r4, #0]
 800f8ba:	bf18      	it	ne
 800f8bc:	6059      	strne	r1, [r3, #4]
 800f8be:	6863      	ldr	r3, [r4, #4]
 800f8c0:	bf08      	it	eq
 800f8c2:	6031      	streq	r1, [r6, #0]
 800f8c4:	5162      	str	r2, [r4, r5]
 800f8c6:	604b      	str	r3, [r1, #4]
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f104 060b 	add.w	r6, r4, #11
 800f8ce:	f000 fee7 	bl	80106a0 <__malloc_unlock>
 800f8d2:	f026 0607 	bic.w	r6, r6, #7
 800f8d6:	1d23      	adds	r3, r4, #4
 800f8d8:	1af2      	subs	r2, r6, r3
 800f8da:	d0b6      	beq.n	800f84a <_malloc_r+0x22>
 800f8dc:	1b9b      	subs	r3, r3, r6
 800f8de:	50a3      	str	r3, [r4, r2]
 800f8e0:	e7b3      	b.n	800f84a <_malloc_r+0x22>
 800f8e2:	6862      	ldr	r2, [r4, #4]
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	bf0c      	ite	eq
 800f8e8:	6032      	streq	r2, [r6, #0]
 800f8ea:	605a      	strne	r2, [r3, #4]
 800f8ec:	e7ec      	b.n	800f8c8 <_malloc_r+0xa0>
 800f8ee:	4623      	mov	r3, r4
 800f8f0:	6864      	ldr	r4, [r4, #4]
 800f8f2:	e7b2      	b.n	800f85a <_malloc_r+0x32>
 800f8f4:	4634      	mov	r4, r6
 800f8f6:	6876      	ldr	r6, [r6, #4]
 800f8f8:	e7b9      	b.n	800f86e <_malloc_r+0x46>
 800f8fa:	230c      	movs	r3, #12
 800f8fc:	603b      	str	r3, [r7, #0]
 800f8fe:	4638      	mov	r0, r7
 800f900:	f000 fece 	bl	80106a0 <__malloc_unlock>
 800f904:	e7a1      	b.n	800f84a <_malloc_r+0x22>
 800f906:	6025      	str	r5, [r4, #0]
 800f908:	e7de      	b.n	800f8c8 <_malloc_r+0xa0>
 800f90a:	bf00      	nop
 800f90c:	2000a5cc 	.word	0x2000a5cc

0800f910 <__ssputs_r>:
 800f910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f914:	688e      	ldr	r6, [r1, #8]
 800f916:	429e      	cmp	r6, r3
 800f918:	4682      	mov	sl, r0
 800f91a:	460c      	mov	r4, r1
 800f91c:	4690      	mov	r8, r2
 800f91e:	461f      	mov	r7, r3
 800f920:	d838      	bhi.n	800f994 <__ssputs_r+0x84>
 800f922:	898a      	ldrh	r2, [r1, #12]
 800f924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f928:	d032      	beq.n	800f990 <__ssputs_r+0x80>
 800f92a:	6825      	ldr	r5, [r4, #0]
 800f92c:	6909      	ldr	r1, [r1, #16]
 800f92e:	eba5 0901 	sub.w	r9, r5, r1
 800f932:	6965      	ldr	r5, [r4, #20]
 800f934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f93c:	3301      	adds	r3, #1
 800f93e:	444b      	add	r3, r9
 800f940:	106d      	asrs	r5, r5, #1
 800f942:	429d      	cmp	r5, r3
 800f944:	bf38      	it	cc
 800f946:	461d      	movcc	r5, r3
 800f948:	0553      	lsls	r3, r2, #21
 800f94a:	d531      	bpl.n	800f9b0 <__ssputs_r+0xa0>
 800f94c:	4629      	mov	r1, r5
 800f94e:	f7ff ff6b 	bl	800f828 <_malloc_r>
 800f952:	4606      	mov	r6, r0
 800f954:	b950      	cbnz	r0, 800f96c <__ssputs_r+0x5c>
 800f956:	230c      	movs	r3, #12
 800f958:	f8ca 3000 	str.w	r3, [sl]
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f962:	81a3      	strh	r3, [r4, #12]
 800f964:	f04f 30ff 	mov.w	r0, #4294967295
 800f968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f96c:	6921      	ldr	r1, [r4, #16]
 800f96e:	464a      	mov	r2, r9
 800f970:	f7ff fd18 	bl	800f3a4 <memcpy>
 800f974:	89a3      	ldrh	r3, [r4, #12]
 800f976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f97a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f97e:	81a3      	strh	r3, [r4, #12]
 800f980:	6126      	str	r6, [r4, #16]
 800f982:	6165      	str	r5, [r4, #20]
 800f984:	444e      	add	r6, r9
 800f986:	eba5 0509 	sub.w	r5, r5, r9
 800f98a:	6026      	str	r6, [r4, #0]
 800f98c:	60a5      	str	r5, [r4, #8]
 800f98e:	463e      	mov	r6, r7
 800f990:	42be      	cmp	r6, r7
 800f992:	d900      	bls.n	800f996 <__ssputs_r+0x86>
 800f994:	463e      	mov	r6, r7
 800f996:	6820      	ldr	r0, [r4, #0]
 800f998:	4632      	mov	r2, r6
 800f99a:	4641      	mov	r1, r8
 800f99c:	f7ff fd10 	bl	800f3c0 <memmove>
 800f9a0:	68a3      	ldr	r3, [r4, #8]
 800f9a2:	1b9b      	subs	r3, r3, r6
 800f9a4:	60a3      	str	r3, [r4, #8]
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	4433      	add	r3, r6
 800f9aa:	6023      	str	r3, [r4, #0]
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	e7db      	b.n	800f968 <__ssputs_r+0x58>
 800f9b0:	462a      	mov	r2, r5
 800f9b2:	f000 fe7b 	bl	80106ac <_realloc_r>
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d1e1      	bne.n	800f980 <__ssputs_r+0x70>
 800f9bc:	6921      	ldr	r1, [r4, #16]
 800f9be:	4650      	mov	r0, sl
 800f9c0:	f7ff fec6 	bl	800f750 <_free_r>
 800f9c4:	e7c7      	b.n	800f956 <__ssputs_r+0x46>
	...

0800f9c8 <_svfiprintf_r>:
 800f9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9cc:	4698      	mov	r8, r3
 800f9ce:	898b      	ldrh	r3, [r1, #12]
 800f9d0:	061b      	lsls	r3, r3, #24
 800f9d2:	b09d      	sub	sp, #116	; 0x74
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	460d      	mov	r5, r1
 800f9d8:	4614      	mov	r4, r2
 800f9da:	d50e      	bpl.n	800f9fa <_svfiprintf_r+0x32>
 800f9dc:	690b      	ldr	r3, [r1, #16]
 800f9de:	b963      	cbnz	r3, 800f9fa <_svfiprintf_r+0x32>
 800f9e0:	2140      	movs	r1, #64	; 0x40
 800f9e2:	f7ff ff21 	bl	800f828 <_malloc_r>
 800f9e6:	6028      	str	r0, [r5, #0]
 800f9e8:	6128      	str	r0, [r5, #16]
 800f9ea:	b920      	cbnz	r0, 800f9f6 <_svfiprintf_r+0x2e>
 800f9ec:	230c      	movs	r3, #12
 800f9ee:	603b      	str	r3, [r7, #0]
 800f9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f4:	e0d1      	b.n	800fb9a <_svfiprintf_r+0x1d2>
 800f9f6:	2340      	movs	r3, #64	; 0x40
 800f9f8:	616b      	str	r3, [r5, #20]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9fe:	2320      	movs	r3, #32
 800fa00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa08:	2330      	movs	r3, #48	; 0x30
 800fa0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fbb4 <_svfiprintf_r+0x1ec>
 800fa0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa12:	f04f 0901 	mov.w	r9, #1
 800fa16:	4623      	mov	r3, r4
 800fa18:	469a      	mov	sl, r3
 800fa1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa1e:	b10a      	cbz	r2, 800fa24 <_svfiprintf_r+0x5c>
 800fa20:	2a25      	cmp	r2, #37	; 0x25
 800fa22:	d1f9      	bne.n	800fa18 <_svfiprintf_r+0x50>
 800fa24:	ebba 0b04 	subs.w	fp, sl, r4
 800fa28:	d00b      	beq.n	800fa42 <_svfiprintf_r+0x7a>
 800fa2a:	465b      	mov	r3, fp
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4638      	mov	r0, r7
 800fa32:	f7ff ff6d 	bl	800f910 <__ssputs_r>
 800fa36:	3001      	adds	r0, #1
 800fa38:	f000 80aa 	beq.w	800fb90 <_svfiprintf_r+0x1c8>
 800fa3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa3e:	445a      	add	r2, fp
 800fa40:	9209      	str	r2, [sp, #36]	; 0x24
 800fa42:	f89a 3000 	ldrb.w	r3, [sl]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f000 80a2 	beq.w	800fb90 <_svfiprintf_r+0x1c8>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa56:	f10a 0a01 	add.w	sl, sl, #1
 800fa5a:	9304      	str	r3, [sp, #16]
 800fa5c:	9307      	str	r3, [sp, #28]
 800fa5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa62:	931a      	str	r3, [sp, #104]	; 0x68
 800fa64:	4654      	mov	r4, sl
 800fa66:	2205      	movs	r2, #5
 800fa68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa6c:	4851      	ldr	r0, [pc, #324]	; (800fbb4 <_svfiprintf_r+0x1ec>)
 800fa6e:	f7f0 fbbf 	bl	80001f0 <memchr>
 800fa72:	9a04      	ldr	r2, [sp, #16]
 800fa74:	b9d8      	cbnz	r0, 800faae <_svfiprintf_r+0xe6>
 800fa76:	06d0      	lsls	r0, r2, #27
 800fa78:	bf44      	itt	mi
 800fa7a:	2320      	movmi	r3, #32
 800fa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa80:	0711      	lsls	r1, r2, #28
 800fa82:	bf44      	itt	mi
 800fa84:	232b      	movmi	r3, #43	; 0x2b
 800fa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa90:	d015      	beq.n	800fabe <_svfiprintf_r+0xf6>
 800fa92:	9a07      	ldr	r2, [sp, #28]
 800fa94:	4654      	mov	r4, sl
 800fa96:	2000      	movs	r0, #0
 800fa98:	f04f 0c0a 	mov.w	ip, #10
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faa2:	3b30      	subs	r3, #48	; 0x30
 800faa4:	2b09      	cmp	r3, #9
 800faa6:	d94e      	bls.n	800fb46 <_svfiprintf_r+0x17e>
 800faa8:	b1b0      	cbz	r0, 800fad8 <_svfiprintf_r+0x110>
 800faaa:	9207      	str	r2, [sp, #28]
 800faac:	e014      	b.n	800fad8 <_svfiprintf_r+0x110>
 800faae:	eba0 0308 	sub.w	r3, r0, r8
 800fab2:	fa09 f303 	lsl.w	r3, r9, r3
 800fab6:	4313      	orrs	r3, r2
 800fab8:	9304      	str	r3, [sp, #16]
 800faba:	46a2      	mov	sl, r4
 800fabc:	e7d2      	b.n	800fa64 <_svfiprintf_r+0x9c>
 800fabe:	9b03      	ldr	r3, [sp, #12]
 800fac0:	1d19      	adds	r1, r3, #4
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	9103      	str	r1, [sp, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	bfbb      	ittet	lt
 800faca:	425b      	neglt	r3, r3
 800facc:	f042 0202 	orrlt.w	r2, r2, #2
 800fad0:	9307      	strge	r3, [sp, #28]
 800fad2:	9307      	strlt	r3, [sp, #28]
 800fad4:	bfb8      	it	lt
 800fad6:	9204      	strlt	r2, [sp, #16]
 800fad8:	7823      	ldrb	r3, [r4, #0]
 800fada:	2b2e      	cmp	r3, #46	; 0x2e
 800fadc:	d10c      	bne.n	800faf8 <_svfiprintf_r+0x130>
 800fade:	7863      	ldrb	r3, [r4, #1]
 800fae0:	2b2a      	cmp	r3, #42	; 0x2a
 800fae2:	d135      	bne.n	800fb50 <_svfiprintf_r+0x188>
 800fae4:	9b03      	ldr	r3, [sp, #12]
 800fae6:	1d1a      	adds	r2, r3, #4
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	9203      	str	r2, [sp, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	bfb8      	it	lt
 800faf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800faf4:	3402      	adds	r4, #2
 800faf6:	9305      	str	r3, [sp, #20]
 800faf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fbc4 <_svfiprintf_r+0x1fc>
 800fafc:	7821      	ldrb	r1, [r4, #0]
 800fafe:	2203      	movs	r2, #3
 800fb00:	4650      	mov	r0, sl
 800fb02:	f7f0 fb75 	bl	80001f0 <memchr>
 800fb06:	b140      	cbz	r0, 800fb1a <_svfiprintf_r+0x152>
 800fb08:	2340      	movs	r3, #64	; 0x40
 800fb0a:	eba0 000a 	sub.w	r0, r0, sl
 800fb0e:	fa03 f000 	lsl.w	r0, r3, r0
 800fb12:	9b04      	ldr	r3, [sp, #16]
 800fb14:	4303      	orrs	r3, r0
 800fb16:	3401      	adds	r4, #1
 800fb18:	9304      	str	r3, [sp, #16]
 800fb1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb1e:	4826      	ldr	r0, [pc, #152]	; (800fbb8 <_svfiprintf_r+0x1f0>)
 800fb20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb24:	2206      	movs	r2, #6
 800fb26:	f7f0 fb63 	bl	80001f0 <memchr>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d038      	beq.n	800fba0 <_svfiprintf_r+0x1d8>
 800fb2e:	4b23      	ldr	r3, [pc, #140]	; (800fbbc <_svfiprintf_r+0x1f4>)
 800fb30:	bb1b      	cbnz	r3, 800fb7a <_svfiprintf_r+0x1b2>
 800fb32:	9b03      	ldr	r3, [sp, #12]
 800fb34:	3307      	adds	r3, #7
 800fb36:	f023 0307 	bic.w	r3, r3, #7
 800fb3a:	3308      	adds	r3, #8
 800fb3c:	9303      	str	r3, [sp, #12]
 800fb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb40:	4433      	add	r3, r6
 800fb42:	9309      	str	r3, [sp, #36]	; 0x24
 800fb44:	e767      	b.n	800fa16 <_svfiprintf_r+0x4e>
 800fb46:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	2001      	movs	r0, #1
 800fb4e:	e7a5      	b.n	800fa9c <_svfiprintf_r+0xd4>
 800fb50:	2300      	movs	r3, #0
 800fb52:	3401      	adds	r4, #1
 800fb54:	9305      	str	r3, [sp, #20]
 800fb56:	4619      	mov	r1, r3
 800fb58:	f04f 0c0a 	mov.w	ip, #10
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb62:	3a30      	subs	r2, #48	; 0x30
 800fb64:	2a09      	cmp	r2, #9
 800fb66:	d903      	bls.n	800fb70 <_svfiprintf_r+0x1a8>
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d0c5      	beq.n	800faf8 <_svfiprintf_r+0x130>
 800fb6c:	9105      	str	r1, [sp, #20]
 800fb6e:	e7c3      	b.n	800faf8 <_svfiprintf_r+0x130>
 800fb70:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb74:	4604      	mov	r4, r0
 800fb76:	2301      	movs	r3, #1
 800fb78:	e7f0      	b.n	800fb5c <_svfiprintf_r+0x194>
 800fb7a:	ab03      	add	r3, sp, #12
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	462a      	mov	r2, r5
 800fb80:	4b0f      	ldr	r3, [pc, #60]	; (800fbc0 <_svfiprintf_r+0x1f8>)
 800fb82:	a904      	add	r1, sp, #16
 800fb84:	4638      	mov	r0, r7
 800fb86:	f3af 8000 	nop.w
 800fb8a:	1c42      	adds	r2, r0, #1
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	d1d6      	bne.n	800fb3e <_svfiprintf_r+0x176>
 800fb90:	89ab      	ldrh	r3, [r5, #12]
 800fb92:	065b      	lsls	r3, r3, #25
 800fb94:	f53f af2c 	bmi.w	800f9f0 <_svfiprintf_r+0x28>
 800fb98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb9a:	b01d      	add	sp, #116	; 0x74
 800fb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba0:	ab03      	add	r3, sp, #12
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	462a      	mov	r2, r5
 800fba6:	4b06      	ldr	r3, [pc, #24]	; (800fbc0 <_svfiprintf_r+0x1f8>)
 800fba8:	a904      	add	r1, sp, #16
 800fbaa:	4638      	mov	r0, r7
 800fbac:	f000 f9d4 	bl	800ff58 <_printf_i>
 800fbb0:	e7eb      	b.n	800fb8a <_svfiprintf_r+0x1c2>
 800fbb2:	bf00      	nop
 800fbb4:	08013488 	.word	0x08013488
 800fbb8:	08013492 	.word	0x08013492
 800fbbc:	00000000 	.word	0x00000000
 800fbc0:	0800f911 	.word	0x0800f911
 800fbc4:	0801348e 	.word	0x0801348e

0800fbc8 <__sfputc_r>:
 800fbc8:	6893      	ldr	r3, [r2, #8]
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	b410      	push	{r4}
 800fbd0:	6093      	str	r3, [r2, #8]
 800fbd2:	da08      	bge.n	800fbe6 <__sfputc_r+0x1e>
 800fbd4:	6994      	ldr	r4, [r2, #24]
 800fbd6:	42a3      	cmp	r3, r4
 800fbd8:	db01      	blt.n	800fbde <__sfputc_r+0x16>
 800fbda:	290a      	cmp	r1, #10
 800fbdc:	d103      	bne.n	800fbe6 <__sfputc_r+0x1e>
 800fbde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbe2:	f000 bb33 	b.w	801024c <__swbuf_r>
 800fbe6:	6813      	ldr	r3, [r2, #0]
 800fbe8:	1c58      	adds	r0, r3, #1
 800fbea:	6010      	str	r0, [r2, #0]
 800fbec:	7019      	strb	r1, [r3, #0]
 800fbee:	4608      	mov	r0, r1
 800fbf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <__sfputs_r>:
 800fbf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbf8:	4606      	mov	r6, r0
 800fbfa:	460f      	mov	r7, r1
 800fbfc:	4614      	mov	r4, r2
 800fbfe:	18d5      	adds	r5, r2, r3
 800fc00:	42ac      	cmp	r4, r5
 800fc02:	d101      	bne.n	800fc08 <__sfputs_r+0x12>
 800fc04:	2000      	movs	r0, #0
 800fc06:	e007      	b.n	800fc18 <__sfputs_r+0x22>
 800fc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc0c:	463a      	mov	r2, r7
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f7ff ffda 	bl	800fbc8 <__sfputc_r>
 800fc14:	1c43      	adds	r3, r0, #1
 800fc16:	d1f3      	bne.n	800fc00 <__sfputs_r+0xa>
 800fc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc1c <_vfiprintf_r>:
 800fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	460d      	mov	r5, r1
 800fc22:	b09d      	sub	sp, #116	; 0x74
 800fc24:	4614      	mov	r4, r2
 800fc26:	4698      	mov	r8, r3
 800fc28:	4606      	mov	r6, r0
 800fc2a:	b118      	cbz	r0, 800fc34 <_vfiprintf_r+0x18>
 800fc2c:	6983      	ldr	r3, [r0, #24]
 800fc2e:	b90b      	cbnz	r3, 800fc34 <_vfiprintf_r+0x18>
 800fc30:	f7ff fcd4 	bl	800f5dc <__sinit>
 800fc34:	4b89      	ldr	r3, [pc, #548]	; (800fe5c <_vfiprintf_r+0x240>)
 800fc36:	429d      	cmp	r5, r3
 800fc38:	d11b      	bne.n	800fc72 <_vfiprintf_r+0x56>
 800fc3a:	6875      	ldr	r5, [r6, #4]
 800fc3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc3e:	07d9      	lsls	r1, r3, #31
 800fc40:	d405      	bmi.n	800fc4e <_vfiprintf_r+0x32>
 800fc42:	89ab      	ldrh	r3, [r5, #12]
 800fc44:	059a      	lsls	r2, r3, #22
 800fc46:	d402      	bmi.n	800fc4e <_vfiprintf_r+0x32>
 800fc48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc4a:	f7ff fd77 	bl	800f73c <__retarget_lock_acquire_recursive>
 800fc4e:	89ab      	ldrh	r3, [r5, #12]
 800fc50:	071b      	lsls	r3, r3, #28
 800fc52:	d501      	bpl.n	800fc58 <_vfiprintf_r+0x3c>
 800fc54:	692b      	ldr	r3, [r5, #16]
 800fc56:	b9eb      	cbnz	r3, 800fc94 <_vfiprintf_r+0x78>
 800fc58:	4629      	mov	r1, r5
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f000 fb5a 	bl	8010314 <__swsetup_r>
 800fc60:	b1c0      	cbz	r0, 800fc94 <_vfiprintf_r+0x78>
 800fc62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc64:	07dc      	lsls	r4, r3, #31
 800fc66:	d50e      	bpl.n	800fc86 <_vfiprintf_r+0x6a>
 800fc68:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6c:	b01d      	add	sp, #116	; 0x74
 800fc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc72:	4b7b      	ldr	r3, [pc, #492]	; (800fe60 <_vfiprintf_r+0x244>)
 800fc74:	429d      	cmp	r5, r3
 800fc76:	d101      	bne.n	800fc7c <_vfiprintf_r+0x60>
 800fc78:	68b5      	ldr	r5, [r6, #8]
 800fc7a:	e7df      	b.n	800fc3c <_vfiprintf_r+0x20>
 800fc7c:	4b79      	ldr	r3, [pc, #484]	; (800fe64 <_vfiprintf_r+0x248>)
 800fc7e:	429d      	cmp	r5, r3
 800fc80:	bf08      	it	eq
 800fc82:	68f5      	ldreq	r5, [r6, #12]
 800fc84:	e7da      	b.n	800fc3c <_vfiprintf_r+0x20>
 800fc86:	89ab      	ldrh	r3, [r5, #12]
 800fc88:	0598      	lsls	r0, r3, #22
 800fc8a:	d4ed      	bmi.n	800fc68 <_vfiprintf_r+0x4c>
 800fc8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc8e:	f7ff fd56 	bl	800f73e <__retarget_lock_release_recursive>
 800fc92:	e7e9      	b.n	800fc68 <_vfiprintf_r+0x4c>
 800fc94:	2300      	movs	r3, #0
 800fc96:	9309      	str	r3, [sp, #36]	; 0x24
 800fc98:	2320      	movs	r3, #32
 800fc9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fca2:	2330      	movs	r3, #48	; 0x30
 800fca4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe68 <_vfiprintf_r+0x24c>
 800fca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcac:	f04f 0901 	mov.w	r9, #1
 800fcb0:	4623      	mov	r3, r4
 800fcb2:	469a      	mov	sl, r3
 800fcb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcb8:	b10a      	cbz	r2, 800fcbe <_vfiprintf_r+0xa2>
 800fcba:	2a25      	cmp	r2, #37	; 0x25
 800fcbc:	d1f9      	bne.n	800fcb2 <_vfiprintf_r+0x96>
 800fcbe:	ebba 0b04 	subs.w	fp, sl, r4
 800fcc2:	d00b      	beq.n	800fcdc <_vfiprintf_r+0xc0>
 800fcc4:	465b      	mov	r3, fp
 800fcc6:	4622      	mov	r2, r4
 800fcc8:	4629      	mov	r1, r5
 800fcca:	4630      	mov	r0, r6
 800fccc:	f7ff ff93 	bl	800fbf6 <__sfputs_r>
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f000 80aa 	beq.w	800fe2a <_vfiprintf_r+0x20e>
 800fcd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcd8:	445a      	add	r2, fp
 800fcda:	9209      	str	r2, [sp, #36]	; 0x24
 800fcdc:	f89a 3000 	ldrb.w	r3, [sl]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f000 80a2 	beq.w	800fe2a <_vfiprintf_r+0x20e>
 800fce6:	2300      	movs	r3, #0
 800fce8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcf0:	f10a 0a01 	add.w	sl, sl, #1
 800fcf4:	9304      	str	r3, [sp, #16]
 800fcf6:	9307      	str	r3, [sp, #28]
 800fcf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcfc:	931a      	str	r3, [sp, #104]	; 0x68
 800fcfe:	4654      	mov	r4, sl
 800fd00:	2205      	movs	r2, #5
 800fd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd06:	4858      	ldr	r0, [pc, #352]	; (800fe68 <_vfiprintf_r+0x24c>)
 800fd08:	f7f0 fa72 	bl	80001f0 <memchr>
 800fd0c:	9a04      	ldr	r2, [sp, #16]
 800fd0e:	b9d8      	cbnz	r0, 800fd48 <_vfiprintf_r+0x12c>
 800fd10:	06d1      	lsls	r1, r2, #27
 800fd12:	bf44      	itt	mi
 800fd14:	2320      	movmi	r3, #32
 800fd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd1a:	0713      	lsls	r3, r2, #28
 800fd1c:	bf44      	itt	mi
 800fd1e:	232b      	movmi	r3, #43	; 0x2b
 800fd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd24:	f89a 3000 	ldrb.w	r3, [sl]
 800fd28:	2b2a      	cmp	r3, #42	; 0x2a
 800fd2a:	d015      	beq.n	800fd58 <_vfiprintf_r+0x13c>
 800fd2c:	9a07      	ldr	r2, [sp, #28]
 800fd2e:	4654      	mov	r4, sl
 800fd30:	2000      	movs	r0, #0
 800fd32:	f04f 0c0a 	mov.w	ip, #10
 800fd36:	4621      	mov	r1, r4
 800fd38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd3c:	3b30      	subs	r3, #48	; 0x30
 800fd3e:	2b09      	cmp	r3, #9
 800fd40:	d94e      	bls.n	800fde0 <_vfiprintf_r+0x1c4>
 800fd42:	b1b0      	cbz	r0, 800fd72 <_vfiprintf_r+0x156>
 800fd44:	9207      	str	r2, [sp, #28]
 800fd46:	e014      	b.n	800fd72 <_vfiprintf_r+0x156>
 800fd48:	eba0 0308 	sub.w	r3, r0, r8
 800fd4c:	fa09 f303 	lsl.w	r3, r9, r3
 800fd50:	4313      	orrs	r3, r2
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	46a2      	mov	sl, r4
 800fd56:	e7d2      	b.n	800fcfe <_vfiprintf_r+0xe2>
 800fd58:	9b03      	ldr	r3, [sp, #12]
 800fd5a:	1d19      	adds	r1, r3, #4
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	9103      	str	r1, [sp, #12]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	bfbb      	ittet	lt
 800fd64:	425b      	neglt	r3, r3
 800fd66:	f042 0202 	orrlt.w	r2, r2, #2
 800fd6a:	9307      	strge	r3, [sp, #28]
 800fd6c:	9307      	strlt	r3, [sp, #28]
 800fd6e:	bfb8      	it	lt
 800fd70:	9204      	strlt	r2, [sp, #16]
 800fd72:	7823      	ldrb	r3, [r4, #0]
 800fd74:	2b2e      	cmp	r3, #46	; 0x2e
 800fd76:	d10c      	bne.n	800fd92 <_vfiprintf_r+0x176>
 800fd78:	7863      	ldrb	r3, [r4, #1]
 800fd7a:	2b2a      	cmp	r3, #42	; 0x2a
 800fd7c:	d135      	bne.n	800fdea <_vfiprintf_r+0x1ce>
 800fd7e:	9b03      	ldr	r3, [sp, #12]
 800fd80:	1d1a      	adds	r2, r3, #4
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	9203      	str	r2, [sp, #12]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	bfb8      	it	lt
 800fd8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd8e:	3402      	adds	r4, #2
 800fd90:	9305      	str	r3, [sp, #20]
 800fd92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe78 <_vfiprintf_r+0x25c>
 800fd96:	7821      	ldrb	r1, [r4, #0]
 800fd98:	2203      	movs	r2, #3
 800fd9a:	4650      	mov	r0, sl
 800fd9c:	f7f0 fa28 	bl	80001f0 <memchr>
 800fda0:	b140      	cbz	r0, 800fdb4 <_vfiprintf_r+0x198>
 800fda2:	2340      	movs	r3, #64	; 0x40
 800fda4:	eba0 000a 	sub.w	r0, r0, sl
 800fda8:	fa03 f000 	lsl.w	r0, r3, r0
 800fdac:	9b04      	ldr	r3, [sp, #16]
 800fdae:	4303      	orrs	r3, r0
 800fdb0:	3401      	adds	r4, #1
 800fdb2:	9304      	str	r3, [sp, #16]
 800fdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb8:	482c      	ldr	r0, [pc, #176]	; (800fe6c <_vfiprintf_r+0x250>)
 800fdba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdbe:	2206      	movs	r2, #6
 800fdc0:	f7f0 fa16 	bl	80001f0 <memchr>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d03f      	beq.n	800fe48 <_vfiprintf_r+0x22c>
 800fdc8:	4b29      	ldr	r3, [pc, #164]	; (800fe70 <_vfiprintf_r+0x254>)
 800fdca:	bb1b      	cbnz	r3, 800fe14 <_vfiprintf_r+0x1f8>
 800fdcc:	9b03      	ldr	r3, [sp, #12]
 800fdce:	3307      	adds	r3, #7
 800fdd0:	f023 0307 	bic.w	r3, r3, #7
 800fdd4:	3308      	adds	r3, #8
 800fdd6:	9303      	str	r3, [sp, #12]
 800fdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdda:	443b      	add	r3, r7
 800fddc:	9309      	str	r3, [sp, #36]	; 0x24
 800fdde:	e767      	b.n	800fcb0 <_vfiprintf_r+0x94>
 800fde0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fde4:	460c      	mov	r4, r1
 800fde6:	2001      	movs	r0, #1
 800fde8:	e7a5      	b.n	800fd36 <_vfiprintf_r+0x11a>
 800fdea:	2300      	movs	r3, #0
 800fdec:	3401      	adds	r4, #1
 800fdee:	9305      	str	r3, [sp, #20]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	f04f 0c0a 	mov.w	ip, #10
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdfc:	3a30      	subs	r2, #48	; 0x30
 800fdfe:	2a09      	cmp	r2, #9
 800fe00:	d903      	bls.n	800fe0a <_vfiprintf_r+0x1ee>
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d0c5      	beq.n	800fd92 <_vfiprintf_r+0x176>
 800fe06:	9105      	str	r1, [sp, #20]
 800fe08:	e7c3      	b.n	800fd92 <_vfiprintf_r+0x176>
 800fe0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe0e:	4604      	mov	r4, r0
 800fe10:	2301      	movs	r3, #1
 800fe12:	e7f0      	b.n	800fdf6 <_vfiprintf_r+0x1da>
 800fe14:	ab03      	add	r3, sp, #12
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	462a      	mov	r2, r5
 800fe1a:	4b16      	ldr	r3, [pc, #88]	; (800fe74 <_vfiprintf_r+0x258>)
 800fe1c:	a904      	add	r1, sp, #16
 800fe1e:	4630      	mov	r0, r6
 800fe20:	f3af 8000 	nop.w
 800fe24:	4607      	mov	r7, r0
 800fe26:	1c78      	adds	r0, r7, #1
 800fe28:	d1d6      	bne.n	800fdd8 <_vfiprintf_r+0x1bc>
 800fe2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe2c:	07d9      	lsls	r1, r3, #31
 800fe2e:	d405      	bmi.n	800fe3c <_vfiprintf_r+0x220>
 800fe30:	89ab      	ldrh	r3, [r5, #12]
 800fe32:	059a      	lsls	r2, r3, #22
 800fe34:	d402      	bmi.n	800fe3c <_vfiprintf_r+0x220>
 800fe36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe38:	f7ff fc81 	bl	800f73e <__retarget_lock_release_recursive>
 800fe3c:	89ab      	ldrh	r3, [r5, #12]
 800fe3e:	065b      	lsls	r3, r3, #25
 800fe40:	f53f af12 	bmi.w	800fc68 <_vfiprintf_r+0x4c>
 800fe44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe46:	e711      	b.n	800fc6c <_vfiprintf_r+0x50>
 800fe48:	ab03      	add	r3, sp, #12
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	462a      	mov	r2, r5
 800fe4e:	4b09      	ldr	r3, [pc, #36]	; (800fe74 <_vfiprintf_r+0x258>)
 800fe50:	a904      	add	r1, sp, #16
 800fe52:	4630      	mov	r0, r6
 800fe54:	f000 f880 	bl	800ff58 <_printf_i>
 800fe58:	e7e4      	b.n	800fe24 <_vfiprintf_r+0x208>
 800fe5a:	bf00      	nop
 800fe5c:	08013448 	.word	0x08013448
 800fe60:	08013468 	.word	0x08013468
 800fe64:	08013428 	.word	0x08013428
 800fe68:	08013488 	.word	0x08013488
 800fe6c:	08013492 	.word	0x08013492
 800fe70:	00000000 	.word	0x00000000
 800fe74:	0800fbf7 	.word	0x0800fbf7
 800fe78:	0801348e 	.word	0x0801348e

0800fe7c <_printf_common>:
 800fe7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe80:	4616      	mov	r6, r2
 800fe82:	4699      	mov	r9, r3
 800fe84:	688a      	ldr	r2, [r1, #8]
 800fe86:	690b      	ldr	r3, [r1, #16]
 800fe88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	bfb8      	it	lt
 800fe90:	4613      	movlt	r3, r2
 800fe92:	6033      	str	r3, [r6, #0]
 800fe94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe98:	4607      	mov	r7, r0
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	b10a      	cbz	r2, 800fea2 <_printf_common+0x26>
 800fe9e:	3301      	adds	r3, #1
 800fea0:	6033      	str	r3, [r6, #0]
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	0699      	lsls	r1, r3, #26
 800fea6:	bf42      	ittt	mi
 800fea8:	6833      	ldrmi	r3, [r6, #0]
 800feaa:	3302      	addmi	r3, #2
 800feac:	6033      	strmi	r3, [r6, #0]
 800feae:	6825      	ldr	r5, [r4, #0]
 800feb0:	f015 0506 	ands.w	r5, r5, #6
 800feb4:	d106      	bne.n	800fec4 <_printf_common+0x48>
 800feb6:	f104 0a19 	add.w	sl, r4, #25
 800feba:	68e3      	ldr	r3, [r4, #12]
 800febc:	6832      	ldr	r2, [r6, #0]
 800febe:	1a9b      	subs	r3, r3, r2
 800fec0:	42ab      	cmp	r3, r5
 800fec2:	dc26      	bgt.n	800ff12 <_printf_common+0x96>
 800fec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fec8:	1e13      	subs	r3, r2, #0
 800feca:	6822      	ldr	r2, [r4, #0]
 800fecc:	bf18      	it	ne
 800fece:	2301      	movne	r3, #1
 800fed0:	0692      	lsls	r2, r2, #26
 800fed2:	d42b      	bmi.n	800ff2c <_printf_common+0xb0>
 800fed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fed8:	4649      	mov	r1, r9
 800feda:	4638      	mov	r0, r7
 800fedc:	47c0      	blx	r8
 800fede:	3001      	adds	r0, #1
 800fee0:	d01e      	beq.n	800ff20 <_printf_common+0xa4>
 800fee2:	6823      	ldr	r3, [r4, #0]
 800fee4:	68e5      	ldr	r5, [r4, #12]
 800fee6:	6832      	ldr	r2, [r6, #0]
 800fee8:	f003 0306 	and.w	r3, r3, #6
 800feec:	2b04      	cmp	r3, #4
 800feee:	bf08      	it	eq
 800fef0:	1aad      	subeq	r5, r5, r2
 800fef2:	68a3      	ldr	r3, [r4, #8]
 800fef4:	6922      	ldr	r2, [r4, #16]
 800fef6:	bf0c      	ite	eq
 800fef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fefc:	2500      	movne	r5, #0
 800fefe:	4293      	cmp	r3, r2
 800ff00:	bfc4      	itt	gt
 800ff02:	1a9b      	subgt	r3, r3, r2
 800ff04:	18ed      	addgt	r5, r5, r3
 800ff06:	2600      	movs	r6, #0
 800ff08:	341a      	adds	r4, #26
 800ff0a:	42b5      	cmp	r5, r6
 800ff0c:	d11a      	bne.n	800ff44 <_printf_common+0xc8>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	e008      	b.n	800ff24 <_printf_common+0xa8>
 800ff12:	2301      	movs	r3, #1
 800ff14:	4652      	mov	r2, sl
 800ff16:	4649      	mov	r1, r9
 800ff18:	4638      	mov	r0, r7
 800ff1a:	47c0      	blx	r8
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	d103      	bne.n	800ff28 <_printf_common+0xac>
 800ff20:	f04f 30ff 	mov.w	r0, #4294967295
 800ff24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff28:	3501      	adds	r5, #1
 800ff2a:	e7c6      	b.n	800feba <_printf_common+0x3e>
 800ff2c:	18e1      	adds	r1, r4, r3
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	2030      	movs	r0, #48	; 0x30
 800ff32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff36:	4422      	add	r2, r4
 800ff38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff40:	3302      	adds	r3, #2
 800ff42:	e7c7      	b.n	800fed4 <_printf_common+0x58>
 800ff44:	2301      	movs	r3, #1
 800ff46:	4622      	mov	r2, r4
 800ff48:	4649      	mov	r1, r9
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	47c0      	blx	r8
 800ff4e:	3001      	adds	r0, #1
 800ff50:	d0e6      	beq.n	800ff20 <_printf_common+0xa4>
 800ff52:	3601      	adds	r6, #1
 800ff54:	e7d9      	b.n	800ff0a <_printf_common+0x8e>
	...

0800ff58 <_printf_i>:
 800ff58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff5c:	7e0f      	ldrb	r7, [r1, #24]
 800ff5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff60:	2f78      	cmp	r7, #120	; 0x78
 800ff62:	4691      	mov	r9, r2
 800ff64:	4680      	mov	r8, r0
 800ff66:	460c      	mov	r4, r1
 800ff68:	469a      	mov	sl, r3
 800ff6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff6e:	d807      	bhi.n	800ff80 <_printf_i+0x28>
 800ff70:	2f62      	cmp	r7, #98	; 0x62
 800ff72:	d80a      	bhi.n	800ff8a <_printf_i+0x32>
 800ff74:	2f00      	cmp	r7, #0
 800ff76:	f000 80d8 	beq.w	801012a <_printf_i+0x1d2>
 800ff7a:	2f58      	cmp	r7, #88	; 0x58
 800ff7c:	f000 80a3 	beq.w	80100c6 <_printf_i+0x16e>
 800ff80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff88:	e03a      	b.n	8010000 <_printf_i+0xa8>
 800ff8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff8e:	2b15      	cmp	r3, #21
 800ff90:	d8f6      	bhi.n	800ff80 <_printf_i+0x28>
 800ff92:	a101      	add	r1, pc, #4	; (adr r1, 800ff98 <_printf_i+0x40>)
 800ff94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff98:	0800fff1 	.word	0x0800fff1
 800ff9c:	08010005 	.word	0x08010005
 800ffa0:	0800ff81 	.word	0x0800ff81
 800ffa4:	0800ff81 	.word	0x0800ff81
 800ffa8:	0800ff81 	.word	0x0800ff81
 800ffac:	0800ff81 	.word	0x0800ff81
 800ffb0:	08010005 	.word	0x08010005
 800ffb4:	0800ff81 	.word	0x0800ff81
 800ffb8:	0800ff81 	.word	0x0800ff81
 800ffbc:	0800ff81 	.word	0x0800ff81
 800ffc0:	0800ff81 	.word	0x0800ff81
 800ffc4:	08010111 	.word	0x08010111
 800ffc8:	08010035 	.word	0x08010035
 800ffcc:	080100f3 	.word	0x080100f3
 800ffd0:	0800ff81 	.word	0x0800ff81
 800ffd4:	0800ff81 	.word	0x0800ff81
 800ffd8:	08010133 	.word	0x08010133
 800ffdc:	0800ff81 	.word	0x0800ff81
 800ffe0:	08010035 	.word	0x08010035
 800ffe4:	0800ff81 	.word	0x0800ff81
 800ffe8:	0800ff81 	.word	0x0800ff81
 800ffec:	080100fb 	.word	0x080100fb
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	1d1a      	adds	r2, r3, #4
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	602a      	str	r2, [r5, #0]
 800fff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010000:	2301      	movs	r3, #1
 8010002:	e0a3      	b.n	801014c <_printf_i+0x1f4>
 8010004:	6820      	ldr	r0, [r4, #0]
 8010006:	6829      	ldr	r1, [r5, #0]
 8010008:	0606      	lsls	r6, r0, #24
 801000a:	f101 0304 	add.w	r3, r1, #4
 801000e:	d50a      	bpl.n	8010026 <_printf_i+0xce>
 8010010:	680e      	ldr	r6, [r1, #0]
 8010012:	602b      	str	r3, [r5, #0]
 8010014:	2e00      	cmp	r6, #0
 8010016:	da03      	bge.n	8010020 <_printf_i+0xc8>
 8010018:	232d      	movs	r3, #45	; 0x2d
 801001a:	4276      	negs	r6, r6
 801001c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010020:	485e      	ldr	r0, [pc, #376]	; (801019c <_printf_i+0x244>)
 8010022:	230a      	movs	r3, #10
 8010024:	e019      	b.n	801005a <_printf_i+0x102>
 8010026:	680e      	ldr	r6, [r1, #0]
 8010028:	602b      	str	r3, [r5, #0]
 801002a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801002e:	bf18      	it	ne
 8010030:	b236      	sxthne	r6, r6
 8010032:	e7ef      	b.n	8010014 <_printf_i+0xbc>
 8010034:	682b      	ldr	r3, [r5, #0]
 8010036:	6820      	ldr	r0, [r4, #0]
 8010038:	1d19      	adds	r1, r3, #4
 801003a:	6029      	str	r1, [r5, #0]
 801003c:	0601      	lsls	r1, r0, #24
 801003e:	d501      	bpl.n	8010044 <_printf_i+0xec>
 8010040:	681e      	ldr	r6, [r3, #0]
 8010042:	e002      	b.n	801004a <_printf_i+0xf2>
 8010044:	0646      	lsls	r6, r0, #25
 8010046:	d5fb      	bpl.n	8010040 <_printf_i+0xe8>
 8010048:	881e      	ldrh	r6, [r3, #0]
 801004a:	4854      	ldr	r0, [pc, #336]	; (801019c <_printf_i+0x244>)
 801004c:	2f6f      	cmp	r7, #111	; 0x6f
 801004e:	bf0c      	ite	eq
 8010050:	2308      	moveq	r3, #8
 8010052:	230a      	movne	r3, #10
 8010054:	2100      	movs	r1, #0
 8010056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801005a:	6865      	ldr	r5, [r4, #4]
 801005c:	60a5      	str	r5, [r4, #8]
 801005e:	2d00      	cmp	r5, #0
 8010060:	bfa2      	ittt	ge
 8010062:	6821      	ldrge	r1, [r4, #0]
 8010064:	f021 0104 	bicge.w	r1, r1, #4
 8010068:	6021      	strge	r1, [r4, #0]
 801006a:	b90e      	cbnz	r6, 8010070 <_printf_i+0x118>
 801006c:	2d00      	cmp	r5, #0
 801006e:	d04d      	beq.n	801010c <_printf_i+0x1b4>
 8010070:	4615      	mov	r5, r2
 8010072:	fbb6 f1f3 	udiv	r1, r6, r3
 8010076:	fb03 6711 	mls	r7, r3, r1, r6
 801007a:	5dc7      	ldrb	r7, [r0, r7]
 801007c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010080:	4637      	mov	r7, r6
 8010082:	42bb      	cmp	r3, r7
 8010084:	460e      	mov	r6, r1
 8010086:	d9f4      	bls.n	8010072 <_printf_i+0x11a>
 8010088:	2b08      	cmp	r3, #8
 801008a:	d10b      	bne.n	80100a4 <_printf_i+0x14c>
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	07de      	lsls	r6, r3, #31
 8010090:	d508      	bpl.n	80100a4 <_printf_i+0x14c>
 8010092:	6923      	ldr	r3, [r4, #16]
 8010094:	6861      	ldr	r1, [r4, #4]
 8010096:	4299      	cmp	r1, r3
 8010098:	bfde      	ittt	le
 801009a:	2330      	movle	r3, #48	; 0x30
 801009c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100a4:	1b52      	subs	r2, r2, r5
 80100a6:	6122      	str	r2, [r4, #16]
 80100a8:	f8cd a000 	str.w	sl, [sp]
 80100ac:	464b      	mov	r3, r9
 80100ae:	aa03      	add	r2, sp, #12
 80100b0:	4621      	mov	r1, r4
 80100b2:	4640      	mov	r0, r8
 80100b4:	f7ff fee2 	bl	800fe7c <_printf_common>
 80100b8:	3001      	adds	r0, #1
 80100ba:	d14c      	bne.n	8010156 <_printf_i+0x1fe>
 80100bc:	f04f 30ff 	mov.w	r0, #4294967295
 80100c0:	b004      	add	sp, #16
 80100c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100c6:	4835      	ldr	r0, [pc, #212]	; (801019c <_printf_i+0x244>)
 80100c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80100cc:	6829      	ldr	r1, [r5, #0]
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80100d4:	6029      	str	r1, [r5, #0]
 80100d6:	061d      	lsls	r5, r3, #24
 80100d8:	d514      	bpl.n	8010104 <_printf_i+0x1ac>
 80100da:	07df      	lsls	r7, r3, #31
 80100dc:	bf44      	itt	mi
 80100de:	f043 0320 	orrmi.w	r3, r3, #32
 80100e2:	6023      	strmi	r3, [r4, #0]
 80100e4:	b91e      	cbnz	r6, 80100ee <_printf_i+0x196>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	f023 0320 	bic.w	r3, r3, #32
 80100ec:	6023      	str	r3, [r4, #0]
 80100ee:	2310      	movs	r3, #16
 80100f0:	e7b0      	b.n	8010054 <_printf_i+0xfc>
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	f043 0320 	orr.w	r3, r3, #32
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	2378      	movs	r3, #120	; 0x78
 80100fc:	4828      	ldr	r0, [pc, #160]	; (80101a0 <_printf_i+0x248>)
 80100fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010102:	e7e3      	b.n	80100cc <_printf_i+0x174>
 8010104:	0659      	lsls	r1, r3, #25
 8010106:	bf48      	it	mi
 8010108:	b2b6      	uxthmi	r6, r6
 801010a:	e7e6      	b.n	80100da <_printf_i+0x182>
 801010c:	4615      	mov	r5, r2
 801010e:	e7bb      	b.n	8010088 <_printf_i+0x130>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	6826      	ldr	r6, [r4, #0]
 8010114:	6961      	ldr	r1, [r4, #20]
 8010116:	1d18      	adds	r0, r3, #4
 8010118:	6028      	str	r0, [r5, #0]
 801011a:	0635      	lsls	r5, r6, #24
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	d501      	bpl.n	8010124 <_printf_i+0x1cc>
 8010120:	6019      	str	r1, [r3, #0]
 8010122:	e002      	b.n	801012a <_printf_i+0x1d2>
 8010124:	0670      	lsls	r0, r6, #25
 8010126:	d5fb      	bpl.n	8010120 <_printf_i+0x1c8>
 8010128:	8019      	strh	r1, [r3, #0]
 801012a:	2300      	movs	r3, #0
 801012c:	6123      	str	r3, [r4, #16]
 801012e:	4615      	mov	r5, r2
 8010130:	e7ba      	b.n	80100a8 <_printf_i+0x150>
 8010132:	682b      	ldr	r3, [r5, #0]
 8010134:	1d1a      	adds	r2, r3, #4
 8010136:	602a      	str	r2, [r5, #0]
 8010138:	681d      	ldr	r5, [r3, #0]
 801013a:	6862      	ldr	r2, [r4, #4]
 801013c:	2100      	movs	r1, #0
 801013e:	4628      	mov	r0, r5
 8010140:	f7f0 f856 	bl	80001f0 <memchr>
 8010144:	b108      	cbz	r0, 801014a <_printf_i+0x1f2>
 8010146:	1b40      	subs	r0, r0, r5
 8010148:	6060      	str	r0, [r4, #4]
 801014a:	6863      	ldr	r3, [r4, #4]
 801014c:	6123      	str	r3, [r4, #16]
 801014e:	2300      	movs	r3, #0
 8010150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010154:	e7a8      	b.n	80100a8 <_printf_i+0x150>
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	462a      	mov	r2, r5
 801015a:	4649      	mov	r1, r9
 801015c:	4640      	mov	r0, r8
 801015e:	47d0      	blx	sl
 8010160:	3001      	adds	r0, #1
 8010162:	d0ab      	beq.n	80100bc <_printf_i+0x164>
 8010164:	6823      	ldr	r3, [r4, #0]
 8010166:	079b      	lsls	r3, r3, #30
 8010168:	d413      	bmi.n	8010192 <_printf_i+0x23a>
 801016a:	68e0      	ldr	r0, [r4, #12]
 801016c:	9b03      	ldr	r3, [sp, #12]
 801016e:	4298      	cmp	r0, r3
 8010170:	bfb8      	it	lt
 8010172:	4618      	movlt	r0, r3
 8010174:	e7a4      	b.n	80100c0 <_printf_i+0x168>
 8010176:	2301      	movs	r3, #1
 8010178:	4632      	mov	r2, r6
 801017a:	4649      	mov	r1, r9
 801017c:	4640      	mov	r0, r8
 801017e:	47d0      	blx	sl
 8010180:	3001      	adds	r0, #1
 8010182:	d09b      	beq.n	80100bc <_printf_i+0x164>
 8010184:	3501      	adds	r5, #1
 8010186:	68e3      	ldr	r3, [r4, #12]
 8010188:	9903      	ldr	r1, [sp, #12]
 801018a:	1a5b      	subs	r3, r3, r1
 801018c:	42ab      	cmp	r3, r5
 801018e:	dcf2      	bgt.n	8010176 <_printf_i+0x21e>
 8010190:	e7eb      	b.n	801016a <_printf_i+0x212>
 8010192:	2500      	movs	r5, #0
 8010194:	f104 0619 	add.w	r6, r4, #25
 8010198:	e7f5      	b.n	8010186 <_printf_i+0x22e>
 801019a:	bf00      	nop
 801019c:	08013499 	.word	0x08013499
 80101a0:	080134aa 	.word	0x080134aa

080101a4 <_sbrk_r>:
 80101a4:	b538      	push	{r3, r4, r5, lr}
 80101a6:	4d06      	ldr	r5, [pc, #24]	; (80101c0 <_sbrk_r+0x1c>)
 80101a8:	2300      	movs	r3, #0
 80101aa:	4604      	mov	r4, r0
 80101ac:	4608      	mov	r0, r1
 80101ae:	602b      	str	r3, [r5, #0]
 80101b0:	f7f0 fcd4 	bl	8000b5c <_sbrk>
 80101b4:	1c43      	adds	r3, r0, #1
 80101b6:	d102      	bne.n	80101be <_sbrk_r+0x1a>
 80101b8:	682b      	ldr	r3, [r5, #0]
 80101ba:	b103      	cbz	r3, 80101be <_sbrk_r+0x1a>
 80101bc:	6023      	str	r3, [r4, #0]
 80101be:	bd38      	pop	{r3, r4, r5, pc}
 80101c0:	2000a5c4 	.word	0x2000a5c4

080101c4 <__sread>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	460c      	mov	r4, r1
 80101c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101cc:	f000 fa9e 	bl	801070c <_read_r>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	bfab      	itete	ge
 80101d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80101d6:	89a3      	ldrhlt	r3, [r4, #12]
 80101d8:	181b      	addge	r3, r3, r0
 80101da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80101de:	bfac      	ite	ge
 80101e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80101e2:	81a3      	strhlt	r3, [r4, #12]
 80101e4:	bd10      	pop	{r4, pc}

080101e6 <__swrite>:
 80101e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ea:	461f      	mov	r7, r3
 80101ec:	898b      	ldrh	r3, [r1, #12]
 80101ee:	05db      	lsls	r3, r3, #23
 80101f0:	4605      	mov	r5, r0
 80101f2:	460c      	mov	r4, r1
 80101f4:	4616      	mov	r6, r2
 80101f6:	d505      	bpl.n	8010204 <__swrite+0x1e>
 80101f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101fc:	2302      	movs	r3, #2
 80101fe:	2200      	movs	r2, #0
 8010200:	f000 f9d0 	bl	80105a4 <_lseek_r>
 8010204:	89a3      	ldrh	r3, [r4, #12]
 8010206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801020a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801020e:	81a3      	strh	r3, [r4, #12]
 8010210:	4632      	mov	r2, r6
 8010212:	463b      	mov	r3, r7
 8010214:	4628      	mov	r0, r5
 8010216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801021a:	f000 b869 	b.w	80102f0 <_write_r>

0801021e <__sseek>:
 801021e:	b510      	push	{r4, lr}
 8010220:	460c      	mov	r4, r1
 8010222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010226:	f000 f9bd 	bl	80105a4 <_lseek_r>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	89a3      	ldrh	r3, [r4, #12]
 801022e:	bf15      	itete	ne
 8010230:	6560      	strne	r0, [r4, #84]	; 0x54
 8010232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801023a:	81a3      	strheq	r3, [r4, #12]
 801023c:	bf18      	it	ne
 801023e:	81a3      	strhne	r3, [r4, #12]
 8010240:	bd10      	pop	{r4, pc}

08010242 <__sclose>:
 8010242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010246:	f000 b8db 	b.w	8010400 <_close_r>
	...

0801024c <__swbuf_r>:
 801024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024e:	460e      	mov	r6, r1
 8010250:	4614      	mov	r4, r2
 8010252:	4605      	mov	r5, r0
 8010254:	b118      	cbz	r0, 801025e <__swbuf_r+0x12>
 8010256:	6983      	ldr	r3, [r0, #24]
 8010258:	b90b      	cbnz	r3, 801025e <__swbuf_r+0x12>
 801025a:	f7ff f9bf 	bl	800f5dc <__sinit>
 801025e:	4b21      	ldr	r3, [pc, #132]	; (80102e4 <__swbuf_r+0x98>)
 8010260:	429c      	cmp	r4, r3
 8010262:	d12b      	bne.n	80102bc <__swbuf_r+0x70>
 8010264:	686c      	ldr	r4, [r5, #4]
 8010266:	69a3      	ldr	r3, [r4, #24]
 8010268:	60a3      	str	r3, [r4, #8]
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	071a      	lsls	r2, r3, #28
 801026e:	d52f      	bpl.n	80102d0 <__swbuf_r+0x84>
 8010270:	6923      	ldr	r3, [r4, #16]
 8010272:	b36b      	cbz	r3, 80102d0 <__swbuf_r+0x84>
 8010274:	6923      	ldr	r3, [r4, #16]
 8010276:	6820      	ldr	r0, [r4, #0]
 8010278:	1ac0      	subs	r0, r0, r3
 801027a:	6963      	ldr	r3, [r4, #20]
 801027c:	b2f6      	uxtb	r6, r6
 801027e:	4283      	cmp	r3, r0
 8010280:	4637      	mov	r7, r6
 8010282:	dc04      	bgt.n	801028e <__swbuf_r+0x42>
 8010284:	4621      	mov	r1, r4
 8010286:	4628      	mov	r0, r5
 8010288:	f000 f950 	bl	801052c <_fflush_r>
 801028c:	bb30      	cbnz	r0, 80102dc <__swbuf_r+0x90>
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	3b01      	subs	r3, #1
 8010292:	60a3      	str	r3, [r4, #8]
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	1c5a      	adds	r2, r3, #1
 8010298:	6022      	str	r2, [r4, #0]
 801029a:	701e      	strb	r6, [r3, #0]
 801029c:	6963      	ldr	r3, [r4, #20]
 801029e:	3001      	adds	r0, #1
 80102a0:	4283      	cmp	r3, r0
 80102a2:	d004      	beq.n	80102ae <__swbuf_r+0x62>
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	07db      	lsls	r3, r3, #31
 80102a8:	d506      	bpl.n	80102b8 <__swbuf_r+0x6c>
 80102aa:	2e0a      	cmp	r6, #10
 80102ac:	d104      	bne.n	80102b8 <__swbuf_r+0x6c>
 80102ae:	4621      	mov	r1, r4
 80102b0:	4628      	mov	r0, r5
 80102b2:	f000 f93b 	bl	801052c <_fflush_r>
 80102b6:	b988      	cbnz	r0, 80102dc <__swbuf_r+0x90>
 80102b8:	4638      	mov	r0, r7
 80102ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102bc:	4b0a      	ldr	r3, [pc, #40]	; (80102e8 <__swbuf_r+0x9c>)
 80102be:	429c      	cmp	r4, r3
 80102c0:	d101      	bne.n	80102c6 <__swbuf_r+0x7a>
 80102c2:	68ac      	ldr	r4, [r5, #8]
 80102c4:	e7cf      	b.n	8010266 <__swbuf_r+0x1a>
 80102c6:	4b09      	ldr	r3, [pc, #36]	; (80102ec <__swbuf_r+0xa0>)
 80102c8:	429c      	cmp	r4, r3
 80102ca:	bf08      	it	eq
 80102cc:	68ec      	ldreq	r4, [r5, #12]
 80102ce:	e7ca      	b.n	8010266 <__swbuf_r+0x1a>
 80102d0:	4621      	mov	r1, r4
 80102d2:	4628      	mov	r0, r5
 80102d4:	f000 f81e 	bl	8010314 <__swsetup_r>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d0cb      	beq.n	8010274 <__swbuf_r+0x28>
 80102dc:	f04f 37ff 	mov.w	r7, #4294967295
 80102e0:	e7ea      	b.n	80102b8 <__swbuf_r+0x6c>
 80102e2:	bf00      	nop
 80102e4:	08013448 	.word	0x08013448
 80102e8:	08013468 	.word	0x08013468
 80102ec:	08013428 	.word	0x08013428

080102f0 <_write_r>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	4d07      	ldr	r5, [pc, #28]	; (8010310 <_write_r+0x20>)
 80102f4:	4604      	mov	r4, r0
 80102f6:	4608      	mov	r0, r1
 80102f8:	4611      	mov	r1, r2
 80102fa:	2200      	movs	r2, #0
 80102fc:	602a      	str	r2, [r5, #0]
 80102fe:	461a      	mov	r2, r3
 8010300:	f7f0 fbdb 	bl	8000aba <_write>
 8010304:	1c43      	adds	r3, r0, #1
 8010306:	d102      	bne.n	801030e <_write_r+0x1e>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	b103      	cbz	r3, 801030e <_write_r+0x1e>
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	2000a5c4 	.word	0x2000a5c4

08010314 <__swsetup_r>:
 8010314:	4b32      	ldr	r3, [pc, #200]	; (80103e0 <__swsetup_r+0xcc>)
 8010316:	b570      	push	{r4, r5, r6, lr}
 8010318:	681d      	ldr	r5, [r3, #0]
 801031a:	4606      	mov	r6, r0
 801031c:	460c      	mov	r4, r1
 801031e:	b125      	cbz	r5, 801032a <__swsetup_r+0x16>
 8010320:	69ab      	ldr	r3, [r5, #24]
 8010322:	b913      	cbnz	r3, 801032a <__swsetup_r+0x16>
 8010324:	4628      	mov	r0, r5
 8010326:	f7ff f959 	bl	800f5dc <__sinit>
 801032a:	4b2e      	ldr	r3, [pc, #184]	; (80103e4 <__swsetup_r+0xd0>)
 801032c:	429c      	cmp	r4, r3
 801032e:	d10f      	bne.n	8010350 <__swsetup_r+0x3c>
 8010330:	686c      	ldr	r4, [r5, #4]
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010338:	0719      	lsls	r1, r3, #28
 801033a:	d42c      	bmi.n	8010396 <__swsetup_r+0x82>
 801033c:	06dd      	lsls	r5, r3, #27
 801033e:	d411      	bmi.n	8010364 <__swsetup_r+0x50>
 8010340:	2309      	movs	r3, #9
 8010342:	6033      	str	r3, [r6, #0]
 8010344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010348:	81a3      	strh	r3, [r4, #12]
 801034a:	f04f 30ff 	mov.w	r0, #4294967295
 801034e:	e03e      	b.n	80103ce <__swsetup_r+0xba>
 8010350:	4b25      	ldr	r3, [pc, #148]	; (80103e8 <__swsetup_r+0xd4>)
 8010352:	429c      	cmp	r4, r3
 8010354:	d101      	bne.n	801035a <__swsetup_r+0x46>
 8010356:	68ac      	ldr	r4, [r5, #8]
 8010358:	e7eb      	b.n	8010332 <__swsetup_r+0x1e>
 801035a:	4b24      	ldr	r3, [pc, #144]	; (80103ec <__swsetup_r+0xd8>)
 801035c:	429c      	cmp	r4, r3
 801035e:	bf08      	it	eq
 8010360:	68ec      	ldreq	r4, [r5, #12]
 8010362:	e7e6      	b.n	8010332 <__swsetup_r+0x1e>
 8010364:	0758      	lsls	r0, r3, #29
 8010366:	d512      	bpl.n	801038e <__swsetup_r+0x7a>
 8010368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801036a:	b141      	cbz	r1, 801037e <__swsetup_r+0x6a>
 801036c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010370:	4299      	cmp	r1, r3
 8010372:	d002      	beq.n	801037a <__swsetup_r+0x66>
 8010374:	4630      	mov	r0, r6
 8010376:	f7ff f9eb 	bl	800f750 <_free_r>
 801037a:	2300      	movs	r3, #0
 801037c:	6363      	str	r3, [r4, #52]	; 0x34
 801037e:	89a3      	ldrh	r3, [r4, #12]
 8010380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010384:	81a3      	strh	r3, [r4, #12]
 8010386:	2300      	movs	r3, #0
 8010388:	6063      	str	r3, [r4, #4]
 801038a:	6923      	ldr	r3, [r4, #16]
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	f043 0308 	orr.w	r3, r3, #8
 8010394:	81a3      	strh	r3, [r4, #12]
 8010396:	6923      	ldr	r3, [r4, #16]
 8010398:	b94b      	cbnz	r3, 80103ae <__swsetup_r+0x9a>
 801039a:	89a3      	ldrh	r3, [r4, #12]
 801039c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103a4:	d003      	beq.n	80103ae <__swsetup_r+0x9a>
 80103a6:	4621      	mov	r1, r4
 80103a8:	4630      	mov	r0, r6
 80103aa:	f000 f933 	bl	8010614 <__smakebuf_r>
 80103ae:	89a0      	ldrh	r0, [r4, #12]
 80103b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103b4:	f010 0301 	ands.w	r3, r0, #1
 80103b8:	d00a      	beq.n	80103d0 <__swsetup_r+0xbc>
 80103ba:	2300      	movs	r3, #0
 80103bc:	60a3      	str	r3, [r4, #8]
 80103be:	6963      	ldr	r3, [r4, #20]
 80103c0:	425b      	negs	r3, r3
 80103c2:	61a3      	str	r3, [r4, #24]
 80103c4:	6923      	ldr	r3, [r4, #16]
 80103c6:	b943      	cbnz	r3, 80103da <__swsetup_r+0xc6>
 80103c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80103cc:	d1ba      	bne.n	8010344 <__swsetup_r+0x30>
 80103ce:	bd70      	pop	{r4, r5, r6, pc}
 80103d0:	0781      	lsls	r1, r0, #30
 80103d2:	bf58      	it	pl
 80103d4:	6963      	ldrpl	r3, [r4, #20]
 80103d6:	60a3      	str	r3, [r4, #8]
 80103d8:	e7f4      	b.n	80103c4 <__swsetup_r+0xb0>
 80103da:	2000      	movs	r0, #0
 80103dc:	e7f7      	b.n	80103ce <__swsetup_r+0xba>
 80103de:	bf00      	nop
 80103e0:	2000002c 	.word	0x2000002c
 80103e4:	08013448 	.word	0x08013448
 80103e8:	08013468 	.word	0x08013468
 80103ec:	08013428 	.word	0x08013428

080103f0 <abort>:
 80103f0:	b508      	push	{r3, lr}
 80103f2:	2006      	movs	r0, #6
 80103f4:	f000 f9c4 	bl	8010780 <raise>
 80103f8:	2001      	movs	r0, #1
 80103fa:	f7f0 fb37 	bl	8000a6c <_exit>
	...

08010400 <_close_r>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	4d06      	ldr	r5, [pc, #24]	; (801041c <_close_r+0x1c>)
 8010404:	2300      	movs	r3, #0
 8010406:	4604      	mov	r4, r0
 8010408:	4608      	mov	r0, r1
 801040a:	602b      	str	r3, [r5, #0]
 801040c:	f7f0 fb71 	bl	8000af2 <_close>
 8010410:	1c43      	adds	r3, r0, #1
 8010412:	d102      	bne.n	801041a <_close_r+0x1a>
 8010414:	682b      	ldr	r3, [r5, #0]
 8010416:	b103      	cbz	r3, 801041a <_close_r+0x1a>
 8010418:	6023      	str	r3, [r4, #0]
 801041a:	bd38      	pop	{r3, r4, r5, pc}
 801041c:	2000a5c4 	.word	0x2000a5c4

08010420 <__sflush_r>:
 8010420:	898a      	ldrh	r2, [r1, #12]
 8010422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010426:	4605      	mov	r5, r0
 8010428:	0710      	lsls	r0, r2, #28
 801042a:	460c      	mov	r4, r1
 801042c:	d458      	bmi.n	80104e0 <__sflush_r+0xc0>
 801042e:	684b      	ldr	r3, [r1, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	dc05      	bgt.n	8010440 <__sflush_r+0x20>
 8010434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010436:	2b00      	cmp	r3, #0
 8010438:	dc02      	bgt.n	8010440 <__sflush_r+0x20>
 801043a:	2000      	movs	r0, #0
 801043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010442:	2e00      	cmp	r6, #0
 8010444:	d0f9      	beq.n	801043a <__sflush_r+0x1a>
 8010446:	2300      	movs	r3, #0
 8010448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801044c:	682f      	ldr	r7, [r5, #0]
 801044e:	602b      	str	r3, [r5, #0]
 8010450:	d032      	beq.n	80104b8 <__sflush_r+0x98>
 8010452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010454:	89a3      	ldrh	r3, [r4, #12]
 8010456:	075a      	lsls	r2, r3, #29
 8010458:	d505      	bpl.n	8010466 <__sflush_r+0x46>
 801045a:	6863      	ldr	r3, [r4, #4]
 801045c:	1ac0      	subs	r0, r0, r3
 801045e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010460:	b10b      	cbz	r3, 8010466 <__sflush_r+0x46>
 8010462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010464:	1ac0      	subs	r0, r0, r3
 8010466:	2300      	movs	r3, #0
 8010468:	4602      	mov	r2, r0
 801046a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801046c:	6a21      	ldr	r1, [r4, #32]
 801046e:	4628      	mov	r0, r5
 8010470:	47b0      	blx	r6
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	d106      	bne.n	8010486 <__sflush_r+0x66>
 8010478:	6829      	ldr	r1, [r5, #0]
 801047a:	291d      	cmp	r1, #29
 801047c:	d82c      	bhi.n	80104d8 <__sflush_r+0xb8>
 801047e:	4a2a      	ldr	r2, [pc, #168]	; (8010528 <__sflush_r+0x108>)
 8010480:	40ca      	lsrs	r2, r1
 8010482:	07d6      	lsls	r6, r2, #31
 8010484:	d528      	bpl.n	80104d8 <__sflush_r+0xb8>
 8010486:	2200      	movs	r2, #0
 8010488:	6062      	str	r2, [r4, #4]
 801048a:	04d9      	lsls	r1, r3, #19
 801048c:	6922      	ldr	r2, [r4, #16]
 801048e:	6022      	str	r2, [r4, #0]
 8010490:	d504      	bpl.n	801049c <__sflush_r+0x7c>
 8010492:	1c42      	adds	r2, r0, #1
 8010494:	d101      	bne.n	801049a <__sflush_r+0x7a>
 8010496:	682b      	ldr	r3, [r5, #0]
 8010498:	b903      	cbnz	r3, 801049c <__sflush_r+0x7c>
 801049a:	6560      	str	r0, [r4, #84]	; 0x54
 801049c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801049e:	602f      	str	r7, [r5, #0]
 80104a0:	2900      	cmp	r1, #0
 80104a2:	d0ca      	beq.n	801043a <__sflush_r+0x1a>
 80104a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104a8:	4299      	cmp	r1, r3
 80104aa:	d002      	beq.n	80104b2 <__sflush_r+0x92>
 80104ac:	4628      	mov	r0, r5
 80104ae:	f7ff f94f 	bl	800f750 <_free_r>
 80104b2:	2000      	movs	r0, #0
 80104b4:	6360      	str	r0, [r4, #52]	; 0x34
 80104b6:	e7c1      	b.n	801043c <__sflush_r+0x1c>
 80104b8:	6a21      	ldr	r1, [r4, #32]
 80104ba:	2301      	movs	r3, #1
 80104bc:	4628      	mov	r0, r5
 80104be:	47b0      	blx	r6
 80104c0:	1c41      	adds	r1, r0, #1
 80104c2:	d1c7      	bne.n	8010454 <__sflush_r+0x34>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d0c4      	beq.n	8010454 <__sflush_r+0x34>
 80104ca:	2b1d      	cmp	r3, #29
 80104cc:	d001      	beq.n	80104d2 <__sflush_r+0xb2>
 80104ce:	2b16      	cmp	r3, #22
 80104d0:	d101      	bne.n	80104d6 <__sflush_r+0xb6>
 80104d2:	602f      	str	r7, [r5, #0]
 80104d4:	e7b1      	b.n	801043a <__sflush_r+0x1a>
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104dc:	81a3      	strh	r3, [r4, #12]
 80104de:	e7ad      	b.n	801043c <__sflush_r+0x1c>
 80104e0:	690f      	ldr	r7, [r1, #16]
 80104e2:	2f00      	cmp	r7, #0
 80104e4:	d0a9      	beq.n	801043a <__sflush_r+0x1a>
 80104e6:	0793      	lsls	r3, r2, #30
 80104e8:	680e      	ldr	r6, [r1, #0]
 80104ea:	bf08      	it	eq
 80104ec:	694b      	ldreq	r3, [r1, #20]
 80104ee:	600f      	str	r7, [r1, #0]
 80104f0:	bf18      	it	ne
 80104f2:	2300      	movne	r3, #0
 80104f4:	eba6 0807 	sub.w	r8, r6, r7
 80104f8:	608b      	str	r3, [r1, #8]
 80104fa:	f1b8 0f00 	cmp.w	r8, #0
 80104fe:	dd9c      	ble.n	801043a <__sflush_r+0x1a>
 8010500:	6a21      	ldr	r1, [r4, #32]
 8010502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010504:	4643      	mov	r3, r8
 8010506:	463a      	mov	r2, r7
 8010508:	4628      	mov	r0, r5
 801050a:	47b0      	blx	r6
 801050c:	2800      	cmp	r0, #0
 801050e:	dc06      	bgt.n	801051e <__sflush_r+0xfe>
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010516:	81a3      	strh	r3, [r4, #12]
 8010518:	f04f 30ff 	mov.w	r0, #4294967295
 801051c:	e78e      	b.n	801043c <__sflush_r+0x1c>
 801051e:	4407      	add	r7, r0
 8010520:	eba8 0800 	sub.w	r8, r8, r0
 8010524:	e7e9      	b.n	80104fa <__sflush_r+0xda>
 8010526:	bf00      	nop
 8010528:	20400001 	.word	0x20400001

0801052c <_fflush_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	690b      	ldr	r3, [r1, #16]
 8010530:	4605      	mov	r5, r0
 8010532:	460c      	mov	r4, r1
 8010534:	b913      	cbnz	r3, 801053c <_fflush_r+0x10>
 8010536:	2500      	movs	r5, #0
 8010538:	4628      	mov	r0, r5
 801053a:	bd38      	pop	{r3, r4, r5, pc}
 801053c:	b118      	cbz	r0, 8010546 <_fflush_r+0x1a>
 801053e:	6983      	ldr	r3, [r0, #24]
 8010540:	b90b      	cbnz	r3, 8010546 <_fflush_r+0x1a>
 8010542:	f7ff f84b 	bl	800f5dc <__sinit>
 8010546:	4b14      	ldr	r3, [pc, #80]	; (8010598 <_fflush_r+0x6c>)
 8010548:	429c      	cmp	r4, r3
 801054a:	d11b      	bne.n	8010584 <_fflush_r+0x58>
 801054c:	686c      	ldr	r4, [r5, #4]
 801054e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d0ef      	beq.n	8010536 <_fflush_r+0xa>
 8010556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010558:	07d0      	lsls	r0, r2, #31
 801055a:	d404      	bmi.n	8010566 <_fflush_r+0x3a>
 801055c:	0599      	lsls	r1, r3, #22
 801055e:	d402      	bmi.n	8010566 <_fflush_r+0x3a>
 8010560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010562:	f7ff f8eb 	bl	800f73c <__retarget_lock_acquire_recursive>
 8010566:	4628      	mov	r0, r5
 8010568:	4621      	mov	r1, r4
 801056a:	f7ff ff59 	bl	8010420 <__sflush_r>
 801056e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010570:	07da      	lsls	r2, r3, #31
 8010572:	4605      	mov	r5, r0
 8010574:	d4e0      	bmi.n	8010538 <_fflush_r+0xc>
 8010576:	89a3      	ldrh	r3, [r4, #12]
 8010578:	059b      	lsls	r3, r3, #22
 801057a:	d4dd      	bmi.n	8010538 <_fflush_r+0xc>
 801057c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801057e:	f7ff f8de 	bl	800f73e <__retarget_lock_release_recursive>
 8010582:	e7d9      	b.n	8010538 <_fflush_r+0xc>
 8010584:	4b05      	ldr	r3, [pc, #20]	; (801059c <_fflush_r+0x70>)
 8010586:	429c      	cmp	r4, r3
 8010588:	d101      	bne.n	801058e <_fflush_r+0x62>
 801058a:	68ac      	ldr	r4, [r5, #8]
 801058c:	e7df      	b.n	801054e <_fflush_r+0x22>
 801058e:	4b04      	ldr	r3, [pc, #16]	; (80105a0 <_fflush_r+0x74>)
 8010590:	429c      	cmp	r4, r3
 8010592:	bf08      	it	eq
 8010594:	68ec      	ldreq	r4, [r5, #12]
 8010596:	e7da      	b.n	801054e <_fflush_r+0x22>
 8010598:	08013448 	.word	0x08013448
 801059c:	08013468 	.word	0x08013468
 80105a0:	08013428 	.word	0x08013428

080105a4 <_lseek_r>:
 80105a4:	b538      	push	{r3, r4, r5, lr}
 80105a6:	4d07      	ldr	r5, [pc, #28]	; (80105c4 <_lseek_r+0x20>)
 80105a8:	4604      	mov	r4, r0
 80105aa:	4608      	mov	r0, r1
 80105ac:	4611      	mov	r1, r2
 80105ae:	2200      	movs	r2, #0
 80105b0:	602a      	str	r2, [r5, #0]
 80105b2:	461a      	mov	r2, r3
 80105b4:	f7f0 fac4 	bl	8000b40 <_lseek>
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	d102      	bne.n	80105c2 <_lseek_r+0x1e>
 80105bc:	682b      	ldr	r3, [r5, #0]
 80105be:	b103      	cbz	r3, 80105c2 <_lseek_r+0x1e>
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	bd38      	pop	{r3, r4, r5, pc}
 80105c4:	2000a5c4 	.word	0x2000a5c4

080105c8 <__swhatbuf_r>:
 80105c8:	b570      	push	{r4, r5, r6, lr}
 80105ca:	460e      	mov	r6, r1
 80105cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d0:	2900      	cmp	r1, #0
 80105d2:	b096      	sub	sp, #88	; 0x58
 80105d4:	4614      	mov	r4, r2
 80105d6:	461d      	mov	r5, r3
 80105d8:	da08      	bge.n	80105ec <__swhatbuf_r+0x24>
 80105da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105de:	2200      	movs	r2, #0
 80105e0:	602a      	str	r2, [r5, #0]
 80105e2:	061a      	lsls	r2, r3, #24
 80105e4:	d410      	bmi.n	8010608 <__swhatbuf_r+0x40>
 80105e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ea:	e00e      	b.n	801060a <__swhatbuf_r+0x42>
 80105ec:	466a      	mov	r2, sp
 80105ee:	f000 f8e3 	bl	80107b8 <_fstat_r>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	dbf1      	blt.n	80105da <__swhatbuf_r+0x12>
 80105f6:	9a01      	ldr	r2, [sp, #4]
 80105f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010600:	425a      	negs	r2, r3
 8010602:	415a      	adcs	r2, r3
 8010604:	602a      	str	r2, [r5, #0]
 8010606:	e7ee      	b.n	80105e6 <__swhatbuf_r+0x1e>
 8010608:	2340      	movs	r3, #64	; 0x40
 801060a:	2000      	movs	r0, #0
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	b016      	add	sp, #88	; 0x58
 8010610:	bd70      	pop	{r4, r5, r6, pc}
	...

08010614 <__smakebuf_r>:
 8010614:	898b      	ldrh	r3, [r1, #12]
 8010616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010618:	079d      	lsls	r5, r3, #30
 801061a:	4606      	mov	r6, r0
 801061c:	460c      	mov	r4, r1
 801061e:	d507      	bpl.n	8010630 <__smakebuf_r+0x1c>
 8010620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	6123      	str	r3, [r4, #16]
 8010628:	2301      	movs	r3, #1
 801062a:	6163      	str	r3, [r4, #20]
 801062c:	b002      	add	sp, #8
 801062e:	bd70      	pop	{r4, r5, r6, pc}
 8010630:	ab01      	add	r3, sp, #4
 8010632:	466a      	mov	r2, sp
 8010634:	f7ff ffc8 	bl	80105c8 <__swhatbuf_r>
 8010638:	9900      	ldr	r1, [sp, #0]
 801063a:	4605      	mov	r5, r0
 801063c:	4630      	mov	r0, r6
 801063e:	f7ff f8f3 	bl	800f828 <_malloc_r>
 8010642:	b948      	cbnz	r0, 8010658 <__smakebuf_r+0x44>
 8010644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010648:	059a      	lsls	r2, r3, #22
 801064a:	d4ef      	bmi.n	801062c <__smakebuf_r+0x18>
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	f043 0302 	orr.w	r3, r3, #2
 8010654:	81a3      	strh	r3, [r4, #12]
 8010656:	e7e3      	b.n	8010620 <__smakebuf_r+0xc>
 8010658:	4b0d      	ldr	r3, [pc, #52]	; (8010690 <__smakebuf_r+0x7c>)
 801065a:	62b3      	str	r3, [r6, #40]	; 0x28
 801065c:	89a3      	ldrh	r3, [r4, #12]
 801065e:	6020      	str	r0, [r4, #0]
 8010660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010664:	81a3      	strh	r3, [r4, #12]
 8010666:	9b00      	ldr	r3, [sp, #0]
 8010668:	6163      	str	r3, [r4, #20]
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	6120      	str	r0, [r4, #16]
 801066e:	b15b      	cbz	r3, 8010688 <__smakebuf_r+0x74>
 8010670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010674:	4630      	mov	r0, r6
 8010676:	f000 f8b1 	bl	80107dc <_isatty_r>
 801067a:	b128      	cbz	r0, 8010688 <__smakebuf_r+0x74>
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	f023 0303 	bic.w	r3, r3, #3
 8010682:	f043 0301 	orr.w	r3, r3, #1
 8010686:	81a3      	strh	r3, [r4, #12]
 8010688:	89a0      	ldrh	r0, [r4, #12]
 801068a:	4305      	orrs	r5, r0
 801068c:	81a5      	strh	r5, [r4, #12]
 801068e:	e7cd      	b.n	801062c <__smakebuf_r+0x18>
 8010690:	0800f575 	.word	0x0800f575

08010694 <__malloc_lock>:
 8010694:	4801      	ldr	r0, [pc, #4]	; (801069c <__malloc_lock+0x8>)
 8010696:	f7ff b851 	b.w	800f73c <__retarget_lock_acquire_recursive>
 801069a:	bf00      	nop
 801069c:	2000a5c8 	.word	0x2000a5c8

080106a0 <__malloc_unlock>:
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__malloc_unlock+0x8>)
 80106a2:	f7ff b84c 	b.w	800f73e <__retarget_lock_release_recursive>
 80106a6:	bf00      	nop
 80106a8:	2000a5c8 	.word	0x2000a5c8

080106ac <_realloc_r>:
 80106ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b0:	4680      	mov	r8, r0
 80106b2:	4614      	mov	r4, r2
 80106b4:	460e      	mov	r6, r1
 80106b6:	b921      	cbnz	r1, 80106c2 <_realloc_r+0x16>
 80106b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106bc:	4611      	mov	r1, r2
 80106be:	f7ff b8b3 	b.w	800f828 <_malloc_r>
 80106c2:	b92a      	cbnz	r2, 80106d0 <_realloc_r+0x24>
 80106c4:	f7ff f844 	bl	800f750 <_free_r>
 80106c8:	4625      	mov	r5, r4
 80106ca:	4628      	mov	r0, r5
 80106cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d0:	f000 f894 	bl	80107fc <_malloc_usable_size_r>
 80106d4:	4284      	cmp	r4, r0
 80106d6:	4607      	mov	r7, r0
 80106d8:	d802      	bhi.n	80106e0 <_realloc_r+0x34>
 80106da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80106de:	d812      	bhi.n	8010706 <_realloc_r+0x5a>
 80106e0:	4621      	mov	r1, r4
 80106e2:	4640      	mov	r0, r8
 80106e4:	f7ff f8a0 	bl	800f828 <_malloc_r>
 80106e8:	4605      	mov	r5, r0
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d0ed      	beq.n	80106ca <_realloc_r+0x1e>
 80106ee:	42bc      	cmp	r4, r7
 80106f0:	4622      	mov	r2, r4
 80106f2:	4631      	mov	r1, r6
 80106f4:	bf28      	it	cs
 80106f6:	463a      	movcs	r2, r7
 80106f8:	f7fe fe54 	bl	800f3a4 <memcpy>
 80106fc:	4631      	mov	r1, r6
 80106fe:	4640      	mov	r0, r8
 8010700:	f7ff f826 	bl	800f750 <_free_r>
 8010704:	e7e1      	b.n	80106ca <_realloc_r+0x1e>
 8010706:	4635      	mov	r5, r6
 8010708:	e7df      	b.n	80106ca <_realloc_r+0x1e>
	...

0801070c <_read_r>:
 801070c:	b538      	push	{r3, r4, r5, lr}
 801070e:	4d07      	ldr	r5, [pc, #28]	; (801072c <_read_r+0x20>)
 8010710:	4604      	mov	r4, r0
 8010712:	4608      	mov	r0, r1
 8010714:	4611      	mov	r1, r2
 8010716:	2200      	movs	r2, #0
 8010718:	602a      	str	r2, [r5, #0]
 801071a:	461a      	mov	r2, r3
 801071c:	f7f0 f9b0 	bl	8000a80 <_read>
 8010720:	1c43      	adds	r3, r0, #1
 8010722:	d102      	bne.n	801072a <_read_r+0x1e>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	b103      	cbz	r3, 801072a <_read_r+0x1e>
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	2000a5c4 	.word	0x2000a5c4

08010730 <_raise_r>:
 8010730:	291f      	cmp	r1, #31
 8010732:	b538      	push	{r3, r4, r5, lr}
 8010734:	4604      	mov	r4, r0
 8010736:	460d      	mov	r5, r1
 8010738:	d904      	bls.n	8010744 <_raise_r+0x14>
 801073a:	2316      	movs	r3, #22
 801073c:	6003      	str	r3, [r0, #0]
 801073e:	f04f 30ff 	mov.w	r0, #4294967295
 8010742:	bd38      	pop	{r3, r4, r5, pc}
 8010744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010746:	b112      	cbz	r2, 801074e <_raise_r+0x1e>
 8010748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801074c:	b94b      	cbnz	r3, 8010762 <_raise_r+0x32>
 801074e:	4620      	mov	r0, r4
 8010750:	f000 f830 	bl	80107b4 <_getpid_r>
 8010754:	462a      	mov	r2, r5
 8010756:	4601      	mov	r1, r0
 8010758:	4620      	mov	r0, r4
 801075a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801075e:	f000 b817 	b.w	8010790 <_kill_r>
 8010762:	2b01      	cmp	r3, #1
 8010764:	d00a      	beq.n	801077c <_raise_r+0x4c>
 8010766:	1c59      	adds	r1, r3, #1
 8010768:	d103      	bne.n	8010772 <_raise_r+0x42>
 801076a:	2316      	movs	r3, #22
 801076c:	6003      	str	r3, [r0, #0]
 801076e:	2001      	movs	r0, #1
 8010770:	e7e7      	b.n	8010742 <_raise_r+0x12>
 8010772:	2400      	movs	r4, #0
 8010774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010778:	4628      	mov	r0, r5
 801077a:	4798      	blx	r3
 801077c:	2000      	movs	r0, #0
 801077e:	e7e0      	b.n	8010742 <_raise_r+0x12>

08010780 <raise>:
 8010780:	4b02      	ldr	r3, [pc, #8]	; (801078c <raise+0xc>)
 8010782:	4601      	mov	r1, r0
 8010784:	6818      	ldr	r0, [r3, #0]
 8010786:	f7ff bfd3 	b.w	8010730 <_raise_r>
 801078a:	bf00      	nop
 801078c:	2000002c 	.word	0x2000002c

08010790 <_kill_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	4d07      	ldr	r5, [pc, #28]	; (80107b0 <_kill_r+0x20>)
 8010794:	2300      	movs	r3, #0
 8010796:	4604      	mov	r4, r0
 8010798:	4608      	mov	r0, r1
 801079a:	4611      	mov	r1, r2
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	f7f0 f953 	bl	8000a48 <_kill>
 80107a2:	1c43      	adds	r3, r0, #1
 80107a4:	d102      	bne.n	80107ac <_kill_r+0x1c>
 80107a6:	682b      	ldr	r3, [r5, #0]
 80107a8:	b103      	cbz	r3, 80107ac <_kill_r+0x1c>
 80107aa:	6023      	str	r3, [r4, #0]
 80107ac:	bd38      	pop	{r3, r4, r5, pc}
 80107ae:	bf00      	nop
 80107b0:	2000a5c4 	.word	0x2000a5c4

080107b4 <_getpid_r>:
 80107b4:	f7f0 b940 	b.w	8000a38 <_getpid>

080107b8 <_fstat_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	4d07      	ldr	r5, [pc, #28]	; (80107d8 <_fstat_r+0x20>)
 80107bc:	2300      	movs	r3, #0
 80107be:	4604      	mov	r4, r0
 80107c0:	4608      	mov	r0, r1
 80107c2:	4611      	mov	r1, r2
 80107c4:	602b      	str	r3, [r5, #0]
 80107c6:	f7f0 f9a0 	bl	8000b0a <_fstat>
 80107ca:	1c43      	adds	r3, r0, #1
 80107cc:	d102      	bne.n	80107d4 <_fstat_r+0x1c>
 80107ce:	682b      	ldr	r3, [r5, #0]
 80107d0:	b103      	cbz	r3, 80107d4 <_fstat_r+0x1c>
 80107d2:	6023      	str	r3, [r4, #0]
 80107d4:	bd38      	pop	{r3, r4, r5, pc}
 80107d6:	bf00      	nop
 80107d8:	2000a5c4 	.word	0x2000a5c4

080107dc <_isatty_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4d06      	ldr	r5, [pc, #24]	; (80107f8 <_isatty_r+0x1c>)
 80107e0:	2300      	movs	r3, #0
 80107e2:	4604      	mov	r4, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	602b      	str	r3, [r5, #0]
 80107e8:	f7f0 f99f 	bl	8000b2a <_isatty>
 80107ec:	1c43      	adds	r3, r0, #1
 80107ee:	d102      	bne.n	80107f6 <_isatty_r+0x1a>
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	b103      	cbz	r3, 80107f6 <_isatty_r+0x1a>
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	bd38      	pop	{r3, r4, r5, pc}
 80107f8:	2000a5c4 	.word	0x2000a5c4

080107fc <_malloc_usable_size_r>:
 80107fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010800:	1f18      	subs	r0, r3, #4
 8010802:	2b00      	cmp	r3, #0
 8010804:	bfbc      	itt	lt
 8010806:	580b      	ldrlt	r3, [r1, r0]
 8010808:	18c0      	addlt	r0, r0, r3
 801080a:	4770      	bx	lr

0801080c <_init>:
 801080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080e:	bf00      	nop
 8010810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010812:	bc08      	pop	{r3}
 8010814:	469e      	mov	lr, r3
 8010816:	4770      	bx	lr

08010818 <_fini>:
 8010818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081a:	bf00      	nop
 801081c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801081e:	bc08      	pop	{r3}
 8010820:	469e      	mov	lr, r3
 8010822:	4770      	bx	lr
